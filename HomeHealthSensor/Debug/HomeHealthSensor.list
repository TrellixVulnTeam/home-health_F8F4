
HomeHealthSensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b38  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08009cc8  08009cc8  00019cc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d44  08009d44  000200a8  2**0
                  CONTENTS
  4 .ARM          00000008  08009d44  08009d44  00019d44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009d4c  08009d4c  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d4c  08009d4c  00019d4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009d50  08009d50  00019d50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  08009d54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200a8  2**0
                  CONTENTS
 10 .bss          00000918  200000a8  200000a8  000200a8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200009c0  200009c0  000200a8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001fe4f  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004261  00000000  00000000  0003ff27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014e8  00000000  00000000  00044188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001388  00000000  00000000  00045670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026354  00000000  00000000  000469f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c523  00000000  00000000  0006cd4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dab5f  00000000  00000000  0008926f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00163dce  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005b60  00000000  00000000  00163e24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a8 	.word	0x200000a8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009cb0 	.word	0x08009cb0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000ac 	.word	0x200000ac
 80001cc:	08009cb0 	.word	0x08009cb0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <DWT_Delay_Init>:

/* private functions prototypes */
/**
 * @brief DWT Cortex Tick counter for Microsecond delay
 */
static uint32_t DWT_Delay_Init(void) {
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 800057c:	4b14      	ldr	r3, [pc, #80]	; (80005d0 <DWT_Delay_Init+0x58>)
 800057e:	68db      	ldr	r3, [r3, #12]
 8000580:	4a13      	ldr	r2, [pc, #76]	; (80005d0 <DWT_Delay_Init+0x58>)
 8000582:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000586:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000588:	4b11      	ldr	r3, [pc, #68]	; (80005d0 <DWT_Delay_Init+0x58>)
 800058a:	68db      	ldr	r3, [r3, #12]
 800058c:	4a10      	ldr	r2, [pc, #64]	; (80005d0 <DWT_Delay_Init+0x58>)
 800058e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000592:	60d3      	str	r3, [r2, #12]
  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk;
 8000594:	4b0f      	ldr	r3, [pc, #60]	; (80005d4 <DWT_Delay_Init+0x5c>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a0e      	ldr	r2, [pc, #56]	; (80005d4 <DWT_Delay_Init+0x5c>)
 800059a:	f023 0301 	bic.w	r3, r3, #1
 800059e:	6013      	str	r3, [r2, #0]
  /* Enable clock cycle counter */
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80005a0:	4b0c      	ldr	r3, [pc, #48]	; (80005d4 <DWT_Delay_Init+0x5c>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a0b      	ldr	r2, [pc, #44]	; (80005d4 <DWT_Delay_Init+0x5c>)
 80005a6:	f043 0301 	orr.w	r3, r3, #1
 80005aa:	6013      	str	r3, [r2, #0]
  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 80005ac:	4b09      	ldr	r3, [pc, #36]	; (80005d4 <DWT_Delay_Init+0x5c>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	605a      	str	r2, [r3, #4]
  /* 3 NO OPERATION instructions */
  __NOP();
 80005b2:	bf00      	nop
  __NOP();
 80005b4:	bf00      	nop
  __NOP();
 80005b6:	bf00      	nop
  /* Check if clock cycle counter has started */
  if(DWT->CYCCNT)
 80005b8:	4b06      	ldr	r3, [pc, #24]	; (80005d4 <DWT_Delay_Init+0x5c>)
 80005ba:	685b      	ldr	r3, [r3, #4]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <DWT_Delay_Init+0x4c>
  {
    return 0;
 80005c0:	2300      	movs	r3, #0
 80005c2:	e000      	b.n	80005c6 <DWT_Delay_Init+0x4e>
  }
  else
  {
    return 1;
 80005c4:	2301      	movs	r3, #1
  }
}
 80005c6:	4618      	mov	r0, r3
 80005c8:	46bd      	mov	sp, r7
 80005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ce:	4770      	bx	lr
 80005d0:	e000edf0 	.word	0xe000edf0
 80005d4:	e0001000 	.word	0xe0001000

080005d8 <DWT_Delay_us>:

__STATIC_INLINE void DWT_Delay_us(volatile uint32_t usec)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b084      	sub	sp, #16
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
 uint32_t clk_cycle_start = DWT->CYCCNT;
 80005e0:	4b0d      	ldr	r3, [pc, #52]	; (8000618 <DWT_Delay_us+0x40>)
 80005e2:	685b      	ldr	r3, [r3, #4]
 80005e4:	60fb      	str	r3, [r7, #12]
 usec *= (HAL_RCC_GetHCLKFreq() / 1000000);
 80005e6:	f005 f82d 	bl	8005644 <HAL_RCC_GetHCLKFreq>
 80005ea:	4603      	mov	r3, r0
 80005ec:	4a0b      	ldr	r2, [pc, #44]	; (800061c <DWT_Delay_us+0x44>)
 80005ee:	fba2 2303 	umull	r2, r3, r2, r3
 80005f2:	0c9b      	lsrs	r3, r3, #18
 80005f4:	687a      	ldr	r2, [r7, #4]
 80005f6:	fb02 f303 	mul.w	r3, r2, r3
 80005fa:	607b      	str	r3, [r7, #4]
 while ((DWT->CYCCNT - clk_cycle_start) < usec);
 80005fc:	bf00      	nop
 80005fe:	4b06      	ldr	r3, [pc, #24]	; (8000618 <DWT_Delay_us+0x40>)
 8000600:	685a      	ldr	r2, [r3, #4]
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	1ad2      	subs	r2, r2, r3
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	429a      	cmp	r2, r3
 800060a:	d3f8      	bcc.n	80005fe <DWT_Delay_us+0x26>
}
 800060c:	bf00      	nop
 800060e:	bf00      	nop
 8000610:	3710      	adds	r7, #16
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	e0001000 	.word	0xe0001000
 800061c:	431bde83 	.word	0x431bde83

08000620 <lcd16x2_enablePulse>:

/**
 * @brief Enable Pulse function
 */
static void lcd16x2_enablePulse(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_E, GPIO_PIN_SET);
 8000624:	4b0b      	ldr	r3, [pc, #44]	; (8000654 <lcd16x2_enablePulse+0x34>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a0b      	ldr	r2, [pc, #44]	; (8000658 <lcd16x2_enablePulse+0x38>)
 800062a:	8811      	ldrh	r1, [r2, #0]
 800062c:	2201      	movs	r2, #1
 800062e:	4618      	mov	r0, r3
 8000630:	f002 f85a 	bl	80026e8 <HAL_GPIO_WritePin>
  DWT_Delay_us(T_CONST);
 8000634:	2014      	movs	r0, #20
 8000636:	f7ff ffcf 	bl	80005d8 <DWT_Delay_us>
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_E, GPIO_PIN_RESET);
 800063a:	4b06      	ldr	r3, [pc, #24]	; (8000654 <lcd16x2_enablePulse+0x34>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	4a06      	ldr	r2, [pc, #24]	; (8000658 <lcd16x2_enablePulse+0x38>)
 8000640:	8811      	ldrh	r1, [r2, #0]
 8000642:	2200      	movs	r2, #0
 8000644:	4618      	mov	r0, r3
 8000646:	f002 f84f 	bl	80026e8 <HAL_GPIO_WritePin>
  DWT_Delay_us(60);
 800064a:	203c      	movs	r0, #60	; 0x3c
 800064c:	f7ff ffc4 	bl	80005d8 <DWT_Delay_us>
}
 8000650:	bf00      	nop
 8000652:	bd80      	pop	{r7, pc}
 8000654:	200000c4 	.word	0x200000c4
 8000658:	200000ca 	.word	0x200000ca

0800065c <lcd16x2_rs>:

/**
 * @brief RS control
 */
static void lcd16x2_rs(bool state)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	4603      	mov	r3, r0
 8000664:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, (GPIO_PinState)state);
 8000666:	4b06      	ldr	r3, [pc, #24]	; (8000680 <lcd16x2_rs+0x24>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	4a06      	ldr	r2, [pc, #24]	; (8000684 <lcd16x2_rs+0x28>)
 800066c:	8811      	ldrh	r1, [r2, #0]
 800066e:	79fa      	ldrb	r2, [r7, #7]
 8000670:	4618      	mov	r0, r3
 8000672:	f002 f839 	bl	80026e8 <HAL_GPIO_WritePin>
}
 8000676:	bf00      	nop
 8000678:	3708      	adds	r7, #8
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	200000c4 	.word	0x200000c4
 8000684:	200000c8 	.word	0x200000c8

08000688 <lcd16x2_write>:

/**
 * @brief Write parallel signal to lcd
 */
static void lcd16x2_write(uint8_t wbyte)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b084      	sub	sp, #16
 800068c:	af00      	add	r7, sp, #0
 800068e:	4603      	mov	r3, r0
 8000690:	71fb      	strb	r3, [r7, #7]
  uint8_t LSB_nibble = wbyte&0xF, MSB_nibble = (wbyte>>4)&0xF;
 8000692:	79fb      	ldrb	r3, [r7, #7]
 8000694:	f003 030f 	and.w	r3, r3, #15
 8000698:	73fb      	strb	r3, [r7, #15]
 800069a:	79fb      	ldrb	r3, [r7, #7]
 800069c:	091b      	lsrs	r3, r3, #4
 800069e:	73bb      	strb	r3, [r7, #14]
  if(is8BitsMode)
 80006a0:	4b5f      	ldr	r3, [pc, #380]	; (8000820 <lcd16x2_write+0x198>)
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d05a      	beq.n	800075e <lcd16x2_write+0xd6>
  {
    //LSB data
    HAL_GPIO_WritePin(PORT_LSB, D0_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 80006a8:	4b5e      	ldr	r3, [pc, #376]	; (8000824 <lcd16x2_write+0x19c>)
 80006aa:	6818      	ldr	r0, [r3, #0]
 80006ac:	4b5e      	ldr	r3, [pc, #376]	; (8000828 <lcd16x2_write+0x1a0>)
 80006ae:	8819      	ldrh	r1, [r3, #0]
 80006b0:	7bfb      	ldrb	r3, [r7, #15]
 80006b2:	f003 0301 	and.w	r3, r3, #1
 80006b6:	b2db      	uxtb	r3, r3
 80006b8:	461a      	mov	r2, r3
 80006ba:	f002 f815 	bl	80026e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_LSB, D1_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 80006be:	4b59      	ldr	r3, [pc, #356]	; (8000824 <lcd16x2_write+0x19c>)
 80006c0:	6818      	ldr	r0, [r3, #0]
 80006c2:	4b5a      	ldr	r3, [pc, #360]	; (800082c <lcd16x2_write+0x1a4>)
 80006c4:	8819      	ldrh	r1, [r3, #0]
 80006c6:	7bfb      	ldrb	r3, [r7, #15]
 80006c8:	f003 0302 	and.w	r3, r3, #2
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	461a      	mov	r2, r3
 80006d0:	f002 f80a 	bl	80026e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_LSB, D2_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 80006d4:	4b53      	ldr	r3, [pc, #332]	; (8000824 <lcd16x2_write+0x19c>)
 80006d6:	6818      	ldr	r0, [r3, #0]
 80006d8:	4b55      	ldr	r3, [pc, #340]	; (8000830 <lcd16x2_write+0x1a8>)
 80006da:	8819      	ldrh	r1, [r3, #0]
 80006dc:	7bfb      	ldrb	r3, [r7, #15]
 80006de:	f003 0304 	and.w	r3, r3, #4
 80006e2:	b2db      	uxtb	r3, r3
 80006e4:	461a      	mov	r2, r3
 80006e6:	f001 ffff 	bl	80026e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_LSB, D3_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 80006ea:	4b4e      	ldr	r3, [pc, #312]	; (8000824 <lcd16x2_write+0x19c>)
 80006ec:	6818      	ldr	r0, [r3, #0]
 80006ee:	4b51      	ldr	r3, [pc, #324]	; (8000834 <lcd16x2_write+0x1ac>)
 80006f0:	8819      	ldrh	r1, [r3, #0]
 80006f2:	7bfb      	ldrb	r3, [r7, #15]
 80006f4:	f003 0308 	and.w	r3, r3, #8
 80006f8:	b2db      	uxtb	r3, r3
 80006fa:	461a      	mov	r2, r3
 80006fc:	f001 fff4 	bl	80026e8 <HAL_GPIO_WritePin>
    //MSB data
    HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 8000700:	4b4d      	ldr	r3, [pc, #308]	; (8000838 <lcd16x2_write+0x1b0>)
 8000702:	6818      	ldr	r0, [r3, #0]
 8000704:	4b4d      	ldr	r3, [pc, #308]	; (800083c <lcd16x2_write+0x1b4>)
 8000706:	8819      	ldrh	r1, [r3, #0]
 8000708:	7bbb      	ldrb	r3, [r7, #14]
 800070a:	f003 0301 	and.w	r3, r3, #1
 800070e:	b2db      	uxtb	r3, r3
 8000710:	461a      	mov	r2, r3
 8000712:	f001 ffe9 	bl	80026e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 8000716:	4b48      	ldr	r3, [pc, #288]	; (8000838 <lcd16x2_write+0x1b0>)
 8000718:	6818      	ldr	r0, [r3, #0]
 800071a:	4b49      	ldr	r3, [pc, #292]	; (8000840 <lcd16x2_write+0x1b8>)
 800071c:	8819      	ldrh	r1, [r3, #0]
 800071e:	7bbb      	ldrb	r3, [r7, #14]
 8000720:	f003 0302 	and.w	r3, r3, #2
 8000724:	b2db      	uxtb	r3, r3
 8000726:	461a      	mov	r2, r3
 8000728:	f001 ffde 	bl	80026e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 800072c:	4b42      	ldr	r3, [pc, #264]	; (8000838 <lcd16x2_write+0x1b0>)
 800072e:	6818      	ldr	r0, [r3, #0]
 8000730:	4b44      	ldr	r3, [pc, #272]	; (8000844 <lcd16x2_write+0x1bc>)
 8000732:	8819      	ldrh	r1, [r3, #0]
 8000734:	7bbb      	ldrb	r3, [r7, #14]
 8000736:	f003 0304 	and.w	r3, r3, #4
 800073a:	b2db      	uxtb	r3, r3
 800073c:	461a      	mov	r2, r3
 800073e:	f001 ffd3 	bl	80026e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 8000742:	4b3d      	ldr	r3, [pc, #244]	; (8000838 <lcd16x2_write+0x1b0>)
 8000744:	6818      	ldr	r0, [r3, #0]
 8000746:	4b40      	ldr	r3, [pc, #256]	; (8000848 <lcd16x2_write+0x1c0>)
 8000748:	8819      	ldrh	r1, [r3, #0]
 800074a:	7bbb      	ldrb	r3, [r7, #14]
 800074c:	f003 0308 	and.w	r3, r3, #8
 8000750:	b2db      	uxtb	r3, r3
 8000752:	461a      	mov	r2, r3
 8000754:	f001 ffc8 	bl	80026e8 <HAL_GPIO_WritePin>
    lcd16x2_enablePulse();
 8000758:	f7ff ff62 	bl	8000620 <lcd16x2_enablePulse>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(LSB_nibble&0x2));
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
    lcd16x2_enablePulse();
  }
}
 800075c:	e05b      	b.n	8000816 <lcd16x2_write+0x18e>
    HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 800075e:	4b36      	ldr	r3, [pc, #216]	; (8000838 <lcd16x2_write+0x1b0>)
 8000760:	6818      	ldr	r0, [r3, #0]
 8000762:	4b36      	ldr	r3, [pc, #216]	; (800083c <lcd16x2_write+0x1b4>)
 8000764:	8819      	ldrh	r1, [r3, #0]
 8000766:	7bbb      	ldrb	r3, [r7, #14]
 8000768:	f003 0301 	and.w	r3, r3, #1
 800076c:	b2db      	uxtb	r3, r3
 800076e:	461a      	mov	r2, r3
 8000770:	f001 ffba 	bl	80026e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 8000774:	4b30      	ldr	r3, [pc, #192]	; (8000838 <lcd16x2_write+0x1b0>)
 8000776:	6818      	ldr	r0, [r3, #0]
 8000778:	4b31      	ldr	r3, [pc, #196]	; (8000840 <lcd16x2_write+0x1b8>)
 800077a:	8819      	ldrh	r1, [r3, #0]
 800077c:	7bbb      	ldrb	r3, [r7, #14]
 800077e:	f003 0302 	and.w	r3, r3, #2
 8000782:	b2db      	uxtb	r3, r3
 8000784:	461a      	mov	r2, r3
 8000786:	f001 ffaf 	bl	80026e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 800078a:	4b2b      	ldr	r3, [pc, #172]	; (8000838 <lcd16x2_write+0x1b0>)
 800078c:	6818      	ldr	r0, [r3, #0]
 800078e:	4b2d      	ldr	r3, [pc, #180]	; (8000844 <lcd16x2_write+0x1bc>)
 8000790:	8819      	ldrh	r1, [r3, #0]
 8000792:	7bbb      	ldrb	r3, [r7, #14]
 8000794:	f003 0304 	and.w	r3, r3, #4
 8000798:	b2db      	uxtb	r3, r3
 800079a:	461a      	mov	r2, r3
 800079c:	f001 ffa4 	bl	80026e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 80007a0:	4b25      	ldr	r3, [pc, #148]	; (8000838 <lcd16x2_write+0x1b0>)
 80007a2:	6818      	ldr	r0, [r3, #0]
 80007a4:	4b28      	ldr	r3, [pc, #160]	; (8000848 <lcd16x2_write+0x1c0>)
 80007a6:	8819      	ldrh	r1, [r3, #0]
 80007a8:	7bbb      	ldrb	r3, [r7, #14]
 80007aa:	f003 0308 	and.w	r3, r3, #8
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	461a      	mov	r2, r3
 80007b2:	f001 ff99 	bl	80026e8 <HAL_GPIO_WritePin>
    lcd16x2_enablePulse();
 80007b6:	f7ff ff33 	bl	8000620 <lcd16x2_enablePulse>
    HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 80007ba:	4b1f      	ldr	r3, [pc, #124]	; (8000838 <lcd16x2_write+0x1b0>)
 80007bc:	6818      	ldr	r0, [r3, #0]
 80007be:	4b1f      	ldr	r3, [pc, #124]	; (800083c <lcd16x2_write+0x1b4>)
 80007c0:	8819      	ldrh	r1, [r3, #0]
 80007c2:	7bfb      	ldrb	r3, [r7, #15]
 80007c4:	f003 0301 	and.w	r3, r3, #1
 80007c8:	b2db      	uxtb	r3, r3
 80007ca:	461a      	mov	r2, r3
 80007cc:	f001 ff8c 	bl	80026e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 80007d0:	4b19      	ldr	r3, [pc, #100]	; (8000838 <lcd16x2_write+0x1b0>)
 80007d2:	6818      	ldr	r0, [r3, #0]
 80007d4:	4b1a      	ldr	r3, [pc, #104]	; (8000840 <lcd16x2_write+0x1b8>)
 80007d6:	8819      	ldrh	r1, [r3, #0]
 80007d8:	7bfb      	ldrb	r3, [r7, #15]
 80007da:	f003 0302 	and.w	r3, r3, #2
 80007de:	b2db      	uxtb	r3, r3
 80007e0:	461a      	mov	r2, r3
 80007e2:	f001 ff81 	bl	80026e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 80007e6:	4b14      	ldr	r3, [pc, #80]	; (8000838 <lcd16x2_write+0x1b0>)
 80007e8:	6818      	ldr	r0, [r3, #0]
 80007ea:	4b16      	ldr	r3, [pc, #88]	; (8000844 <lcd16x2_write+0x1bc>)
 80007ec:	8819      	ldrh	r1, [r3, #0]
 80007ee:	7bfb      	ldrb	r3, [r7, #15]
 80007f0:	f003 0304 	and.w	r3, r3, #4
 80007f4:	b2db      	uxtb	r3, r3
 80007f6:	461a      	mov	r2, r3
 80007f8:	f001 ff76 	bl	80026e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 80007fc:	4b0e      	ldr	r3, [pc, #56]	; (8000838 <lcd16x2_write+0x1b0>)
 80007fe:	6818      	ldr	r0, [r3, #0]
 8000800:	4b11      	ldr	r3, [pc, #68]	; (8000848 <lcd16x2_write+0x1c0>)
 8000802:	8819      	ldrh	r1, [r3, #0]
 8000804:	7bfb      	ldrb	r3, [r7, #15]
 8000806:	f003 0308 	and.w	r3, r3, #8
 800080a:	b2db      	uxtb	r3, r3
 800080c:	461a      	mov	r2, r3
 800080e:	f001 ff6b 	bl	80026e8 <HAL_GPIO_WritePin>
    lcd16x2_enablePulse();
 8000812:	f7ff ff05 	bl	8000620 <lcd16x2_enablePulse>
}
 8000816:	bf00      	nop
 8000818:	3710      	adds	r7, #16
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	20000000 	.word	0x20000000
 8000824:	200000cc 	.word	0x200000cc
 8000828:	200000d0 	.word	0x200000d0
 800082c:	200000d2 	.word	0x200000d2
 8000830:	200000d4 	.word	0x200000d4
 8000834:	200000d6 	.word	0x200000d6
 8000838:	200000d8 	.word	0x200000d8
 800083c:	200000dc 	.word	0x200000dc
 8000840:	200000de 	.word	0x200000de
 8000844:	200000e0 	.word	0x200000e0
 8000848:	200000e2 	.word	0x200000e2

0800084c <lcd16x2_writeCommand>:

/**
 * @brief Write command
 */
static void lcd16x2_writeCommand(uint8_t cmd)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	4603      	mov	r3, r0
 8000854:	71fb      	strb	r3, [r7, #7]
  lcd16x2_rs(false);
 8000856:	2000      	movs	r0, #0
 8000858:	f7ff ff00 	bl	800065c <lcd16x2_rs>
  lcd16x2_write(cmd);
 800085c:	79fb      	ldrb	r3, [r7, #7]
 800085e:	4618      	mov	r0, r3
 8000860:	f7ff ff12 	bl	8000688 <lcd16x2_write>
}
 8000864:	bf00      	nop
 8000866:	3708      	adds	r7, #8
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}

0800086c <lcd16x2_writeData>:

/**
 * @brief Write data
 */
static void lcd16x2_writeData(uint8_t data)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	4603      	mov	r3, r0
 8000874:	71fb      	strb	r3, [r7, #7]
  lcd16x2_rs(true);
 8000876:	2001      	movs	r0, #1
 8000878:	f7ff fef0 	bl	800065c <lcd16x2_rs>
  lcd16x2_write(data);
 800087c:	79fb      	ldrb	r3, [r7, #7]
 800087e:	4618      	mov	r0, r3
 8000880:	f7ff ff02 	bl	8000688 <lcd16x2_write>
}
 8000884:	bf00      	nop
 8000886:	3708      	adds	r7, #8
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}

0800088c <lcd16x2_init_8bits>:
 */
void lcd16x2_init_8bits(
    GPIO_TypeDef* port_rs_e, uint16_t rs_pin, uint16_t e_pin,
    GPIO_TypeDef* port_0_3, uint16_t d0_pin, uint16_t d1_pin, uint16_t d2_pin, uint16_t d3_pin,
    GPIO_TypeDef* port_4_7, uint16_t d4_pin, uint16_t d5_pin, uint16_t d6_pin, uint16_t d7_pin)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b084      	sub	sp, #16
 8000890:	af00      	add	r7, sp, #0
 8000892:	60f8      	str	r0, [r7, #12]
 8000894:	607b      	str	r3, [r7, #4]
 8000896:	460b      	mov	r3, r1
 8000898:	817b      	strh	r3, [r7, #10]
 800089a:	4613      	mov	r3, r2
 800089c:	813b      	strh	r3, [r7, #8]
  DWT_Delay_Init();
 800089e:	f7ff fe6b 	bl	8000578 <DWT_Delay_Init>
  //Set GPIO Ports and Pins data
  PORT_RS_and_E = port_rs_e;
 80008a2:	4a29      	ldr	r2, [pc, #164]	; (8000948 <lcd16x2_init_8bits+0xbc>)
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	6013      	str	r3, [r2, #0]
  PIN_RS = rs_pin;
 80008a8:	4a28      	ldr	r2, [pc, #160]	; (800094c <lcd16x2_init_8bits+0xc0>)
 80008aa:	897b      	ldrh	r3, [r7, #10]
 80008ac:	8013      	strh	r3, [r2, #0]
  PIN_E = e_pin;
 80008ae:	4a28      	ldr	r2, [pc, #160]	; (8000950 <lcd16x2_init_8bits+0xc4>)
 80008b0:	893b      	ldrh	r3, [r7, #8]
 80008b2:	8013      	strh	r3, [r2, #0]
  PORT_LSB = port_0_3;
 80008b4:	4a27      	ldr	r2, [pc, #156]	; (8000954 <lcd16x2_init_8bits+0xc8>)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	6013      	str	r3, [r2, #0]
  D0_PIN = d0_pin;
 80008ba:	4a27      	ldr	r2, [pc, #156]	; (8000958 <lcd16x2_init_8bits+0xcc>)
 80008bc:	8b3b      	ldrh	r3, [r7, #24]
 80008be:	8013      	strh	r3, [r2, #0]
  D1_PIN = d1_pin;
 80008c0:	4a26      	ldr	r2, [pc, #152]	; (800095c <lcd16x2_init_8bits+0xd0>)
 80008c2:	8bbb      	ldrh	r3, [r7, #28]
 80008c4:	8013      	strh	r3, [r2, #0]
  D2_PIN = d2_pin;
 80008c6:	4a26      	ldr	r2, [pc, #152]	; (8000960 <lcd16x2_init_8bits+0xd4>)
 80008c8:	8c3b      	ldrh	r3, [r7, #32]
 80008ca:	8013      	strh	r3, [r2, #0]
  D3_PIN = d3_pin;
 80008cc:	4a25      	ldr	r2, [pc, #148]	; (8000964 <lcd16x2_init_8bits+0xd8>)
 80008ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80008d0:	8013      	strh	r3, [r2, #0]
  PORT_MSB = port_4_7;
 80008d2:	4a25      	ldr	r2, [pc, #148]	; (8000968 <lcd16x2_init_8bits+0xdc>)
 80008d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008d6:	6013      	str	r3, [r2, #0]
  D4_PIN = d4_pin;
 80008d8:	4a24      	ldr	r2, [pc, #144]	; (800096c <lcd16x2_init_8bits+0xe0>)
 80008da:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80008dc:	8013      	strh	r3, [r2, #0]
  D5_PIN = d5_pin;
 80008de:	4a24      	ldr	r2, [pc, #144]	; (8000970 <lcd16x2_init_8bits+0xe4>)
 80008e0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80008e2:	8013      	strh	r3, [r2, #0]
  D6_PIN = d6_pin;
 80008e4:	4a23      	ldr	r2, [pc, #140]	; (8000974 <lcd16x2_init_8bits+0xe8>)
 80008e6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80008e8:	8013      	strh	r3, [r2, #0]
  D7_PIN = d7_pin;
 80008ea:	4a23      	ldr	r2, [pc, #140]	; (8000978 <lcd16x2_init_8bits+0xec>)
 80008ec:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80008ee:	8013      	strh	r3, [r2, #0]
  is8BitsMode = true;
 80008f0:	4b22      	ldr	r3, [pc, #136]	; (800097c <lcd16x2_init_8bits+0xf0>)
 80008f2:	2201      	movs	r2, #1
 80008f4:	701a      	strb	r2, [r3, #0]
  FunctionSet = 0x38;
 80008f6:	4b22      	ldr	r3, [pc, #136]	; (8000980 <lcd16x2_init_8bits+0xf4>)
 80008f8:	2238      	movs	r2, #56	; 0x38
 80008fa:	701a      	strb	r2, [r3, #0]

  //Initialise LCD
  //1. Wait at least 15ms
  LCD_MS_DELAY(20);
 80008fc:	2014      	movs	r0, #20
 80008fe:	f001 f809 	bl	8001914 <HAL_Delay>
  //2. Attentions sequence
  lcd16x2_writeCommand(0x30);
 8000902:	2030      	movs	r0, #48	; 0x30
 8000904:	f7ff ffa2 	bl	800084c <lcd16x2_writeCommand>
  LCD_MS_DELAY(5);
 8000908:	2005      	movs	r0, #5
 800090a:	f001 f803 	bl	8001914 <HAL_Delay>
  lcd16x2_writeCommand(0x30);
 800090e:	2030      	movs	r0, #48	; 0x30
 8000910:	f7ff ff9c 	bl	800084c <lcd16x2_writeCommand>
  LCD_MS_DELAY(1);
 8000914:	2001      	movs	r0, #1
 8000916:	f000 fffd 	bl	8001914 <HAL_Delay>
  lcd16x2_writeCommand(0x30);
 800091a:	2030      	movs	r0, #48	; 0x30
 800091c:	f7ff ff96 	bl	800084c <lcd16x2_writeCommand>
  LCD_MS_DELAY(1);
 8000920:	2001      	movs	r0, #1
 8000922:	f000 fff7 	bl	8001914 <HAL_Delay>
  //3. Function set; Enable 2 lines, Data length to 8 bits
  lcd16x2_writeCommand(LCD_FUNCTIONSET | LCD_FUNCTION_N | LCD_FUNCTION_DL);
 8000926:	2038      	movs	r0, #56	; 0x38
 8000928:	f7ff ff90 	bl	800084c <lcd16x2_writeCommand>
  //4. Display control (Display ON, Cursor ON, blink cursor)
  lcd16x2_writeCommand(LCD_DISPLAYCONTROL | LCD_DISPLAY_B | LCD_DISPLAY_C | LCD_DISPLAY_D);
 800092c:	200f      	movs	r0, #15
 800092e:	f7ff ff8d 	bl	800084c <lcd16x2_writeCommand>
  //5. Clear LCD and return home
  lcd16x2_writeCommand(LCD_CLEARDISPLAY);
 8000932:	2001      	movs	r0, #1
 8000934:	f7ff ff8a 	bl	800084c <lcd16x2_writeCommand>
  LCD_MS_DELAY(2);
 8000938:	2002      	movs	r0, #2
 800093a:	f000 ffeb 	bl	8001914 <HAL_Delay>
}
 800093e:	bf00      	nop
 8000940:	3710      	adds	r7, #16
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	200000c4 	.word	0x200000c4
 800094c:	200000c8 	.word	0x200000c8
 8000950:	200000ca 	.word	0x200000ca
 8000954:	200000cc 	.word	0x200000cc
 8000958:	200000d0 	.word	0x200000d0
 800095c:	200000d2 	.word	0x200000d2
 8000960:	200000d4 	.word	0x200000d4
 8000964:	200000d6 	.word	0x200000d6
 8000968:	200000d8 	.word	0x200000d8
 800096c:	200000dc 	.word	0x200000dc
 8000970:	200000de 	.word	0x200000de
 8000974:	200000e0 	.word	0x200000e0
 8000978:	200000e2 	.word	0x200000e2
 800097c:	20000000 	.word	0x20000000
 8000980:	20000001 	.word	0x20000001

08000984 <lcd16x2_clear>:

/**
 * @brief Display clear
 */
void lcd16x2_clear(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  lcd16x2_writeCommand(LCD_CLEARDISPLAY);
 8000988:	2001      	movs	r0, #1
 800098a:	f7ff ff5f 	bl	800084c <lcd16x2_writeCommand>
  LCD_MS_DELAY(3);
 800098e:	2003      	movs	r0, #3
 8000990:	f000 ffc0 	bl	8001914 <HAL_Delay>
}
 8000994:	bf00      	nop
 8000996:	bd80      	pop	{r7, pc}

08000998 <lcd16x2_printf>:

/**
 * @brief Print to display any datatype (e.g. lcd16x2_printf("Value1 = %.1f", 123.45))
 */
void lcd16x2_printf(const char* str, ...)
{
 8000998:	b40f      	push	{r0, r1, r2, r3}
 800099a:	b590      	push	{r4, r7, lr}
 800099c:	b089      	sub	sp, #36	; 0x24
 800099e:	af00      	add	r7, sp, #0
  char stringArray[20];
  va_list args;
  va_start(args, str);
 80009a0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80009a4:	607b      	str	r3, [r7, #4]
  vsprintf(stringArray, str, args);
 80009a6:	f107 0308 	add.w	r3, r7, #8
 80009aa:	687a      	ldr	r2, [r7, #4]
 80009ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80009ae:	4618      	mov	r0, r3
 80009b0:	f008 fe20 	bl	80095f4 <vsiprintf>
  va_end(args);
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 80009b4:	2300      	movs	r3, #0
 80009b6:	77fb      	strb	r3, [r7, #31]
 80009b8:	e00b      	b.n	80009d2 <lcd16x2_printf+0x3a>
  {
    lcd16x2_writeData((uint8_t)stringArray[i]);
 80009ba:	7ffb      	ldrb	r3, [r7, #31]
 80009bc:	f107 0220 	add.w	r2, r7, #32
 80009c0:	4413      	add	r3, r2
 80009c2:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80009c6:	4618      	mov	r0, r3
 80009c8:	f7ff ff50 	bl	800086c <lcd16x2_writeData>
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 80009cc:	7ffb      	ldrb	r3, [r7, #31]
 80009ce:	3301      	adds	r3, #1
 80009d0:	77fb      	strb	r3, [r7, #31]
 80009d2:	7ffc      	ldrb	r4, [r7, #31]
 80009d4:	f107 0308 	add.w	r3, r7, #8
 80009d8:	4618      	mov	r0, r3
 80009da:	f7ff fbf9 	bl	80001d0 <strlen>
 80009de:	4603      	mov	r3, r0
 80009e0:	429c      	cmp	r4, r3
 80009e2:	d202      	bcs.n	80009ea <lcd16x2_printf+0x52>
 80009e4:	7ffb      	ldrb	r3, [r7, #31]
 80009e6:	2b0f      	cmp	r3, #15
 80009e8:	d9e7      	bls.n	80009ba <lcd16x2_printf+0x22>
  }
}
 80009ea:	bf00      	nop
 80009ec:	3724      	adds	r7, #36	; 0x24
 80009ee:	46bd      	mov	sp, r7
 80009f0:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80009f4:	b004      	add	sp, #16
 80009f6:	4770      	bx	lr

080009f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b08c      	sub	sp, #48	; 0x30
 80009fc:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009fe:	f000 ff17 	bl	8001830 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a02:	f000 f973 	bl	8000cec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a06:	f000 fb3d 	bl	8001084 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000a0a:	f000 f9d9 	bl	8000dc0 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000a0e:	f000 fa29 	bl	8000e64 <MX_ADC2_Init>
  MX_I2C1_Init();
 8000a12:	f000 fa79 	bl	8000f08 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000a16:	f000 faa5 	bl	8000f64 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000a1a:	f000 fad3 	bl	8000fc4 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8000a1e:	f000 fb07 	bl	8001030 <MX_USART3_UART_Init>
  MX_USB_HOST_Init();
 8000a22:	f008 f9cd 	bl	8008dc0 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */
  //Initialize the LCD to be able to display
  lcd16x2_init_8bits(GPIOB, GPIO_PIN_0, GPIO_PIN_1, GPIOE, GPIO_PIN_8, GPIO_PIN_9, GPIO_PIN_10, GPIO_PIN_11, GPIOE, GPIO_PIN_12, GPIO_PIN_13
 8000a26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a2a:	9308      	str	r3, [sp, #32]
 8000a2c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a30:	9307      	str	r3, [sp, #28]
 8000a32:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a36:	9306      	str	r3, [sp, #24]
 8000a38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a3c:	9305      	str	r3, [sp, #20]
 8000a3e:	4b96      	ldr	r3, [pc, #600]	; (8000c98 <main+0x2a0>)
 8000a40:	9304      	str	r3, [sp, #16]
 8000a42:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a46:	9303      	str	r3, [sp, #12]
 8000a48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a4c:	9302      	str	r3, [sp, #8]
 8000a4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a52:	9301      	str	r3, [sp, #4]
 8000a54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a58:	9300      	str	r3, [sp, #0]
 8000a5a:	4b8f      	ldr	r3, [pc, #572]	; (8000c98 <main+0x2a0>)
 8000a5c:	2202      	movs	r2, #2
 8000a5e:	2101      	movs	r1, #1
 8000a60:	488e      	ldr	r0, [pc, #568]	; (8000c9c <main+0x2a4>)
 8000a62:	f7ff ff13 	bl	800088c <lcd16x2_init_8bits>
		  , GPIO_PIN_14, GPIO_PIN_15);
  lcd16x2_clear();
 8000a66:	f7ff ff8d 	bl	8000984 <lcd16x2_clear>
  lcd16x2_clear();
 8000a6a:	f7ff ff8b 	bl	8000984 <lcd16x2_clear>
  lcd16x2_printf("Home Health");
 8000a6e:	488c      	ldr	r0, [pc, #560]	; (8000ca0 <main+0x2a8>)
 8000a70:	f7ff ff92 	bl	8000998 <lcd16x2_printf>
  HAL_Delay(1000);
 8000a74:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a78:	f000 ff4c 	bl	8001914 <HAL_Delay>
  int i;

  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000a7c:	f008 f9c6 	bl	8008e0c <MX_USB_HOST_Process>
    /* USER CODE BEGIN 3 */
    lcd16x2_clear();
 8000a80:	f7ff ff80 	bl	8000984 <lcd16x2_clear>
    lcd16x2_printf("Home Health"); //Start up and idle message
 8000a84:	4886      	ldr	r0, [pc, #536]	; (8000ca0 <main+0x2a8>)
 8000a86:	f7ff ff87 	bl	8000998 <lcd16x2_printf>
    HAL_UART_Transmit(&huart3, idle, sizeof(idle), HAL_MAX_DELAY);
 8000a8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a8e:	2201      	movs	r2, #1
 8000a90:	4984      	ldr	r1, [pc, #528]	; (8000ca4 <main+0x2ac>)
 8000a92:	4885      	ldr	r0, [pc, #532]	; (8000ca8 <main+0x2b0>)
 8000a94:	f005 f820 	bl	8005ad8 <HAL_UART_Transmit>
    buttonState1 = HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_11); //=> Button is Pressed
 8000a98:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a9c:	4883      	ldr	r0, [pc, #524]	; (8000cac <main+0x2b4>)
 8000a9e:	f001 fe0b 	bl	80026b8 <HAL_GPIO_ReadPin>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	461a      	mov	r2, r3
 8000aa6:	4b82      	ldr	r3, [pc, #520]	; (8000cb0 <main+0x2b8>)
 8000aa8:	701a      	strb	r2, [r3, #0]
    buttonState2 = HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_10); //=> Button is Pressed
 8000aaa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000aae:	487f      	ldr	r0, [pc, #508]	; (8000cac <main+0x2b4>)
 8000ab0:	f001 fe02 	bl	80026b8 <HAL_GPIO_ReadPin>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	461a      	mov	r2, r3
 8000ab8:	4b7e      	ldr	r3, [pc, #504]	; (8000cb4 <main+0x2bc>)
 8000aba:	701a      	strb	r2, [r3, #0]
    HAL_Delay(500);
 8000abc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ac0:	f000 ff28 	bl	8001914 <HAL_Delay>


    if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_11) == GPIO_PIN_SET) {
 8000ac4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ac8:	4878      	ldr	r0, [pc, #480]	; (8000cac <main+0x2b4>)
 8000aca:	f001 fdf5 	bl	80026b8 <HAL_GPIO_ReadPin>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b01      	cmp	r3, #1
 8000ad2:	d16b      	bne.n	8000bac <main+0x1b4>
    	lcd16x2_clear();
 8000ad4:	f7ff ff56 	bl	8000984 <lcd16x2_clear>
    	HAL_Delay(100);
 8000ad8:	2064      	movs	r0, #100	; 0x64
 8000ada:	f000 ff1b 	bl	8001914 <HAL_Delay>
    	lcd16x2_printf("EMG");
 8000ade:	4876      	ldr	r0, [pc, #472]	; (8000cb8 <main+0x2c0>)
 8000ae0:	f7ff ff5a 	bl	8000998 <lcd16x2_printf>
    	HAL_UART_Transmit(&huart3, start_test_EMG, sizeof(start_test_EMG), HAL_MAX_DELAY);
 8000ae4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ae8:	2201      	movs	r2, #1
 8000aea:	4974      	ldr	r1, [pc, #464]	; (8000cbc <main+0x2c4>)
 8000aec:	486e      	ldr	r0, [pc, #440]	; (8000ca8 <main+0x2b0>)
 8000aee:	f004 fff3 	bl	8005ad8 <HAL_UART_Transmit>
    	HAL_Delay(30);
 8000af2:	201e      	movs	r0, #30
 8000af4:	f000 ff0e 	bl	8001914 <HAL_Delay>
		for(i = 0; i < 185; i++) {
 8000af8:	2300      	movs	r3, #0
 8000afa:	607b      	str	r3, [r7, #4]
 8000afc:	e046      	b.n	8000b8c <main+0x194>
			HAL_UART_Transmit(&huart3, start_EMG, sizeof(start_EMG), HAL_MAX_DELAY);
 8000afe:	f04f 33ff 	mov.w	r3, #4294967295
 8000b02:	2201      	movs	r2, #1
 8000b04:	496e      	ldr	r1, [pc, #440]	; (8000cc0 <main+0x2c8>)
 8000b06:	4868      	ldr	r0, [pc, #416]	; (8000ca8 <main+0x2b0>)
 8000b08:	f004 ffe6 	bl	8005ad8 <HAL_UART_Transmit>
			HAL_Delay(30);
 8000b0c:	201e      	movs	r0, #30
 8000b0e:	f000 ff01 	bl	8001914 <HAL_Delay>
			HAL_ADC_Start(&hadc1);
 8000b12:	486c      	ldr	r0, [pc, #432]	; (8000cc4 <main+0x2cc>)
 8000b14:	f000 ff66 	bl	80019e4 <HAL_ADC_Start>
			if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)  { //check if adc2 has new data
 8000b18:	2164      	movs	r1, #100	; 0x64
 8000b1a:	486a      	ldr	r0, [pc, #424]	; (8000cc4 <main+0x2cc>)
 8000b1c:	f001 f867 	bl	8001bee <HAL_ADC_PollForConversion>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d12c      	bne.n	8000b80 <main+0x188>
				EMG = HAL_ADC_GetValue(&hadc1); //Check converted data for heart rate
 8000b26:	4867      	ldr	r0, [pc, #412]	; (8000cc4 <main+0x2cc>)
 8000b28:	f001 f8ec 	bl	8001d04 <HAL_ADC_GetValue>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	b29a      	uxth	r2, r3
 8000b30:	4b65      	ldr	r3, [pc, #404]	; (8000cc8 <main+0x2d0>)
 8000b32:	801a      	strh	r2, [r3, #0]
				while(EMG)
 8000b34:	e020      	b.n	8000b78 <main+0x180>
				{
					databuffer[0] = EMG % 100;
 8000b36:	4b64      	ldr	r3, [pc, #400]	; (8000cc8 <main+0x2d0>)
 8000b38:	881b      	ldrh	r3, [r3, #0]
 8000b3a:	4a64      	ldr	r2, [pc, #400]	; (8000ccc <main+0x2d4>)
 8000b3c:	fba2 1203 	umull	r1, r2, r2, r3
 8000b40:	0952      	lsrs	r2, r2, #5
 8000b42:	2164      	movs	r1, #100	; 0x64
 8000b44:	fb01 f202 	mul.w	r2, r1, r2
 8000b48:	1a9b      	subs	r3, r3, r2
 8000b4a:	b29b      	uxth	r3, r3
 8000b4c:	b2da      	uxtb	r2, r3
 8000b4e:	4b60      	ldr	r3, [pc, #384]	; (8000cd0 <main+0x2d8>)
 8000b50:	701a      	strb	r2, [r3, #0]
					EMG /= 100;
 8000b52:	4b5d      	ldr	r3, [pc, #372]	; (8000cc8 <main+0x2d0>)
 8000b54:	881b      	ldrh	r3, [r3, #0]
 8000b56:	4a5d      	ldr	r2, [pc, #372]	; (8000ccc <main+0x2d4>)
 8000b58:	fba2 2303 	umull	r2, r3, r2, r3
 8000b5c:	095b      	lsrs	r3, r3, #5
 8000b5e:	b29a      	uxth	r2, r3
 8000b60:	4b59      	ldr	r3, [pc, #356]	; (8000cc8 <main+0x2d0>)
 8000b62:	801a      	strh	r2, [r3, #0]
					HAL_UART_Transmit(&huart3, databuffer, sizeof(databuffer), HAL_MAX_DELAY);
 8000b64:	f04f 33ff 	mov.w	r3, #4294967295
 8000b68:	2208      	movs	r2, #8
 8000b6a:	4959      	ldr	r1, [pc, #356]	; (8000cd0 <main+0x2d8>)
 8000b6c:	484e      	ldr	r0, [pc, #312]	; (8000ca8 <main+0x2b0>)
 8000b6e:	f004 ffb3 	bl	8005ad8 <HAL_UART_Transmit>
					HAL_Delay(30);
 8000b72:	201e      	movs	r0, #30
 8000b74:	f000 fece 	bl	8001914 <HAL_Delay>
				while(EMG)
 8000b78:	4b53      	ldr	r3, [pc, #332]	; (8000cc8 <main+0x2d0>)
 8000b7a:	881b      	ldrh	r3, [r3, #0]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d1da      	bne.n	8000b36 <main+0x13e>
				}
			}
			HAL_ADC_Stop(&hadc1); //clear adc
 8000b80:	4850      	ldr	r0, [pc, #320]	; (8000cc4 <main+0x2cc>)
 8000b82:	f001 f801 	bl	8001b88 <HAL_ADC_Stop>
		for(i = 0; i < 185; i++) {
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	3301      	adds	r3, #1
 8000b8a:	607b      	str	r3, [r7, #4]
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	2bb8      	cmp	r3, #184	; 0xb8
 8000b90:	ddb5      	ble.n	8000afe <main+0x106>
		}
		lcd16x2_clear();
 8000b92:	f7ff fef7 	bl	8000984 <lcd16x2_clear>
		HAL_Delay(100);
 8000b96:	2064      	movs	r0, #100	; 0x64
 8000b98:	f000 febc 	bl	8001914 <HAL_Delay>
		lcd16x2_printf("Test Complete");
 8000b9c:	484d      	ldr	r0, [pc, #308]	; (8000cd4 <main+0x2dc>)
 8000b9e:	f7ff fefb 	bl	8000998 <lcd16x2_printf>
		HAL_Delay(1000);
 8000ba2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ba6:	f000 feb5 	bl	8001914 <HAL_Delay>
 8000baa:	e767      	b.n	8000a7c <main+0x84>
    } else if (HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_10) == GPIO_PIN_SET) {
 8000bac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bb0:	483e      	ldr	r0, [pc, #248]	; (8000cac <main+0x2b4>)
 8000bb2:	f001 fd81 	bl	80026b8 <HAL_GPIO_ReadPin>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b01      	cmp	r3, #1
 8000bba:	f47f af5f 	bne.w	8000a7c <main+0x84>
    	lcd16x2_clear();
 8000bbe:	f7ff fee1 	bl	8000984 <lcd16x2_clear>
    	HAL_Delay(100);
 8000bc2:	2064      	movs	r0, #100	; 0x64
 8000bc4:	f000 fea6 	bl	8001914 <HAL_Delay>
    	lcd16x2_printf("Heart Rate");
 8000bc8:	4843      	ldr	r0, [pc, #268]	; (8000cd8 <main+0x2e0>)
 8000bca:	f7ff fee5 	bl	8000998 <lcd16x2_printf>
    	HAL_UART_Transmit(&huart3, start_test_heartrate, sizeof(start_test_heartrate), HAL_MAX_DELAY);
 8000bce:	f04f 33ff 	mov.w	r3, #4294967295
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	4941      	ldr	r1, [pc, #260]	; (8000cdc <main+0x2e4>)
 8000bd6:	4834      	ldr	r0, [pc, #208]	; (8000ca8 <main+0x2b0>)
 8000bd8:	f004 ff7e 	bl	8005ad8 <HAL_UART_Transmit>
    	HAL_Delay(30);
 8000bdc:	201e      	movs	r0, #30
 8000bde:	f000 fe99 	bl	8001914 <HAL_Delay>
		for(i = 0; i < 200; i++) {
 8000be2:	2300      	movs	r3, #0
 8000be4:	607b      	str	r3, [r7, #4]
 8000be6:	e046      	b.n	8000c76 <main+0x27e>
			HAL_UART_Transmit(&huart3, start_heartrate, sizeof(start_heartrate), HAL_MAX_DELAY);
 8000be8:	f04f 33ff 	mov.w	r3, #4294967295
 8000bec:	2201      	movs	r2, #1
 8000bee:	493c      	ldr	r1, [pc, #240]	; (8000ce0 <main+0x2e8>)
 8000bf0:	482d      	ldr	r0, [pc, #180]	; (8000ca8 <main+0x2b0>)
 8000bf2:	f004 ff71 	bl	8005ad8 <HAL_UART_Transmit>
			HAL_Delay(30);
 8000bf6:	201e      	movs	r0, #30
 8000bf8:	f000 fe8c 	bl	8001914 <HAL_Delay>
			HAL_ADC_Start(&hadc2);
 8000bfc:	4839      	ldr	r0, [pc, #228]	; (8000ce4 <main+0x2ec>)
 8000bfe:	f000 fef1 	bl	80019e4 <HAL_ADC_Start>
			if(HAL_ADC_PollForConversion(&hadc2, 100) == HAL_OK)  { //check if adc2 has new data
 8000c02:	2164      	movs	r1, #100	; 0x64
 8000c04:	4837      	ldr	r0, [pc, #220]	; (8000ce4 <main+0x2ec>)
 8000c06:	f000 fff2 	bl	8001bee <HAL_ADC_PollForConversion>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d12c      	bne.n	8000c6a <main+0x272>
				heartRate = HAL_ADC_GetValue(&hadc2); //Check converted data for heart rate
 8000c10:	4834      	ldr	r0, [pc, #208]	; (8000ce4 <main+0x2ec>)
 8000c12:	f001 f877 	bl	8001d04 <HAL_ADC_GetValue>
 8000c16:	4603      	mov	r3, r0
 8000c18:	b29a      	uxth	r2, r3
 8000c1a:	4b33      	ldr	r3, [pc, #204]	; (8000ce8 <main+0x2f0>)
 8000c1c:	801a      	strh	r2, [r3, #0]
				while(heartRate)
 8000c1e:	e020      	b.n	8000c62 <main+0x26a>
				{
					databuffer[0] = heartRate % 100;
 8000c20:	4b31      	ldr	r3, [pc, #196]	; (8000ce8 <main+0x2f0>)
 8000c22:	881b      	ldrh	r3, [r3, #0]
 8000c24:	4a29      	ldr	r2, [pc, #164]	; (8000ccc <main+0x2d4>)
 8000c26:	fba2 1203 	umull	r1, r2, r2, r3
 8000c2a:	0952      	lsrs	r2, r2, #5
 8000c2c:	2164      	movs	r1, #100	; 0x64
 8000c2e:	fb01 f202 	mul.w	r2, r1, r2
 8000c32:	1a9b      	subs	r3, r3, r2
 8000c34:	b29b      	uxth	r3, r3
 8000c36:	b2da      	uxtb	r2, r3
 8000c38:	4b25      	ldr	r3, [pc, #148]	; (8000cd0 <main+0x2d8>)
 8000c3a:	701a      	strb	r2, [r3, #0]
					heartRate /= 100;
 8000c3c:	4b2a      	ldr	r3, [pc, #168]	; (8000ce8 <main+0x2f0>)
 8000c3e:	881b      	ldrh	r3, [r3, #0]
 8000c40:	4a22      	ldr	r2, [pc, #136]	; (8000ccc <main+0x2d4>)
 8000c42:	fba2 2303 	umull	r2, r3, r2, r3
 8000c46:	095b      	lsrs	r3, r3, #5
 8000c48:	b29a      	uxth	r2, r3
 8000c4a:	4b27      	ldr	r3, [pc, #156]	; (8000ce8 <main+0x2f0>)
 8000c4c:	801a      	strh	r2, [r3, #0]
					HAL_UART_Transmit(&huart3, databuffer, sizeof(databuffer), HAL_MAX_DELAY);
 8000c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c52:	2208      	movs	r2, #8
 8000c54:	491e      	ldr	r1, [pc, #120]	; (8000cd0 <main+0x2d8>)
 8000c56:	4814      	ldr	r0, [pc, #80]	; (8000ca8 <main+0x2b0>)
 8000c58:	f004 ff3e 	bl	8005ad8 <HAL_UART_Transmit>
					HAL_Delay(30);
 8000c5c:	201e      	movs	r0, #30
 8000c5e:	f000 fe59 	bl	8001914 <HAL_Delay>
				while(heartRate)
 8000c62:	4b21      	ldr	r3, [pc, #132]	; (8000ce8 <main+0x2f0>)
 8000c64:	881b      	ldrh	r3, [r3, #0]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d1da      	bne.n	8000c20 <main+0x228>
				}
			}
			HAL_ADC_Stop(&hadc2); //clear adc
 8000c6a:	481e      	ldr	r0, [pc, #120]	; (8000ce4 <main+0x2ec>)
 8000c6c:	f000 ff8c 	bl	8001b88 <HAL_ADC_Stop>
		for(i = 0; i < 200; i++) {
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	3301      	adds	r3, #1
 8000c74:	607b      	str	r3, [r7, #4]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	2bc7      	cmp	r3, #199	; 0xc7
 8000c7a:	ddb5      	ble.n	8000be8 <main+0x1f0>
		}
		lcd16x2_clear();
 8000c7c:	f7ff fe82 	bl	8000984 <lcd16x2_clear>
		HAL_Delay(100);
 8000c80:	2064      	movs	r0, #100	; 0x64
 8000c82:	f000 fe47 	bl	8001914 <HAL_Delay>
		lcd16x2_printf("Test Complete");
 8000c86:	4813      	ldr	r0, [pc, #76]	; (8000cd4 <main+0x2dc>)
 8000c88:	f7ff fe86 	bl	8000998 <lcd16x2_printf>
		HAL_Delay(1000);
 8000c8c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c90:	f000 fe40 	bl	8001914 <HAL_Delay>
    MX_USB_HOST_Process();
 8000c94:	e6f2      	b.n	8000a7c <main+0x84>
 8000c96:	bf00      	nop
 8000c98:	40021000 	.word	0x40021000
 8000c9c:	40020400 	.word	0x40020400
 8000ca0:	08009cc8 	.word	0x08009cc8
 8000ca4:	2000000c 	.word	0x2000000c
 8000ca8:	200000f8 	.word	0x200000f8
 8000cac:	40020c00 	.word	0x40020c00
 8000cb0:	200000f4 	.word	0x200000f4
 8000cb4:	200001da 	.word	0x200001da
 8000cb8:	08009cd4 	.word	0x08009cd4
 8000cbc:	20000014 	.word	0x20000014
 8000cc0:	20000008 	.word	0x20000008
 8000cc4:	200001dc 	.word	0x200001dc
 8000cc8:	200001d8 	.word	0x200001d8
 8000ccc:	51eb851f 	.word	0x51eb851f
 8000cd0:	20000280 	.word	0x20000280
 8000cd4:	08009cd8 	.word	0x08009cd8
 8000cd8:	08009ce8 	.word	0x08009ce8
 8000cdc:	20000010 	.word	0x20000010
 8000ce0:	20000004 	.word	0x20000004
 8000ce4:	2000013c 	.word	0x2000013c
 8000ce8:	20000224 	.word	0x20000224

08000cec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b094      	sub	sp, #80	; 0x50
 8000cf0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cf2:	f107 0320 	add.w	r3, r7, #32
 8000cf6:	2230      	movs	r2, #48	; 0x30
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f008 fba2 	bl	8009444 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d00:	f107 030c 	add.w	r3, r7, #12
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	605a      	str	r2, [r3, #4]
 8000d0a:	609a      	str	r2, [r3, #8]
 8000d0c:	60da      	str	r2, [r3, #12]
 8000d0e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d10:	2300      	movs	r3, #0
 8000d12:	60bb      	str	r3, [r7, #8]
 8000d14:	4b28      	ldr	r3, [pc, #160]	; (8000db8 <SystemClock_Config+0xcc>)
 8000d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d18:	4a27      	ldr	r2, [pc, #156]	; (8000db8 <SystemClock_Config+0xcc>)
 8000d1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d1e:	6413      	str	r3, [r2, #64]	; 0x40
 8000d20:	4b25      	ldr	r3, [pc, #148]	; (8000db8 <SystemClock_Config+0xcc>)
 8000d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d28:	60bb      	str	r3, [r7, #8]
 8000d2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	607b      	str	r3, [r7, #4]
 8000d30:	4b22      	ldr	r3, [pc, #136]	; (8000dbc <SystemClock_Config+0xd0>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a21      	ldr	r2, [pc, #132]	; (8000dbc <SystemClock_Config+0xd0>)
 8000d36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d3a:	6013      	str	r3, [r2, #0]
 8000d3c:	4b1f      	ldr	r3, [pc, #124]	; (8000dbc <SystemClock_Config+0xd0>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d44:	607b      	str	r3, [r7, #4]
 8000d46:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d4c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d50:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d52:	2302      	movs	r3, #2
 8000d54:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d56:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000d5c:	2308      	movs	r3, #8
 8000d5e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000d60:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000d64:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d66:	2302      	movs	r3, #2
 8000d68:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000d6a:	2307      	movs	r3, #7
 8000d6c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d6e:	f107 0320 	add.w	r3, r7, #32
 8000d72:	4618      	mov	r0, r3
 8000d74:	f004 f826 	bl	8004dc4 <HAL_RCC_OscConfig>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000d7e:	f000 fa95 	bl	80012ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d82:	230f      	movs	r3, #15
 8000d84:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d86:	2302      	movs	r3, #2
 8000d88:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d8e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d92:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d98:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000d9a:	f107 030c 	add.w	r3, r7, #12
 8000d9e:	2105      	movs	r1, #5
 8000da0:	4618      	mov	r0, r3
 8000da2:	f004 fa87 	bl	80052b4 <HAL_RCC_ClockConfig>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000dac:	f000 fa7e 	bl	80012ac <Error_Handler>
  }
}
 8000db0:	bf00      	nop
 8000db2:	3750      	adds	r7, #80	; 0x50
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	40023800 	.word	0x40023800
 8000dbc:	40007000 	.word	0x40007000

08000dc0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b084      	sub	sp, #16
 8000dc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000dc6:	463b      	mov	r3, r7
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	605a      	str	r2, [r3, #4]
 8000dce:	609a      	str	r2, [r3, #8]
 8000dd0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000dd2:	4b21      	ldr	r3, [pc, #132]	; (8000e58 <MX_ADC1_Init+0x98>)
 8000dd4:	4a21      	ldr	r2, [pc, #132]	; (8000e5c <MX_ADC1_Init+0x9c>)
 8000dd6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000dd8:	4b1f      	ldr	r3, [pc, #124]	; (8000e58 <MX_ADC1_Init+0x98>)
 8000dda:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000dde:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000de0:	4b1d      	ldr	r3, [pc, #116]	; (8000e58 <MX_ADC1_Init+0x98>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000de6:	4b1c      	ldr	r3, [pc, #112]	; (8000e58 <MX_ADC1_Init+0x98>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000dec:	4b1a      	ldr	r3, [pc, #104]	; (8000e58 <MX_ADC1_Init+0x98>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000df2:	4b19      	ldr	r3, [pc, #100]	; (8000e58 <MX_ADC1_Init+0x98>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000dfa:	4b17      	ldr	r3, [pc, #92]	; (8000e58 <MX_ADC1_Init+0x98>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e00:	4b15      	ldr	r3, [pc, #84]	; (8000e58 <MX_ADC1_Init+0x98>)
 8000e02:	4a17      	ldr	r2, [pc, #92]	; (8000e60 <MX_ADC1_Init+0xa0>)
 8000e04:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e06:	4b14      	ldr	r3, [pc, #80]	; (8000e58 <MX_ADC1_Init+0x98>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000e0c:	4b12      	ldr	r3, [pc, #72]	; (8000e58 <MX_ADC1_Init+0x98>)
 8000e0e:	2201      	movs	r2, #1
 8000e10:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e12:	4b11      	ldr	r3, [pc, #68]	; (8000e58 <MX_ADC1_Init+0x98>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e1a:	4b0f      	ldr	r3, [pc, #60]	; (8000e58 <MX_ADC1_Init+0x98>)
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e20:	480d      	ldr	r0, [pc, #52]	; (8000e58 <MX_ADC1_Init+0x98>)
 8000e22:	f000 fd9b 	bl	800195c <HAL_ADC_Init>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000e2c:	f000 fa3e 	bl	80012ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000e30:	2301      	movs	r3, #1
 8000e32:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000e34:	2301      	movs	r3, #1
 8000e36:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e3c:	463b      	mov	r3, r7
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4805      	ldr	r0, [pc, #20]	; (8000e58 <MX_ADC1_Init+0x98>)
 8000e42:	f000 ff6d 	bl	8001d20 <HAL_ADC_ConfigChannel>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000e4c:	f000 fa2e 	bl	80012ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e50:	bf00      	nop
 8000e52:	3710      	adds	r7, #16
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	200001dc 	.word	0x200001dc
 8000e5c:	40012000 	.word	0x40012000
 8000e60:	0f000001 	.word	0x0f000001

08000e64 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e6a:	463b      	mov	r3, r7
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	605a      	str	r2, [r3, #4]
 8000e72:	609a      	str	r2, [r3, #8]
 8000e74:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000e76:	4b21      	ldr	r3, [pc, #132]	; (8000efc <MX_ADC2_Init+0x98>)
 8000e78:	4a21      	ldr	r2, [pc, #132]	; (8000f00 <MX_ADC2_Init+0x9c>)
 8000e7a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e7c:	4b1f      	ldr	r3, [pc, #124]	; (8000efc <MX_ADC2_Init+0x98>)
 8000e7e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e82:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000e84:	4b1d      	ldr	r3, [pc, #116]	; (8000efc <MX_ADC2_Init+0x98>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8000e8a:	4b1c      	ldr	r3, [pc, #112]	; (8000efc <MX_ADC2_Init+0x98>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000e90:	4b1a      	ldr	r3, [pc, #104]	; (8000efc <MX_ADC2_Init+0x98>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000e96:	4b19      	ldr	r3, [pc, #100]	; (8000efc <MX_ADC2_Init+0x98>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e9e:	4b17      	ldr	r3, [pc, #92]	; (8000efc <MX_ADC2_Init+0x98>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ea4:	4b15      	ldr	r3, [pc, #84]	; (8000efc <MX_ADC2_Init+0x98>)
 8000ea6:	4a17      	ldr	r2, [pc, #92]	; (8000f04 <MX_ADC2_Init+0xa0>)
 8000ea8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000eaa:	4b14      	ldr	r3, [pc, #80]	; (8000efc <MX_ADC2_Init+0x98>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000eb0:	4b12      	ldr	r3, [pc, #72]	; (8000efc <MX_ADC2_Init+0x98>)
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000eb6:	4b11      	ldr	r3, [pc, #68]	; (8000efc <MX_ADC2_Init+0x98>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ebe:	4b0f      	ldr	r3, [pc, #60]	; (8000efc <MX_ADC2_Init+0x98>)
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000ec4:	480d      	ldr	r0, [pc, #52]	; (8000efc <MX_ADC2_Init+0x98>)
 8000ec6:	f000 fd49 	bl	800195c <HAL_ADC_Init>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8000ed0:	f000 f9ec 	bl	80012ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000edc:	2300      	movs	r3, #0
 8000ede:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000ee0:	463b      	mov	r3, r7
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4805      	ldr	r0, [pc, #20]	; (8000efc <MX_ADC2_Init+0x98>)
 8000ee6:	f000 ff1b 	bl	8001d20 <HAL_ADC_ConfigChannel>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8000ef0:	f000 f9dc 	bl	80012ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000ef4:	bf00      	nop
 8000ef6:	3710      	adds	r7, #16
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	2000013c 	.word	0x2000013c
 8000f00:	40012100 	.word	0x40012100
 8000f04:	0f000001 	.word	0x0f000001

08000f08 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f0c:	4b12      	ldr	r3, [pc, #72]	; (8000f58 <MX_I2C1_Init+0x50>)
 8000f0e:	4a13      	ldr	r2, [pc, #76]	; (8000f5c <MX_I2C1_Init+0x54>)
 8000f10:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000f12:	4b11      	ldr	r3, [pc, #68]	; (8000f58 <MX_I2C1_Init+0x50>)
 8000f14:	4a12      	ldr	r2, [pc, #72]	; (8000f60 <MX_I2C1_Init+0x58>)
 8000f16:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f18:	4b0f      	ldr	r3, [pc, #60]	; (8000f58 <MX_I2C1_Init+0x50>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f1e:	4b0e      	ldr	r3, [pc, #56]	; (8000f58 <MX_I2C1_Init+0x50>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f24:	4b0c      	ldr	r3, [pc, #48]	; (8000f58 <MX_I2C1_Init+0x50>)
 8000f26:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f2a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f2c:	4b0a      	ldr	r3, [pc, #40]	; (8000f58 <MX_I2C1_Init+0x50>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f32:	4b09      	ldr	r3, [pc, #36]	; (8000f58 <MX_I2C1_Init+0x50>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f38:	4b07      	ldr	r3, [pc, #28]	; (8000f58 <MX_I2C1_Init+0x50>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f3e:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <MX_I2C1_Init+0x50>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f44:	4804      	ldr	r0, [pc, #16]	; (8000f58 <MX_I2C1_Init+0x50>)
 8000f46:	f003 f959 	bl	80041fc <HAL_I2C_Init>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f50:	f000 f9ac 	bl	80012ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f54:	bf00      	nop
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	20000184 	.word	0x20000184
 8000f5c:	40005400 	.word	0x40005400
 8000f60:	000186a0 	.word	0x000186a0

08000f64 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000f68:	4b13      	ldr	r3, [pc, #76]	; (8000fb8 <MX_I2S3_Init+0x54>)
 8000f6a:	4a14      	ldr	r2, [pc, #80]	; (8000fbc <MX_I2S3_Init+0x58>)
 8000f6c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000f6e:	4b12      	ldr	r3, [pc, #72]	; (8000fb8 <MX_I2S3_Init+0x54>)
 8000f70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f74:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000f76:	4b10      	ldr	r3, [pc, #64]	; (8000fb8 <MX_I2S3_Init+0x54>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000f7c:	4b0e      	ldr	r3, [pc, #56]	; (8000fb8 <MX_I2S3_Init+0x54>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000f82:	4b0d      	ldr	r3, [pc, #52]	; (8000fb8 <MX_I2S3_Init+0x54>)
 8000f84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f88:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000f8a:	4b0b      	ldr	r3, [pc, #44]	; (8000fb8 <MX_I2S3_Init+0x54>)
 8000f8c:	4a0c      	ldr	r2, [pc, #48]	; (8000fc0 <MX_I2S3_Init+0x5c>)
 8000f8e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000f90:	4b09      	ldr	r3, [pc, #36]	; (8000fb8 <MX_I2S3_Init+0x54>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000f96:	4b08      	ldr	r3, [pc, #32]	; (8000fb8 <MX_I2S3_Init+0x54>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000f9c:	4b06      	ldr	r3, [pc, #24]	; (8000fb8 <MX_I2S3_Init+0x54>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000fa2:	4805      	ldr	r0, [pc, #20]	; (8000fb8 <MX_I2S3_Init+0x54>)
 8000fa4:	f003 fa6e 	bl	8004484 <HAL_I2S_Init>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000fae:	f000 f97d 	bl	80012ac <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	20000288 	.word	0x20000288
 8000fbc:	40003c00 	.word	0x40003c00
 8000fc0:	00017700 	.word	0x00017700

08000fc4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000fc8:	4b17      	ldr	r3, [pc, #92]	; (8001028 <MX_SPI1_Init+0x64>)
 8000fca:	4a18      	ldr	r2, [pc, #96]	; (800102c <MX_SPI1_Init+0x68>)
 8000fcc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000fce:	4b16      	ldr	r3, [pc, #88]	; (8001028 <MX_SPI1_Init+0x64>)
 8000fd0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000fd4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000fd6:	4b14      	ldr	r3, [pc, #80]	; (8001028 <MX_SPI1_Init+0x64>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fdc:	4b12      	ldr	r3, [pc, #72]	; (8001028 <MX_SPI1_Init+0x64>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fe2:	4b11      	ldr	r3, [pc, #68]	; (8001028 <MX_SPI1_Init+0x64>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fe8:	4b0f      	ldr	r3, [pc, #60]	; (8001028 <MX_SPI1_Init+0x64>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000fee:	4b0e      	ldr	r3, [pc, #56]	; (8001028 <MX_SPI1_Init+0x64>)
 8000ff0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ff4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ff6:	4b0c      	ldr	r3, [pc, #48]	; (8001028 <MX_SPI1_Init+0x64>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ffc:	4b0a      	ldr	r3, [pc, #40]	; (8001028 <MX_SPI1_Init+0x64>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001002:	4b09      	ldr	r3, [pc, #36]	; (8001028 <MX_SPI1_Init+0x64>)
 8001004:	2200      	movs	r2, #0
 8001006:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001008:	4b07      	ldr	r3, [pc, #28]	; (8001028 <MX_SPI1_Init+0x64>)
 800100a:	2200      	movs	r2, #0
 800100c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800100e:	4b06      	ldr	r3, [pc, #24]	; (8001028 <MX_SPI1_Init+0x64>)
 8001010:	220a      	movs	r2, #10
 8001012:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001014:	4804      	ldr	r0, [pc, #16]	; (8001028 <MX_SPI1_Init+0x64>)
 8001016:	f004 fc89 	bl	800592c <HAL_SPI_Init>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001020:	f000 f944 	bl	80012ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001024:	bf00      	nop
 8001026:	bd80      	pop	{r7, pc}
 8001028:	20000228 	.word	0x20000228
 800102c:	40013000 	.word	0x40013000

08001030 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001034:	4b11      	ldr	r3, [pc, #68]	; (800107c <MX_USART3_UART_Init+0x4c>)
 8001036:	4a12      	ldr	r2, [pc, #72]	; (8001080 <MX_USART3_UART_Init+0x50>)
 8001038:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800103a:	4b10      	ldr	r3, [pc, #64]	; (800107c <MX_USART3_UART_Init+0x4c>)
 800103c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001040:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001042:	4b0e      	ldr	r3, [pc, #56]	; (800107c <MX_USART3_UART_Init+0x4c>)
 8001044:	2200      	movs	r2, #0
 8001046:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001048:	4b0c      	ldr	r3, [pc, #48]	; (800107c <MX_USART3_UART_Init+0x4c>)
 800104a:	2200      	movs	r2, #0
 800104c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800104e:	4b0b      	ldr	r3, [pc, #44]	; (800107c <MX_USART3_UART_Init+0x4c>)
 8001050:	2200      	movs	r2, #0
 8001052:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001054:	4b09      	ldr	r3, [pc, #36]	; (800107c <MX_USART3_UART_Init+0x4c>)
 8001056:	220c      	movs	r2, #12
 8001058:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800105a:	4b08      	ldr	r3, [pc, #32]	; (800107c <MX_USART3_UART_Init+0x4c>)
 800105c:	2200      	movs	r2, #0
 800105e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001060:	4b06      	ldr	r3, [pc, #24]	; (800107c <MX_USART3_UART_Init+0x4c>)
 8001062:	2200      	movs	r2, #0
 8001064:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001066:	4805      	ldr	r0, [pc, #20]	; (800107c <MX_USART3_UART_Init+0x4c>)
 8001068:	f004 fce9 	bl	8005a3e <HAL_UART_Init>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001072:	f000 f91b 	bl	80012ac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001076:	bf00      	nop
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	200000f8 	.word	0x200000f8
 8001080:	40004800 	.word	0x40004800

08001084 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b08c      	sub	sp, #48	; 0x30
 8001088:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800108a:	f107 031c 	add.w	r3, r7, #28
 800108e:	2200      	movs	r2, #0
 8001090:	601a      	str	r2, [r3, #0]
 8001092:	605a      	str	r2, [r3, #4]
 8001094:	609a      	str	r2, [r3, #8]
 8001096:	60da      	str	r2, [r3, #12]
 8001098:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800109a:	2300      	movs	r3, #0
 800109c:	61bb      	str	r3, [r7, #24]
 800109e:	4b7d      	ldr	r3, [pc, #500]	; (8001294 <MX_GPIO_Init+0x210>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a2:	4a7c      	ldr	r2, [pc, #496]	; (8001294 <MX_GPIO_Init+0x210>)
 80010a4:	f043 0310 	orr.w	r3, r3, #16
 80010a8:	6313      	str	r3, [r2, #48]	; 0x30
 80010aa:	4b7a      	ldr	r3, [pc, #488]	; (8001294 <MX_GPIO_Init+0x210>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	f003 0310 	and.w	r3, r3, #16
 80010b2:	61bb      	str	r3, [r7, #24]
 80010b4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010b6:	2300      	movs	r3, #0
 80010b8:	617b      	str	r3, [r7, #20]
 80010ba:	4b76      	ldr	r3, [pc, #472]	; (8001294 <MX_GPIO_Init+0x210>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010be:	4a75      	ldr	r2, [pc, #468]	; (8001294 <MX_GPIO_Init+0x210>)
 80010c0:	f043 0304 	orr.w	r3, r3, #4
 80010c4:	6313      	str	r3, [r2, #48]	; 0x30
 80010c6:	4b73      	ldr	r3, [pc, #460]	; (8001294 <MX_GPIO_Init+0x210>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	f003 0304 	and.w	r3, r3, #4
 80010ce:	617b      	str	r3, [r7, #20]
 80010d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010d2:	2300      	movs	r3, #0
 80010d4:	613b      	str	r3, [r7, #16]
 80010d6:	4b6f      	ldr	r3, [pc, #444]	; (8001294 <MX_GPIO_Init+0x210>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010da:	4a6e      	ldr	r2, [pc, #440]	; (8001294 <MX_GPIO_Init+0x210>)
 80010dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010e0:	6313      	str	r3, [r2, #48]	; 0x30
 80010e2:	4b6c      	ldr	r3, [pc, #432]	; (8001294 <MX_GPIO_Init+0x210>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010ea:	613b      	str	r3, [r7, #16]
 80010ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ee:	2300      	movs	r3, #0
 80010f0:	60fb      	str	r3, [r7, #12]
 80010f2:	4b68      	ldr	r3, [pc, #416]	; (8001294 <MX_GPIO_Init+0x210>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	4a67      	ldr	r2, [pc, #412]	; (8001294 <MX_GPIO_Init+0x210>)
 80010f8:	f043 0301 	orr.w	r3, r3, #1
 80010fc:	6313      	str	r3, [r2, #48]	; 0x30
 80010fe:	4b65      	ldr	r3, [pc, #404]	; (8001294 <MX_GPIO_Init+0x210>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	f003 0301 	and.w	r3, r3, #1
 8001106:	60fb      	str	r3, [r7, #12]
 8001108:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800110a:	2300      	movs	r3, #0
 800110c:	60bb      	str	r3, [r7, #8]
 800110e:	4b61      	ldr	r3, [pc, #388]	; (8001294 <MX_GPIO_Init+0x210>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001112:	4a60      	ldr	r2, [pc, #384]	; (8001294 <MX_GPIO_Init+0x210>)
 8001114:	f043 0302 	orr.w	r3, r3, #2
 8001118:	6313      	str	r3, [r2, #48]	; 0x30
 800111a:	4b5e      	ldr	r3, [pc, #376]	; (8001294 <MX_GPIO_Init+0x210>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	f003 0302 	and.w	r3, r3, #2
 8001122:	60bb      	str	r3, [r7, #8]
 8001124:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001126:	2300      	movs	r3, #0
 8001128:	607b      	str	r3, [r7, #4]
 800112a:	4b5a      	ldr	r3, [pc, #360]	; (8001294 <MX_GPIO_Init+0x210>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112e:	4a59      	ldr	r2, [pc, #356]	; (8001294 <MX_GPIO_Init+0x210>)
 8001130:	f043 0308 	orr.w	r3, r3, #8
 8001134:	6313      	str	r3, [r2, #48]	; 0x30
 8001136:	4b57      	ldr	r3, [pc, #348]	; (8001294 <MX_GPIO_Init+0x210>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	f003 0308 	and.w	r3, r3, #8
 800113e:	607b      	str	r3, [r7, #4]
 8001140:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001142:	2200      	movs	r2, #0
 8001144:	f64f 7108 	movw	r1, #65288	; 0xff08
 8001148:	4853      	ldr	r0, [pc, #332]	; (8001298 <MX_GPIO_Init+0x214>)
 800114a:	f001 facd 	bl	80026e8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800114e:	2201      	movs	r2, #1
 8001150:	2101      	movs	r1, #1
 8001152:	4852      	ldr	r0, [pc, #328]	; (800129c <MX_GPIO_Init+0x218>)
 8001154:	f001 fac8 	bl	80026e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8001158:	2200      	movs	r2, #0
 800115a:	2103      	movs	r1, #3
 800115c:	4850      	ldr	r0, [pc, #320]	; (80012a0 <MX_GPIO_Init+0x21c>)
 800115e:	f001 fac3 	bl	80026e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001162:	2200      	movs	r2, #0
 8001164:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001168:	484e      	ldr	r0, [pc, #312]	; (80012a4 <MX_GPIO_Init+0x220>)
 800116a:	f001 fabd 	bl	80026e8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : CS_I2C_SPI_Pin PE8 PE9 PE10
                           PE11 PE12 PE13 PE14
                           PE15 */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800116e:	f64f 7308 	movw	r3, #65288	; 0xff08
 8001172:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001174:	2301      	movs	r3, #1
 8001176:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001178:	2300      	movs	r3, #0
 800117a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117c:	2300      	movs	r3, #0
 800117e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001180:	f107 031c 	add.w	r3, r7, #28
 8001184:	4619      	mov	r1, r3
 8001186:	4844      	ldr	r0, [pc, #272]	; (8001298 <MX_GPIO_Init+0x214>)
 8001188:	f001 f8fa 	bl	8002380 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800118c:	2301      	movs	r3, #1
 800118e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001190:	2301      	movs	r3, #1
 8001192:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001194:	2300      	movs	r3, #0
 8001196:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001198:	2300      	movs	r3, #0
 800119a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800119c:	f107 031c 	add.w	r3, r7, #28
 80011a0:	4619      	mov	r1, r3
 80011a2:	483e      	ldr	r0, [pc, #248]	; (800129c <MX_GPIO_Init+0x218>)
 80011a4:	f001 f8ec 	bl	8002380 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80011a8:	2308      	movs	r3, #8
 80011aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ac:	2302      	movs	r3, #2
 80011ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b0:	2300      	movs	r3, #0
 80011b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b4:	2300      	movs	r3, #0
 80011b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80011b8:	2305      	movs	r3, #5
 80011ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80011bc:	f107 031c 	add.w	r3, r7, #28
 80011c0:	4619      	mov	r1, r3
 80011c2:	4836      	ldr	r0, [pc, #216]	; (800129c <MX_GPIO_Init+0x218>)
 80011c4:	f001 f8dc 	bl	8002380 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80011c8:	2301      	movs	r3, #1
 80011ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80011cc:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80011d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d2:	2300      	movs	r3, #0
 80011d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011d6:	f107 031c 	add.w	r3, r7, #28
 80011da:	4619      	mov	r1, r3
 80011dc:	4832      	ldr	r0, [pc, #200]	; (80012a8 <MX_GPIO_Init+0x224>)
 80011de:	f001 f8cf 	bl	8002380 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80011e2:	2303      	movs	r3, #3
 80011e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e6:	2301      	movs	r3, #1
 80011e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ea:	2300      	movs	r3, #0
 80011ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ee:	2300      	movs	r3, #0
 80011f0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011f2:	f107 031c 	add.w	r3, r7, #28
 80011f6:	4619      	mov	r1, r3
 80011f8:	4829      	ldr	r0, [pc, #164]	; (80012a0 <MX_GPIO_Init+0x21c>)
 80011fa:	f001 f8c1 	bl	8002380 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80011fe:	2304      	movs	r3, #4
 8001200:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001202:	2300      	movs	r3, #0
 8001204:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001206:	2300      	movs	r3, #0
 8001208:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800120a:	f107 031c 	add.w	r3, r7, #28
 800120e:	4619      	mov	r1, r3
 8001210:	4823      	ldr	r0, [pc, #140]	; (80012a0 <MX_GPIO_Init+0x21c>)
 8001212:	f001 f8b5 	bl	8002380 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001216:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800121a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121c:	2302      	movs	r3, #2
 800121e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001220:	2300      	movs	r3, #0
 8001222:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001224:	2300      	movs	r3, #0
 8001226:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001228:	2305      	movs	r3, #5
 800122a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800122c:	f107 031c 	add.w	r3, r7, #28
 8001230:	4619      	mov	r1, r3
 8001232:	481b      	ldr	r0, [pc, #108]	; (80012a0 <MX_GPIO_Init+0x21c>)
 8001234:	f001 f8a4 	bl	8002380 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD11 OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|OTG_FS_OverCurrent_Pin;
 8001238:	f44f 6342 	mov.w	r3, #3104	; 0xc20
 800123c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800123e:	2300      	movs	r3, #0
 8001240:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001242:	2300      	movs	r3, #0
 8001244:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001246:	f107 031c 	add.w	r3, r7, #28
 800124a:	4619      	mov	r1, r3
 800124c:	4815      	ldr	r0, [pc, #84]	; (80012a4 <MX_GPIO_Init+0x220>)
 800124e:	f001 f897 	bl	8002380 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001252:	f24f 0310 	movw	r3, #61456	; 0xf010
 8001256:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001258:	2301      	movs	r3, #1
 800125a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125c:	2300      	movs	r3, #0
 800125e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001260:	2300      	movs	r3, #0
 8001262:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001264:	f107 031c 	add.w	r3, r7, #28
 8001268:	4619      	mov	r1, r3
 800126a:	480e      	ldr	r0, [pc, #56]	; (80012a4 <MX_GPIO_Init+0x220>)
 800126c:	f001 f888 	bl	8002380 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001270:	2302      	movs	r3, #2
 8001272:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001274:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001278:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127a:	2300      	movs	r3, #0
 800127c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800127e:	f107 031c 	add.w	r3, r7, #28
 8001282:	4619      	mov	r1, r3
 8001284:	4804      	ldr	r0, [pc, #16]	; (8001298 <MX_GPIO_Init+0x214>)
 8001286:	f001 f87b 	bl	8002380 <HAL_GPIO_Init>

}
 800128a:	bf00      	nop
 800128c:	3730      	adds	r7, #48	; 0x30
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	40023800 	.word	0x40023800
 8001298:	40021000 	.word	0x40021000
 800129c:	40020800 	.word	0x40020800
 80012a0:	40020400 	.word	0x40020400
 80012a4:	40020c00 	.word	0x40020c00
 80012a8:	40020000 	.word	0x40020000

080012ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012b0:	b672      	cpsid	i
}
 80012b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012b4:	e7fe      	b.n	80012b4 <Error_Handler+0x8>
	...

080012b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	607b      	str	r3, [r7, #4]
 80012c2:	4b10      	ldr	r3, [pc, #64]	; (8001304 <HAL_MspInit+0x4c>)
 80012c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c6:	4a0f      	ldr	r2, [pc, #60]	; (8001304 <HAL_MspInit+0x4c>)
 80012c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012cc:	6453      	str	r3, [r2, #68]	; 0x44
 80012ce:	4b0d      	ldr	r3, [pc, #52]	; (8001304 <HAL_MspInit+0x4c>)
 80012d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012d6:	607b      	str	r3, [r7, #4]
 80012d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	603b      	str	r3, [r7, #0]
 80012de:	4b09      	ldr	r3, [pc, #36]	; (8001304 <HAL_MspInit+0x4c>)
 80012e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e2:	4a08      	ldr	r2, [pc, #32]	; (8001304 <HAL_MspInit+0x4c>)
 80012e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012e8:	6413      	str	r3, [r2, #64]	; 0x40
 80012ea:	4b06      	ldr	r3, [pc, #24]	; (8001304 <HAL_MspInit+0x4c>)
 80012ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012f2:	603b      	str	r3, [r7, #0]
 80012f4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80012f6:	2007      	movs	r0, #7
 80012f8:	f001 f800 	bl	80022fc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012fc:	bf00      	nop
 80012fe:	3708      	adds	r7, #8
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	40023800 	.word	0x40023800

08001308 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b08c      	sub	sp, #48	; 0x30
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001310:	f107 031c 	add.w	r3, r7, #28
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	60da      	str	r2, [r3, #12]
 800131e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a2e      	ldr	r2, [pc, #184]	; (80013e0 <HAL_ADC_MspInit+0xd8>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d128      	bne.n	800137c <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	61bb      	str	r3, [r7, #24]
 800132e:	4b2d      	ldr	r3, [pc, #180]	; (80013e4 <HAL_ADC_MspInit+0xdc>)
 8001330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001332:	4a2c      	ldr	r2, [pc, #176]	; (80013e4 <HAL_ADC_MspInit+0xdc>)
 8001334:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001338:	6453      	str	r3, [r2, #68]	; 0x44
 800133a:	4b2a      	ldr	r3, [pc, #168]	; (80013e4 <HAL_ADC_MspInit+0xdc>)
 800133c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800133e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001342:	61bb      	str	r3, [r7, #24]
 8001344:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001346:	2300      	movs	r3, #0
 8001348:	617b      	str	r3, [r7, #20]
 800134a:	4b26      	ldr	r3, [pc, #152]	; (80013e4 <HAL_ADC_MspInit+0xdc>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134e:	4a25      	ldr	r2, [pc, #148]	; (80013e4 <HAL_ADC_MspInit+0xdc>)
 8001350:	f043 0301 	orr.w	r3, r3, #1
 8001354:	6313      	str	r3, [r2, #48]	; 0x30
 8001356:	4b23      	ldr	r3, [pc, #140]	; (80013e4 <HAL_ADC_MspInit+0xdc>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135a:	f003 0301 	and.w	r3, r3, #1
 800135e:	617b      	str	r3, [r7, #20]
 8001360:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001362:	2302      	movs	r3, #2
 8001364:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001366:	2303      	movs	r3, #3
 8001368:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136a:	2300      	movs	r3, #0
 800136c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800136e:	f107 031c 	add.w	r3, r7, #28
 8001372:	4619      	mov	r1, r3
 8001374:	481c      	ldr	r0, [pc, #112]	; (80013e8 <HAL_ADC_MspInit+0xe0>)
 8001376:	f001 f803 	bl	8002380 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800137a:	e02c      	b.n	80013d6 <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a1a      	ldr	r2, [pc, #104]	; (80013ec <HAL_ADC_MspInit+0xe4>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d127      	bne.n	80013d6 <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001386:	2300      	movs	r3, #0
 8001388:	613b      	str	r3, [r7, #16]
 800138a:	4b16      	ldr	r3, [pc, #88]	; (80013e4 <HAL_ADC_MspInit+0xdc>)
 800138c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138e:	4a15      	ldr	r2, [pc, #84]	; (80013e4 <HAL_ADC_MspInit+0xdc>)
 8001390:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001394:	6453      	str	r3, [r2, #68]	; 0x44
 8001396:	4b13      	ldr	r3, [pc, #76]	; (80013e4 <HAL_ADC_MspInit+0xdc>)
 8001398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800139e:	613b      	str	r3, [r7, #16]
 80013a0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a2:	2300      	movs	r3, #0
 80013a4:	60fb      	str	r3, [r7, #12]
 80013a6:	4b0f      	ldr	r3, [pc, #60]	; (80013e4 <HAL_ADC_MspInit+0xdc>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013aa:	4a0e      	ldr	r2, [pc, #56]	; (80013e4 <HAL_ADC_MspInit+0xdc>)
 80013ac:	f043 0301 	orr.w	r3, r3, #1
 80013b0:	6313      	str	r3, [r2, #48]	; 0x30
 80013b2:	4b0c      	ldr	r3, [pc, #48]	; (80013e4 <HAL_ADC_MspInit+0xdc>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b6:	f003 0301 	and.w	r3, r3, #1
 80013ba:	60fb      	str	r3, [r7, #12]
 80013bc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80013be:	2304      	movs	r3, #4
 80013c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013c2:	2303      	movs	r3, #3
 80013c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c6:	2300      	movs	r3, #0
 80013c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ca:	f107 031c 	add.w	r3, r7, #28
 80013ce:	4619      	mov	r1, r3
 80013d0:	4805      	ldr	r0, [pc, #20]	; (80013e8 <HAL_ADC_MspInit+0xe0>)
 80013d2:	f000 ffd5 	bl	8002380 <HAL_GPIO_Init>
}
 80013d6:	bf00      	nop
 80013d8:	3730      	adds	r7, #48	; 0x30
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	40012000 	.word	0x40012000
 80013e4:	40023800 	.word	0x40023800
 80013e8:	40020000 	.word	0x40020000
 80013ec:	40012100 	.word	0x40012100

080013f0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b08a      	sub	sp, #40	; 0x28
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f8:	f107 0314 	add.w	r3, r7, #20
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	605a      	str	r2, [r3, #4]
 8001402:	609a      	str	r2, [r3, #8]
 8001404:	60da      	str	r2, [r3, #12]
 8001406:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a19      	ldr	r2, [pc, #100]	; (8001474 <HAL_I2C_MspInit+0x84>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d12c      	bne.n	800146c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001412:	2300      	movs	r3, #0
 8001414:	613b      	str	r3, [r7, #16]
 8001416:	4b18      	ldr	r3, [pc, #96]	; (8001478 <HAL_I2C_MspInit+0x88>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141a:	4a17      	ldr	r2, [pc, #92]	; (8001478 <HAL_I2C_MspInit+0x88>)
 800141c:	f043 0302 	orr.w	r3, r3, #2
 8001420:	6313      	str	r3, [r2, #48]	; 0x30
 8001422:	4b15      	ldr	r3, [pc, #84]	; (8001478 <HAL_I2C_MspInit+0x88>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001426:	f003 0302 	and.w	r3, r3, #2
 800142a:	613b      	str	r3, [r7, #16]
 800142c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800142e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001432:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001434:	2312      	movs	r3, #18
 8001436:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001438:	2301      	movs	r3, #1
 800143a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143c:	2300      	movs	r3, #0
 800143e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001440:	2304      	movs	r3, #4
 8001442:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001444:	f107 0314 	add.w	r3, r7, #20
 8001448:	4619      	mov	r1, r3
 800144a:	480c      	ldr	r0, [pc, #48]	; (800147c <HAL_I2C_MspInit+0x8c>)
 800144c:	f000 ff98 	bl	8002380 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001450:	2300      	movs	r3, #0
 8001452:	60fb      	str	r3, [r7, #12]
 8001454:	4b08      	ldr	r3, [pc, #32]	; (8001478 <HAL_I2C_MspInit+0x88>)
 8001456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001458:	4a07      	ldr	r2, [pc, #28]	; (8001478 <HAL_I2C_MspInit+0x88>)
 800145a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800145e:	6413      	str	r3, [r2, #64]	; 0x40
 8001460:	4b05      	ldr	r3, [pc, #20]	; (8001478 <HAL_I2C_MspInit+0x88>)
 8001462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001464:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001468:	60fb      	str	r3, [r7, #12]
 800146a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800146c:	bf00      	nop
 800146e:	3728      	adds	r7, #40	; 0x28
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	40005400 	.word	0x40005400
 8001478:	40023800 	.word	0x40023800
 800147c:	40020400 	.word	0x40020400

08001480 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b08e      	sub	sp, #56	; 0x38
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001488:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	605a      	str	r2, [r3, #4]
 8001492:	609a      	str	r2, [r3, #8]
 8001494:	60da      	str	r2, [r3, #12]
 8001496:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001498:	f107 0314 	add.w	r3, r7, #20
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	605a      	str	r2, [r3, #4]
 80014a2:	609a      	str	r2, [r3, #8]
 80014a4:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a31      	ldr	r2, [pc, #196]	; (8001570 <HAL_I2S_MspInit+0xf0>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d15a      	bne.n	8001566 <HAL_I2S_MspInit+0xe6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80014b0:	2301      	movs	r3, #1
 80014b2:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80014b4:	23c0      	movs	r3, #192	; 0xc0
 80014b6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80014b8:	2302      	movs	r3, #2
 80014ba:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014bc:	f107 0314 	add.w	r3, r7, #20
 80014c0:	4618      	mov	r0, r3
 80014c2:	f004 f8f3 	bl	80056ac <HAL_RCCEx_PeriphCLKConfig>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 80014cc:	f7ff feee 	bl	80012ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80014d0:	2300      	movs	r3, #0
 80014d2:	613b      	str	r3, [r7, #16]
 80014d4:	4b27      	ldr	r3, [pc, #156]	; (8001574 <HAL_I2S_MspInit+0xf4>)
 80014d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d8:	4a26      	ldr	r2, [pc, #152]	; (8001574 <HAL_I2S_MspInit+0xf4>)
 80014da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014de:	6413      	str	r3, [r2, #64]	; 0x40
 80014e0:	4b24      	ldr	r3, [pc, #144]	; (8001574 <HAL_I2S_MspInit+0xf4>)
 80014e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80014e8:	613b      	str	r3, [r7, #16]
 80014ea:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ec:	2300      	movs	r3, #0
 80014ee:	60fb      	str	r3, [r7, #12]
 80014f0:	4b20      	ldr	r3, [pc, #128]	; (8001574 <HAL_I2S_MspInit+0xf4>)
 80014f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f4:	4a1f      	ldr	r2, [pc, #124]	; (8001574 <HAL_I2S_MspInit+0xf4>)
 80014f6:	f043 0301 	orr.w	r3, r3, #1
 80014fa:	6313      	str	r3, [r2, #48]	; 0x30
 80014fc:	4b1d      	ldr	r3, [pc, #116]	; (8001574 <HAL_I2S_MspInit+0xf4>)
 80014fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001500:	f003 0301 	and.w	r3, r3, #1
 8001504:	60fb      	str	r3, [r7, #12]
 8001506:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001508:	2300      	movs	r3, #0
 800150a:	60bb      	str	r3, [r7, #8]
 800150c:	4b19      	ldr	r3, [pc, #100]	; (8001574 <HAL_I2S_MspInit+0xf4>)
 800150e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001510:	4a18      	ldr	r2, [pc, #96]	; (8001574 <HAL_I2S_MspInit+0xf4>)
 8001512:	f043 0304 	orr.w	r3, r3, #4
 8001516:	6313      	str	r3, [r2, #48]	; 0x30
 8001518:	4b16      	ldr	r3, [pc, #88]	; (8001574 <HAL_I2S_MspInit+0xf4>)
 800151a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151c:	f003 0304 	and.w	r3, r3, #4
 8001520:	60bb      	str	r3, [r7, #8]
 8001522:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001524:	2310      	movs	r3, #16
 8001526:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001528:	2302      	movs	r3, #2
 800152a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152c:	2300      	movs	r3, #0
 800152e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001530:	2300      	movs	r3, #0
 8001532:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001534:	2306      	movs	r3, #6
 8001536:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001538:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800153c:	4619      	mov	r1, r3
 800153e:	480e      	ldr	r0, [pc, #56]	; (8001578 <HAL_I2S_MspInit+0xf8>)
 8001540:	f000 ff1e 	bl	8002380 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001544:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001548:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800154a:	2302      	movs	r3, #2
 800154c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154e:	2300      	movs	r3, #0
 8001550:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001552:	2300      	movs	r3, #0
 8001554:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001556:	2306      	movs	r3, #6
 8001558:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800155a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800155e:	4619      	mov	r1, r3
 8001560:	4806      	ldr	r0, [pc, #24]	; (800157c <HAL_I2S_MspInit+0xfc>)
 8001562:	f000 ff0d 	bl	8002380 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001566:	bf00      	nop
 8001568:	3738      	adds	r7, #56	; 0x38
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	40003c00 	.word	0x40003c00
 8001574:	40023800 	.word	0x40023800
 8001578:	40020000 	.word	0x40020000
 800157c:	40020800 	.word	0x40020800

08001580 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b08a      	sub	sp, #40	; 0x28
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001588:	f107 0314 	add.w	r3, r7, #20
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]
 8001590:	605a      	str	r2, [r3, #4]
 8001592:	609a      	str	r2, [r3, #8]
 8001594:	60da      	str	r2, [r3, #12]
 8001596:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a19      	ldr	r2, [pc, #100]	; (8001604 <HAL_SPI_MspInit+0x84>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d12b      	bne.n	80015fa <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80015a2:	2300      	movs	r3, #0
 80015a4:	613b      	str	r3, [r7, #16]
 80015a6:	4b18      	ldr	r3, [pc, #96]	; (8001608 <HAL_SPI_MspInit+0x88>)
 80015a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015aa:	4a17      	ldr	r2, [pc, #92]	; (8001608 <HAL_SPI_MspInit+0x88>)
 80015ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80015b0:	6453      	str	r3, [r2, #68]	; 0x44
 80015b2:	4b15      	ldr	r3, [pc, #84]	; (8001608 <HAL_SPI_MspInit+0x88>)
 80015b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015ba:	613b      	str	r3, [r7, #16]
 80015bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015be:	2300      	movs	r3, #0
 80015c0:	60fb      	str	r3, [r7, #12]
 80015c2:	4b11      	ldr	r3, [pc, #68]	; (8001608 <HAL_SPI_MspInit+0x88>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c6:	4a10      	ldr	r2, [pc, #64]	; (8001608 <HAL_SPI_MspInit+0x88>)
 80015c8:	f043 0301 	orr.w	r3, r3, #1
 80015cc:	6313      	str	r3, [r2, #48]	; 0x30
 80015ce:	4b0e      	ldr	r3, [pc, #56]	; (8001608 <HAL_SPI_MspInit+0x88>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d2:	f003 0301 	and.w	r3, r3, #1
 80015d6:	60fb      	str	r3, [r7, #12]
 80015d8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80015da:	23e0      	movs	r3, #224	; 0xe0
 80015dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015de:	2302      	movs	r3, #2
 80015e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e2:	2300      	movs	r3, #0
 80015e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e6:	2300      	movs	r3, #0
 80015e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80015ea:	2305      	movs	r3, #5
 80015ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ee:	f107 0314 	add.w	r3, r7, #20
 80015f2:	4619      	mov	r1, r3
 80015f4:	4805      	ldr	r0, [pc, #20]	; (800160c <HAL_SPI_MspInit+0x8c>)
 80015f6:	f000 fec3 	bl	8002380 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80015fa:	bf00      	nop
 80015fc:	3728      	adds	r7, #40	; 0x28
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	40013000 	.word	0x40013000
 8001608:	40023800 	.word	0x40023800
 800160c:	40020000 	.word	0x40020000

08001610 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b08a      	sub	sp, #40	; 0x28
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001618:	f107 0314 	add.w	r3, r7, #20
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	605a      	str	r2, [r3, #4]
 8001622:	609a      	str	r2, [r3, #8]
 8001624:	60da      	str	r2, [r3, #12]
 8001626:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a29      	ldr	r2, [pc, #164]	; (80016d4 <HAL_UART_MspInit+0xc4>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d14b      	bne.n	80016ca <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001632:	2300      	movs	r3, #0
 8001634:	613b      	str	r3, [r7, #16]
 8001636:	4b28      	ldr	r3, [pc, #160]	; (80016d8 <HAL_UART_MspInit+0xc8>)
 8001638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163a:	4a27      	ldr	r2, [pc, #156]	; (80016d8 <HAL_UART_MspInit+0xc8>)
 800163c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001640:	6413      	str	r3, [r2, #64]	; 0x40
 8001642:	4b25      	ldr	r3, [pc, #148]	; (80016d8 <HAL_UART_MspInit+0xc8>)
 8001644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001646:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800164a:	613b      	str	r3, [r7, #16]
 800164c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800164e:	2300      	movs	r3, #0
 8001650:	60fb      	str	r3, [r7, #12]
 8001652:	4b21      	ldr	r3, [pc, #132]	; (80016d8 <HAL_UART_MspInit+0xc8>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001656:	4a20      	ldr	r2, [pc, #128]	; (80016d8 <HAL_UART_MspInit+0xc8>)
 8001658:	f043 0302 	orr.w	r3, r3, #2
 800165c:	6313      	str	r3, [r2, #48]	; 0x30
 800165e:	4b1e      	ldr	r3, [pc, #120]	; (80016d8 <HAL_UART_MspInit+0xc8>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001662:	f003 0302 	and.w	r3, r3, #2
 8001666:	60fb      	str	r3, [r7, #12]
 8001668:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800166a:	2300      	movs	r3, #0
 800166c:	60bb      	str	r3, [r7, #8]
 800166e:	4b1a      	ldr	r3, [pc, #104]	; (80016d8 <HAL_UART_MspInit+0xc8>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001672:	4a19      	ldr	r2, [pc, #100]	; (80016d8 <HAL_UART_MspInit+0xc8>)
 8001674:	f043 0308 	orr.w	r3, r3, #8
 8001678:	6313      	str	r3, [r2, #48]	; 0x30
 800167a:	4b17      	ldr	r3, [pc, #92]	; (80016d8 <HAL_UART_MspInit+0xc8>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167e:	f003 0308 	and.w	r3, r3, #8
 8001682:	60bb      	str	r3, [r7, #8]
 8001684:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB11     ------> USART3_RX
    PD8     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001686:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800168a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800168c:	2302      	movs	r3, #2
 800168e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001690:	2300      	movs	r3, #0
 8001692:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001694:	2303      	movs	r3, #3
 8001696:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001698:	2307      	movs	r3, #7
 800169a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800169c:	f107 0314 	add.w	r3, r7, #20
 80016a0:	4619      	mov	r1, r3
 80016a2:	480e      	ldr	r0, [pc, #56]	; (80016dc <HAL_UART_MspInit+0xcc>)
 80016a4:	f000 fe6c 	bl	8002380 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80016a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ae:	2302      	movs	r3, #2
 80016b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b2:	2300      	movs	r3, #0
 80016b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016b6:	2303      	movs	r3, #3
 80016b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80016ba:	2307      	movs	r3, #7
 80016bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016be:	f107 0314 	add.w	r3, r7, #20
 80016c2:	4619      	mov	r1, r3
 80016c4:	4806      	ldr	r0, [pc, #24]	; (80016e0 <HAL_UART_MspInit+0xd0>)
 80016c6:	f000 fe5b 	bl	8002380 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80016ca:	bf00      	nop
 80016cc:	3728      	adds	r7, #40	; 0x28
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	40004800 	.word	0x40004800
 80016d8:	40023800 	.word	0x40023800
 80016dc:	40020400 	.word	0x40020400
 80016e0:	40020c00 	.word	0x40020c00

080016e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016e8:	e7fe      	b.n	80016e8 <NMI_Handler+0x4>

080016ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016ea:	b480      	push	{r7}
 80016ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016ee:	e7fe      	b.n	80016ee <HardFault_Handler+0x4>

080016f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016f4:	e7fe      	b.n	80016f4 <MemManage_Handler+0x4>

080016f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016f6:	b480      	push	{r7}
 80016f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016fa:	e7fe      	b.n	80016fa <BusFault_Handler+0x4>

080016fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001700:	e7fe      	b.n	8001700 <UsageFault_Handler+0x4>

08001702 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001702:	b480      	push	{r7}
 8001704:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001706:	bf00      	nop
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr

08001710 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001714:	bf00      	nop
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr

0800171e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800171e:	b480      	push	{r7}
 8001720:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001722:	bf00      	nop
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr

0800172c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001730:	f000 f8d0 	bl	80018d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001734:	bf00      	nop
 8001736:	bd80      	pop	{r7, pc}

08001738 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800173c:	4802      	ldr	r0, [pc, #8]	; (8001748 <OTG_FS_IRQHandler+0x10>)
 800173e:	f001 fa57 	bl	8002bf0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001742:	bf00      	nop
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	200006ac 	.word	0x200006ac

0800174c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b086      	sub	sp, #24
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001754:	4a14      	ldr	r2, [pc, #80]	; (80017a8 <_sbrk+0x5c>)
 8001756:	4b15      	ldr	r3, [pc, #84]	; (80017ac <_sbrk+0x60>)
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001760:	4b13      	ldr	r3, [pc, #76]	; (80017b0 <_sbrk+0x64>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d102      	bne.n	800176e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001768:	4b11      	ldr	r3, [pc, #68]	; (80017b0 <_sbrk+0x64>)
 800176a:	4a12      	ldr	r2, [pc, #72]	; (80017b4 <_sbrk+0x68>)
 800176c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800176e:	4b10      	ldr	r3, [pc, #64]	; (80017b0 <_sbrk+0x64>)
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4413      	add	r3, r2
 8001776:	693a      	ldr	r2, [r7, #16]
 8001778:	429a      	cmp	r2, r3
 800177a:	d207      	bcs.n	800178c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800177c:	f007 fe28 	bl	80093d0 <__errno>
 8001780:	4603      	mov	r3, r0
 8001782:	220c      	movs	r2, #12
 8001784:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001786:	f04f 33ff 	mov.w	r3, #4294967295
 800178a:	e009      	b.n	80017a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800178c:	4b08      	ldr	r3, [pc, #32]	; (80017b0 <_sbrk+0x64>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001792:	4b07      	ldr	r3, [pc, #28]	; (80017b0 <_sbrk+0x64>)
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4413      	add	r3, r2
 800179a:	4a05      	ldr	r2, [pc, #20]	; (80017b0 <_sbrk+0x64>)
 800179c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800179e:	68fb      	ldr	r3, [r7, #12]
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3718      	adds	r7, #24
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	20020000 	.word	0x20020000
 80017ac:	00000400 	.word	0x00000400
 80017b0:	200000e4 	.word	0x200000e4
 80017b4:	200009c0 	.word	0x200009c0

080017b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017bc:	4b06      	ldr	r3, [pc, #24]	; (80017d8 <SystemInit+0x20>)
 80017be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017c2:	4a05      	ldr	r2, [pc, #20]	; (80017d8 <SystemInit+0x20>)
 80017c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017cc:	bf00      	nop
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	e000ed00 	.word	0xe000ed00

080017dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80017dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001814 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017e0:	480d      	ldr	r0, [pc, #52]	; (8001818 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017e2:	490e      	ldr	r1, [pc, #56]	; (800181c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80017e4:	4a0e      	ldr	r2, [pc, #56]	; (8001820 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017e8:	e002      	b.n	80017f0 <LoopCopyDataInit>

080017ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017ee:	3304      	adds	r3, #4

080017f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017f4:	d3f9      	bcc.n	80017ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017f6:	4a0b      	ldr	r2, [pc, #44]	; (8001824 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80017f8:	4c0b      	ldr	r4, [pc, #44]	; (8001828 <LoopFillZerobss+0x26>)
  movs r3, #0
 80017fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017fc:	e001      	b.n	8001802 <LoopFillZerobss>

080017fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001800:	3204      	adds	r2, #4

08001802 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001802:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001804:	d3fb      	bcc.n	80017fe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001806:	f7ff ffd7 	bl	80017b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800180a:	f007 fde7 	bl	80093dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800180e:	f7ff f8f3 	bl	80009f8 <main>
  bx  lr    
 8001812:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001814:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001818:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800181c:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 8001820:	08009d54 	.word	0x08009d54
  ldr r2, =_sbss
 8001824:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 8001828:	200009c0 	.word	0x200009c0

0800182c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800182c:	e7fe      	b.n	800182c <ADC_IRQHandler>
	...

08001830 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001834:	4b0e      	ldr	r3, [pc, #56]	; (8001870 <HAL_Init+0x40>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a0d      	ldr	r2, [pc, #52]	; (8001870 <HAL_Init+0x40>)
 800183a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800183e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001840:	4b0b      	ldr	r3, [pc, #44]	; (8001870 <HAL_Init+0x40>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a0a      	ldr	r2, [pc, #40]	; (8001870 <HAL_Init+0x40>)
 8001846:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800184a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800184c:	4b08      	ldr	r3, [pc, #32]	; (8001870 <HAL_Init+0x40>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a07      	ldr	r2, [pc, #28]	; (8001870 <HAL_Init+0x40>)
 8001852:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001856:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001858:	2003      	movs	r0, #3
 800185a:	f000 fd4f 	bl	80022fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800185e:	2000      	movs	r0, #0
 8001860:	f000 f808 	bl	8001874 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001864:	f7ff fd28 	bl	80012b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001868:	2300      	movs	r3, #0
}
 800186a:	4618      	mov	r0, r3
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	40023c00 	.word	0x40023c00

08001874 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800187c:	4b12      	ldr	r3, [pc, #72]	; (80018c8 <HAL_InitTick+0x54>)
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	4b12      	ldr	r3, [pc, #72]	; (80018cc <HAL_InitTick+0x58>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	4619      	mov	r1, r3
 8001886:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800188a:	fbb3 f3f1 	udiv	r3, r3, r1
 800188e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001892:	4618      	mov	r0, r3
 8001894:	f000 fd67 	bl	8002366 <HAL_SYSTICK_Config>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e00e      	b.n	80018c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2b0f      	cmp	r3, #15
 80018a6:	d80a      	bhi.n	80018be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018a8:	2200      	movs	r2, #0
 80018aa:	6879      	ldr	r1, [r7, #4]
 80018ac:	f04f 30ff 	mov.w	r0, #4294967295
 80018b0:	f000 fd2f 	bl	8002312 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018b4:	4a06      	ldr	r2, [pc, #24]	; (80018d0 <HAL_InitTick+0x5c>)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018ba:	2300      	movs	r3, #0
 80018bc:	e000      	b.n	80018c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3708      	adds	r7, #8
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	20000018 	.word	0x20000018
 80018cc:	20000020 	.word	0x20000020
 80018d0:	2000001c 	.word	0x2000001c

080018d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018d8:	4b06      	ldr	r3, [pc, #24]	; (80018f4 <HAL_IncTick+0x20>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	461a      	mov	r2, r3
 80018de:	4b06      	ldr	r3, [pc, #24]	; (80018f8 <HAL_IncTick+0x24>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4413      	add	r3, r2
 80018e4:	4a04      	ldr	r2, [pc, #16]	; (80018f8 <HAL_IncTick+0x24>)
 80018e6:	6013      	str	r3, [r2, #0]
}
 80018e8:	bf00      	nop
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	20000020 	.word	0x20000020
 80018f8:	200002d0 	.word	0x200002d0

080018fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001900:	4b03      	ldr	r3, [pc, #12]	; (8001910 <HAL_GetTick+0x14>)
 8001902:	681b      	ldr	r3, [r3, #0]
}
 8001904:	4618      	mov	r0, r3
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	200002d0 	.word	0x200002d0

08001914 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800191c:	f7ff ffee 	bl	80018fc <HAL_GetTick>
 8001920:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800192c:	d005      	beq.n	800193a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800192e:	4b0a      	ldr	r3, [pc, #40]	; (8001958 <HAL_Delay+0x44>)
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	461a      	mov	r2, r3
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	4413      	add	r3, r2
 8001938:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800193a:	bf00      	nop
 800193c:	f7ff ffde 	bl	80018fc <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	68fa      	ldr	r2, [r7, #12]
 8001948:	429a      	cmp	r2, r3
 800194a:	d8f7      	bhi.n	800193c <HAL_Delay+0x28>
  {
  }
}
 800194c:	bf00      	nop
 800194e:	bf00      	nop
 8001950:	3710      	adds	r7, #16
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	20000020 	.word	0x20000020

0800195c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001964:	2300      	movs	r3, #0
 8001966:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d101      	bne.n	8001972 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e033      	b.n	80019da <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001976:	2b00      	cmp	r3, #0
 8001978:	d109      	bne.n	800198e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f7ff fcc4 	bl	8001308 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2200      	movs	r2, #0
 8001984:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2200      	movs	r2, #0
 800198a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001992:	f003 0310 	and.w	r3, r3, #16
 8001996:	2b00      	cmp	r3, #0
 8001998:	d118      	bne.n	80019cc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80019a2:	f023 0302 	bic.w	r3, r3, #2
 80019a6:	f043 0202 	orr.w	r2, r3, #2
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f000 fad8 	bl	8001f64 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2200      	movs	r2, #0
 80019b8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019be:	f023 0303 	bic.w	r3, r3, #3
 80019c2:	f043 0201 	orr.w	r2, r3, #1
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	641a      	str	r2, [r3, #64]	; 0x40
 80019ca:	e001      	b.n	80019d0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2200      	movs	r2, #0
 80019d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80019d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3710      	adds	r7, #16
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
	...

080019e4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b085      	sub	sp, #20
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80019ec:	2300      	movs	r3, #0
 80019ee:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d101      	bne.n	80019fe <HAL_ADC_Start+0x1a>
 80019fa:	2302      	movs	r3, #2
 80019fc:	e0b2      	b.n	8001b64 <HAL_ADC_Start+0x180>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2201      	movs	r2, #1
 8001a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	f003 0301 	and.w	r3, r3, #1
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d018      	beq.n	8001a46 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	689a      	ldr	r2, [r3, #8]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f042 0201 	orr.w	r2, r2, #1
 8001a22:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001a24:	4b52      	ldr	r3, [pc, #328]	; (8001b70 <HAL_ADC_Start+0x18c>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a52      	ldr	r2, [pc, #328]	; (8001b74 <HAL_ADC_Start+0x190>)
 8001a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a2e:	0c9a      	lsrs	r2, r3, #18
 8001a30:	4613      	mov	r3, r2
 8001a32:	005b      	lsls	r3, r3, #1
 8001a34:	4413      	add	r3, r2
 8001a36:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001a38:	e002      	b.n	8001a40 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	3b01      	subs	r3, #1
 8001a3e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d1f9      	bne.n	8001a3a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	f003 0301 	and.w	r3, r3, #1
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d17a      	bne.n	8001b4a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a58:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001a5c:	f023 0301 	bic.w	r3, r3, #1
 8001a60:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d007      	beq.n	8001a86 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a7e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a92:	d106      	bne.n	8001aa2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a98:	f023 0206 	bic.w	r2, r3, #6
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	645a      	str	r2, [r3, #68]	; 0x44
 8001aa0:	e002      	b.n	8001aa8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ab0:	4b31      	ldr	r3, [pc, #196]	; (8001b78 <HAL_ADC_Start+0x194>)
 8001ab2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001abc:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f003 031f 	and.w	r3, r3, #31
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d12a      	bne.n	8001b20 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a2b      	ldr	r2, [pc, #172]	; (8001b7c <HAL_ADC_Start+0x198>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d015      	beq.n	8001b00 <HAL_ADC_Start+0x11c>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a29      	ldr	r2, [pc, #164]	; (8001b80 <HAL_ADC_Start+0x19c>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d105      	bne.n	8001aea <HAL_ADC_Start+0x106>
 8001ade:	4b26      	ldr	r3, [pc, #152]	; (8001b78 <HAL_ADC_Start+0x194>)
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	f003 031f 	and.w	r3, r3, #31
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d00a      	beq.n	8001b00 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a25      	ldr	r2, [pc, #148]	; (8001b84 <HAL_ADC_Start+0x1a0>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d136      	bne.n	8001b62 <HAL_ADC_Start+0x17e>
 8001af4:	4b20      	ldr	r3, [pc, #128]	; (8001b78 <HAL_ADC_Start+0x194>)
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f003 0310 	and.w	r3, r3, #16
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d130      	bne.n	8001b62 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d129      	bne.n	8001b62 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	689a      	ldr	r2, [r3, #8]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001b1c:	609a      	str	r2, [r3, #8]
 8001b1e:	e020      	b.n	8001b62 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a15      	ldr	r2, [pc, #84]	; (8001b7c <HAL_ADC_Start+0x198>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d11b      	bne.n	8001b62 <HAL_ADC_Start+0x17e>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d114      	bne.n	8001b62 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	689a      	ldr	r2, [r3, #8]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001b46:	609a      	str	r2, [r3, #8]
 8001b48:	e00b      	b.n	8001b62 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4e:	f043 0210 	orr.w	r2, r3, #16
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b5a:	f043 0201 	orr.w	r2, r3, #1
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001b62:	2300      	movs	r3, #0
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3714      	adds	r7, #20
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr
 8001b70:	20000018 	.word	0x20000018
 8001b74:	431bde83 	.word	0x431bde83
 8001b78:	40012300 	.word	0x40012300
 8001b7c:	40012000 	.word	0x40012000
 8001b80:	40012100 	.word	0x40012100
 8001b84:	40012200 	.word	0x40012200

08001b88 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d101      	bne.n	8001b9e <HAL_ADC_Stop+0x16>
 8001b9a:	2302      	movs	r3, #2
 8001b9c:	e021      	b.n	8001be2 <HAL_ADC_Stop+0x5a>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	689a      	ldr	r2, [r3, #8]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f022 0201 	bic.w	r2, r2, #1
 8001bb4:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	f003 0301 	and.w	r3, r3, #1
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d109      	bne.n	8001bd8 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001bcc:	f023 0301 	bic.w	r3, r3, #1
 8001bd0:	f043 0201 	orr.w	r2, r3, #1
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	370c      	adds	r7, #12
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr

08001bee <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001bee:	b580      	push	{r7, lr}
 8001bf0:	b084      	sub	sp, #16
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
 8001bf6:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c0a:	d113      	bne.n	8001c34 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001c16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c1a:	d10b      	bne.n	8001c34 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c20:	f043 0220 	orr.w	r2, r3, #32
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e063      	b.n	8001cfc <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001c34:	f7ff fe62 	bl	80018fc <HAL_GetTick>
 8001c38:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001c3a:	e021      	b.n	8001c80 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c42:	d01d      	beq.n	8001c80 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d007      	beq.n	8001c5a <HAL_ADC_PollForConversion+0x6c>
 8001c4a:	f7ff fe57 	bl	80018fc <HAL_GetTick>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	683a      	ldr	r2, [r7, #0]
 8001c56:	429a      	cmp	r2, r3
 8001c58:	d212      	bcs.n	8001c80 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0302 	and.w	r3, r3, #2
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	d00b      	beq.n	8001c80 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6c:	f043 0204 	orr.w	r2, r3, #4
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2200      	movs	r2, #0
 8001c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001c7c:	2303      	movs	r3, #3
 8001c7e:	e03d      	b.n	8001cfc <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 0302 	and.w	r3, r3, #2
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	d1d6      	bne.n	8001c3c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f06f 0212 	mvn.w	r2, #18
 8001c96:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d123      	bne.n	8001cfa <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d11f      	bne.n	8001cfa <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cc0:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d006      	beq.n	8001cd6 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d111      	bne.n	8001cfa <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cda:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d105      	bne.n	8001cfa <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf2:	f043 0201 	orr.w	r2, r3, #1
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001cfa:	2300      	movs	r3, #0
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3710      	adds	r7, #16
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}

08001d04 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	370c      	adds	r7, #12
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
	...

08001d20 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b085      	sub	sp, #20
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d101      	bne.n	8001d3c <HAL_ADC_ConfigChannel+0x1c>
 8001d38:	2302      	movs	r3, #2
 8001d3a:	e105      	b.n	8001f48 <HAL_ADC_ConfigChannel+0x228>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2201      	movs	r2, #1
 8001d40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	2b09      	cmp	r3, #9
 8001d4a:	d925      	bls.n	8001d98 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	68d9      	ldr	r1, [r3, #12]
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	461a      	mov	r2, r3
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	4413      	add	r3, r2
 8001d60:	3b1e      	subs	r3, #30
 8001d62:	2207      	movs	r2, #7
 8001d64:	fa02 f303 	lsl.w	r3, r2, r3
 8001d68:	43da      	mvns	r2, r3
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	400a      	ands	r2, r1
 8001d70:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	68d9      	ldr	r1, [r3, #12]
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	689a      	ldr	r2, [r3, #8]
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	b29b      	uxth	r3, r3
 8001d82:	4618      	mov	r0, r3
 8001d84:	4603      	mov	r3, r0
 8001d86:	005b      	lsls	r3, r3, #1
 8001d88:	4403      	add	r3, r0
 8001d8a:	3b1e      	subs	r3, #30
 8001d8c:	409a      	lsls	r2, r3
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	430a      	orrs	r2, r1
 8001d94:	60da      	str	r2, [r3, #12]
 8001d96:	e022      	b.n	8001dde <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	6919      	ldr	r1, [r3, #16]
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	b29b      	uxth	r3, r3
 8001da4:	461a      	mov	r2, r3
 8001da6:	4613      	mov	r3, r2
 8001da8:	005b      	lsls	r3, r3, #1
 8001daa:	4413      	add	r3, r2
 8001dac:	2207      	movs	r2, #7
 8001dae:	fa02 f303 	lsl.w	r3, r2, r3
 8001db2:	43da      	mvns	r2, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	400a      	ands	r2, r1
 8001dba:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	6919      	ldr	r1, [r3, #16]
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	689a      	ldr	r2, [r3, #8]
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	b29b      	uxth	r3, r3
 8001dcc:	4618      	mov	r0, r3
 8001dce:	4603      	mov	r3, r0
 8001dd0:	005b      	lsls	r3, r3, #1
 8001dd2:	4403      	add	r3, r0
 8001dd4:	409a      	lsls	r2, r3
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	430a      	orrs	r2, r1
 8001ddc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	2b06      	cmp	r3, #6
 8001de4:	d824      	bhi.n	8001e30 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	685a      	ldr	r2, [r3, #4]
 8001df0:	4613      	mov	r3, r2
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	4413      	add	r3, r2
 8001df6:	3b05      	subs	r3, #5
 8001df8:	221f      	movs	r2, #31
 8001dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfe:	43da      	mvns	r2, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	400a      	ands	r2, r1
 8001e06:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	b29b      	uxth	r3, r3
 8001e14:	4618      	mov	r0, r3
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	685a      	ldr	r2, [r3, #4]
 8001e1a:	4613      	mov	r3, r2
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	4413      	add	r3, r2
 8001e20:	3b05      	subs	r3, #5
 8001e22:	fa00 f203 	lsl.w	r2, r0, r3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	635a      	str	r2, [r3, #52]	; 0x34
 8001e2e:	e04c      	b.n	8001eca <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	2b0c      	cmp	r3, #12
 8001e36:	d824      	bhi.n	8001e82 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	685a      	ldr	r2, [r3, #4]
 8001e42:	4613      	mov	r3, r2
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	4413      	add	r3, r2
 8001e48:	3b23      	subs	r3, #35	; 0x23
 8001e4a:	221f      	movs	r2, #31
 8001e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e50:	43da      	mvns	r2, r3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	400a      	ands	r2, r1
 8001e58:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	b29b      	uxth	r3, r3
 8001e66:	4618      	mov	r0, r3
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	685a      	ldr	r2, [r3, #4]
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	4413      	add	r3, r2
 8001e72:	3b23      	subs	r3, #35	; 0x23
 8001e74:	fa00 f203 	lsl.w	r2, r0, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	430a      	orrs	r2, r1
 8001e7e:	631a      	str	r2, [r3, #48]	; 0x30
 8001e80:	e023      	b.n	8001eca <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	685a      	ldr	r2, [r3, #4]
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	4413      	add	r3, r2
 8001e92:	3b41      	subs	r3, #65	; 0x41
 8001e94:	221f      	movs	r2, #31
 8001e96:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9a:	43da      	mvns	r2, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	400a      	ands	r2, r1
 8001ea2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	b29b      	uxth	r3, r3
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	685a      	ldr	r2, [r3, #4]
 8001eb6:	4613      	mov	r3, r2
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	4413      	add	r3, r2
 8001ebc:	3b41      	subs	r3, #65	; 0x41
 8001ebe:	fa00 f203 	lsl.w	r2, r0, r3
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	430a      	orrs	r2, r1
 8001ec8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001eca:	4b22      	ldr	r3, [pc, #136]	; (8001f54 <HAL_ADC_ConfigChannel+0x234>)
 8001ecc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a21      	ldr	r2, [pc, #132]	; (8001f58 <HAL_ADC_ConfigChannel+0x238>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d109      	bne.n	8001eec <HAL_ADC_ConfigChannel+0x1cc>
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2b12      	cmp	r3, #18
 8001ede:	d105      	bne.n	8001eec <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a19      	ldr	r2, [pc, #100]	; (8001f58 <HAL_ADC_ConfigChannel+0x238>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d123      	bne.n	8001f3e <HAL_ADC_ConfigChannel+0x21e>
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	2b10      	cmp	r3, #16
 8001efc:	d003      	beq.n	8001f06 <HAL_ADC_ConfigChannel+0x1e6>
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	2b11      	cmp	r3, #17
 8001f04:	d11b      	bne.n	8001f3e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	2b10      	cmp	r3, #16
 8001f18:	d111      	bne.n	8001f3e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f1a:	4b10      	ldr	r3, [pc, #64]	; (8001f5c <HAL_ADC_ConfigChannel+0x23c>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a10      	ldr	r2, [pc, #64]	; (8001f60 <HAL_ADC_ConfigChannel+0x240>)
 8001f20:	fba2 2303 	umull	r2, r3, r2, r3
 8001f24:	0c9a      	lsrs	r2, r3, #18
 8001f26:	4613      	mov	r3, r2
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	4413      	add	r3, r2
 8001f2c:	005b      	lsls	r3, r3, #1
 8001f2e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001f30:	e002      	b.n	8001f38 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	3b01      	subs	r3, #1
 8001f36:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d1f9      	bne.n	8001f32 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2200      	movs	r2, #0
 8001f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001f46:	2300      	movs	r3, #0
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3714      	adds	r7, #20
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr
 8001f54:	40012300 	.word	0x40012300
 8001f58:	40012000 	.word	0x40012000
 8001f5c:	20000018 	.word	0x20000018
 8001f60:	431bde83 	.word	0x431bde83

08001f64 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b085      	sub	sp, #20
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f6c:	4b79      	ldr	r3, [pc, #484]	; (8002154 <ADC_Init+0x1f0>)
 8001f6e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	685a      	ldr	r2, [r3, #4]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	431a      	orrs	r2, r3
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	685a      	ldr	r2, [r3, #4]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f98:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	6859      	ldr	r1, [r3, #4]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	691b      	ldr	r3, [r3, #16]
 8001fa4:	021a      	lsls	r2, r3, #8
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	430a      	orrs	r2, r1
 8001fac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	685a      	ldr	r2, [r3, #4]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001fbc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	6859      	ldr	r1, [r3, #4]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	689a      	ldr	r2, [r3, #8]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	430a      	orrs	r2, r1
 8001fce:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	689a      	ldr	r2, [r3, #8]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fde:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	6899      	ldr	r1, [r3, #8]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	68da      	ldr	r2, [r3, #12]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	430a      	orrs	r2, r1
 8001ff0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ff6:	4a58      	ldr	r2, [pc, #352]	; (8002158 <ADC_Init+0x1f4>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d022      	beq.n	8002042 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	689a      	ldr	r2, [r3, #8]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800200a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	6899      	ldr	r1, [r3, #8]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	430a      	orrs	r2, r1
 800201c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	689a      	ldr	r2, [r3, #8]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800202c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	6899      	ldr	r1, [r3, #8]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	430a      	orrs	r2, r1
 800203e:	609a      	str	r2, [r3, #8]
 8002040:	e00f      	b.n	8002062 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	689a      	ldr	r2, [r3, #8]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002050:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	689a      	ldr	r2, [r3, #8]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002060:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	689a      	ldr	r2, [r3, #8]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f022 0202 	bic.w	r2, r2, #2
 8002070:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	6899      	ldr	r1, [r3, #8]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	7e1b      	ldrb	r3, [r3, #24]
 800207c:	005a      	lsls	r2, r3, #1
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	430a      	orrs	r2, r1
 8002084:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	f893 3020 	ldrb.w	r3, [r3, #32]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d01b      	beq.n	80020c8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	685a      	ldr	r2, [r3, #4]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800209e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	685a      	ldr	r2, [r3, #4]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80020ae:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	6859      	ldr	r1, [r3, #4]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ba:	3b01      	subs	r3, #1
 80020bc:	035a      	lsls	r2, r3, #13
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	430a      	orrs	r2, r1
 80020c4:	605a      	str	r2, [r3, #4]
 80020c6:	e007      	b.n	80020d8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	685a      	ldr	r2, [r3, #4]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020d6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80020e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	69db      	ldr	r3, [r3, #28]
 80020f2:	3b01      	subs	r3, #1
 80020f4:	051a      	lsls	r2, r3, #20
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	430a      	orrs	r2, r1
 80020fc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	689a      	ldr	r2, [r3, #8]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800210c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	6899      	ldr	r1, [r3, #8]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800211a:	025a      	lsls	r2, r3, #9
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	430a      	orrs	r2, r1
 8002122:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	689a      	ldr	r2, [r3, #8]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002132:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	6899      	ldr	r1, [r3, #8]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	695b      	ldr	r3, [r3, #20]
 800213e:	029a      	lsls	r2, r3, #10
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	430a      	orrs	r2, r1
 8002146:	609a      	str	r2, [r3, #8]
}
 8002148:	bf00      	nop
 800214a:	3714      	adds	r7, #20
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr
 8002154:	40012300 	.word	0x40012300
 8002158:	0f000001 	.word	0x0f000001

0800215c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800215c:	b480      	push	{r7}
 800215e:	b085      	sub	sp, #20
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f003 0307 	and.w	r3, r3, #7
 800216a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800216c:	4b0c      	ldr	r3, [pc, #48]	; (80021a0 <__NVIC_SetPriorityGrouping+0x44>)
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002172:	68ba      	ldr	r2, [r7, #8]
 8002174:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002178:	4013      	ands	r3, r2
 800217a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002184:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002188:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800218c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800218e:	4a04      	ldr	r2, [pc, #16]	; (80021a0 <__NVIC_SetPriorityGrouping+0x44>)
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	60d3      	str	r3, [r2, #12]
}
 8002194:	bf00      	nop
 8002196:	3714      	adds	r7, #20
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr
 80021a0:	e000ed00 	.word	0xe000ed00

080021a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021a8:	4b04      	ldr	r3, [pc, #16]	; (80021bc <__NVIC_GetPriorityGrouping+0x18>)
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	0a1b      	lsrs	r3, r3, #8
 80021ae:	f003 0307 	and.w	r3, r3, #7
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr
 80021bc:	e000ed00 	.word	0xe000ed00

080021c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	4603      	mov	r3, r0
 80021c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	db0b      	blt.n	80021ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021d2:	79fb      	ldrb	r3, [r7, #7]
 80021d4:	f003 021f 	and.w	r2, r3, #31
 80021d8:	4907      	ldr	r1, [pc, #28]	; (80021f8 <__NVIC_EnableIRQ+0x38>)
 80021da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021de:	095b      	lsrs	r3, r3, #5
 80021e0:	2001      	movs	r0, #1
 80021e2:	fa00 f202 	lsl.w	r2, r0, r2
 80021e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021ea:	bf00      	nop
 80021ec:	370c      	adds	r7, #12
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	e000e100 	.word	0xe000e100

080021fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	4603      	mov	r3, r0
 8002204:	6039      	str	r1, [r7, #0]
 8002206:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002208:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800220c:	2b00      	cmp	r3, #0
 800220e:	db0a      	blt.n	8002226 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	b2da      	uxtb	r2, r3
 8002214:	490c      	ldr	r1, [pc, #48]	; (8002248 <__NVIC_SetPriority+0x4c>)
 8002216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800221a:	0112      	lsls	r2, r2, #4
 800221c:	b2d2      	uxtb	r2, r2
 800221e:	440b      	add	r3, r1
 8002220:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002224:	e00a      	b.n	800223c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	b2da      	uxtb	r2, r3
 800222a:	4908      	ldr	r1, [pc, #32]	; (800224c <__NVIC_SetPriority+0x50>)
 800222c:	79fb      	ldrb	r3, [r7, #7]
 800222e:	f003 030f 	and.w	r3, r3, #15
 8002232:	3b04      	subs	r3, #4
 8002234:	0112      	lsls	r2, r2, #4
 8002236:	b2d2      	uxtb	r2, r2
 8002238:	440b      	add	r3, r1
 800223a:	761a      	strb	r2, [r3, #24]
}
 800223c:	bf00      	nop
 800223e:	370c      	adds	r7, #12
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr
 8002248:	e000e100 	.word	0xe000e100
 800224c:	e000ed00 	.word	0xe000ed00

08002250 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002250:	b480      	push	{r7}
 8002252:	b089      	sub	sp, #36	; 0x24
 8002254:	af00      	add	r7, sp, #0
 8002256:	60f8      	str	r0, [r7, #12]
 8002258:	60b9      	str	r1, [r7, #8]
 800225a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	f003 0307 	and.w	r3, r3, #7
 8002262:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	f1c3 0307 	rsb	r3, r3, #7
 800226a:	2b04      	cmp	r3, #4
 800226c:	bf28      	it	cs
 800226e:	2304      	movcs	r3, #4
 8002270:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	3304      	adds	r3, #4
 8002276:	2b06      	cmp	r3, #6
 8002278:	d902      	bls.n	8002280 <NVIC_EncodePriority+0x30>
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	3b03      	subs	r3, #3
 800227e:	e000      	b.n	8002282 <NVIC_EncodePriority+0x32>
 8002280:	2300      	movs	r3, #0
 8002282:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002284:	f04f 32ff 	mov.w	r2, #4294967295
 8002288:	69bb      	ldr	r3, [r7, #24]
 800228a:	fa02 f303 	lsl.w	r3, r2, r3
 800228e:	43da      	mvns	r2, r3
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	401a      	ands	r2, r3
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002298:	f04f 31ff 	mov.w	r1, #4294967295
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	fa01 f303 	lsl.w	r3, r1, r3
 80022a2:	43d9      	mvns	r1, r3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022a8:	4313      	orrs	r3, r2
         );
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3724      	adds	r7, #36	; 0x24
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr
	...

080022b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	3b01      	subs	r3, #1
 80022c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022c8:	d301      	bcc.n	80022ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022ca:	2301      	movs	r3, #1
 80022cc:	e00f      	b.n	80022ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022ce:	4a0a      	ldr	r2, [pc, #40]	; (80022f8 <SysTick_Config+0x40>)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	3b01      	subs	r3, #1
 80022d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022d6:	210f      	movs	r1, #15
 80022d8:	f04f 30ff 	mov.w	r0, #4294967295
 80022dc:	f7ff ff8e 	bl	80021fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022e0:	4b05      	ldr	r3, [pc, #20]	; (80022f8 <SysTick_Config+0x40>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022e6:	4b04      	ldr	r3, [pc, #16]	; (80022f8 <SysTick_Config+0x40>)
 80022e8:	2207      	movs	r2, #7
 80022ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022ec:	2300      	movs	r3, #0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3708      	adds	r7, #8
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	e000e010 	.word	0xe000e010

080022fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f7ff ff29 	bl	800215c <__NVIC_SetPriorityGrouping>
}
 800230a:	bf00      	nop
 800230c:	3708      	adds	r7, #8
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}

08002312 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002312:	b580      	push	{r7, lr}
 8002314:	b086      	sub	sp, #24
 8002316:	af00      	add	r7, sp, #0
 8002318:	4603      	mov	r3, r0
 800231a:	60b9      	str	r1, [r7, #8]
 800231c:	607a      	str	r2, [r7, #4]
 800231e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002320:	2300      	movs	r3, #0
 8002322:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002324:	f7ff ff3e 	bl	80021a4 <__NVIC_GetPriorityGrouping>
 8002328:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	68b9      	ldr	r1, [r7, #8]
 800232e:	6978      	ldr	r0, [r7, #20]
 8002330:	f7ff ff8e 	bl	8002250 <NVIC_EncodePriority>
 8002334:	4602      	mov	r2, r0
 8002336:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800233a:	4611      	mov	r1, r2
 800233c:	4618      	mov	r0, r3
 800233e:	f7ff ff5d 	bl	80021fc <__NVIC_SetPriority>
}
 8002342:	bf00      	nop
 8002344:	3718      	adds	r7, #24
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}

0800234a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800234a:	b580      	push	{r7, lr}
 800234c:	b082      	sub	sp, #8
 800234e:	af00      	add	r7, sp, #0
 8002350:	4603      	mov	r3, r0
 8002352:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002354:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002358:	4618      	mov	r0, r3
 800235a:	f7ff ff31 	bl	80021c0 <__NVIC_EnableIRQ>
}
 800235e:	bf00      	nop
 8002360:	3708      	adds	r7, #8
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}

08002366 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002366:	b580      	push	{r7, lr}
 8002368:	b082      	sub	sp, #8
 800236a:	af00      	add	r7, sp, #0
 800236c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f7ff ffa2 	bl	80022b8 <SysTick_Config>
 8002374:	4603      	mov	r3, r0
}
 8002376:	4618      	mov	r0, r3
 8002378:	3708      	adds	r7, #8
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
	...

08002380 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002380:	b480      	push	{r7}
 8002382:	b089      	sub	sp, #36	; 0x24
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800238a:	2300      	movs	r3, #0
 800238c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800238e:	2300      	movs	r3, #0
 8002390:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002392:	2300      	movs	r3, #0
 8002394:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002396:	2300      	movs	r3, #0
 8002398:	61fb      	str	r3, [r7, #28]
 800239a:	e16b      	b.n	8002674 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800239c:	2201      	movs	r2, #1
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	fa02 f303 	lsl.w	r3, r2, r3
 80023a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	697a      	ldr	r2, [r7, #20]
 80023ac:	4013      	ands	r3, r2
 80023ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023b0:	693a      	ldr	r2, [r7, #16]
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	f040 815a 	bne.w	800266e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f003 0303 	and.w	r3, r3, #3
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d005      	beq.n	80023d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023ce:	2b02      	cmp	r3, #2
 80023d0:	d130      	bne.n	8002434 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	005b      	lsls	r3, r3, #1
 80023dc:	2203      	movs	r2, #3
 80023de:	fa02 f303 	lsl.w	r3, r2, r3
 80023e2:	43db      	mvns	r3, r3
 80023e4:	69ba      	ldr	r2, [r7, #24]
 80023e6:	4013      	ands	r3, r2
 80023e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	68da      	ldr	r2, [r3, #12]
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	005b      	lsls	r3, r3, #1
 80023f2:	fa02 f303 	lsl.w	r3, r2, r3
 80023f6:	69ba      	ldr	r2, [r7, #24]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	69ba      	ldr	r2, [r7, #24]
 8002400:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002408:	2201      	movs	r2, #1
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	fa02 f303 	lsl.w	r3, r2, r3
 8002410:	43db      	mvns	r3, r3
 8002412:	69ba      	ldr	r2, [r7, #24]
 8002414:	4013      	ands	r3, r2
 8002416:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	091b      	lsrs	r3, r3, #4
 800241e:	f003 0201 	and.w	r2, r3, #1
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	fa02 f303 	lsl.w	r3, r2, r3
 8002428:	69ba      	ldr	r2, [r7, #24]
 800242a:	4313      	orrs	r3, r2
 800242c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	69ba      	ldr	r2, [r7, #24]
 8002432:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f003 0303 	and.w	r3, r3, #3
 800243c:	2b03      	cmp	r3, #3
 800243e:	d017      	beq.n	8002470 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	005b      	lsls	r3, r3, #1
 800244a:	2203      	movs	r2, #3
 800244c:	fa02 f303 	lsl.w	r3, r2, r3
 8002450:	43db      	mvns	r3, r3
 8002452:	69ba      	ldr	r2, [r7, #24]
 8002454:	4013      	ands	r3, r2
 8002456:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	689a      	ldr	r2, [r3, #8]
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	005b      	lsls	r3, r3, #1
 8002460:	fa02 f303 	lsl.w	r3, r2, r3
 8002464:	69ba      	ldr	r2, [r7, #24]
 8002466:	4313      	orrs	r3, r2
 8002468:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f003 0303 	and.w	r3, r3, #3
 8002478:	2b02      	cmp	r3, #2
 800247a:	d123      	bne.n	80024c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	08da      	lsrs	r2, r3, #3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	3208      	adds	r2, #8
 8002484:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002488:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	f003 0307 	and.w	r3, r3, #7
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	220f      	movs	r2, #15
 8002494:	fa02 f303 	lsl.w	r3, r2, r3
 8002498:	43db      	mvns	r3, r3
 800249a:	69ba      	ldr	r2, [r7, #24]
 800249c:	4013      	ands	r3, r2
 800249e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	691a      	ldr	r2, [r3, #16]
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	f003 0307 	and.w	r3, r3, #7
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	fa02 f303 	lsl.w	r3, r2, r3
 80024b0:	69ba      	ldr	r2, [r7, #24]
 80024b2:	4313      	orrs	r3, r2
 80024b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	08da      	lsrs	r2, r3, #3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	3208      	adds	r2, #8
 80024be:	69b9      	ldr	r1, [r7, #24]
 80024c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	005b      	lsls	r3, r3, #1
 80024ce:	2203      	movs	r2, #3
 80024d0:	fa02 f303 	lsl.w	r3, r2, r3
 80024d4:	43db      	mvns	r3, r3
 80024d6:	69ba      	ldr	r2, [r7, #24]
 80024d8:	4013      	ands	r3, r2
 80024da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f003 0203 	and.w	r2, r3, #3
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	005b      	lsls	r3, r3, #1
 80024e8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ec:	69ba      	ldr	r2, [r7, #24]
 80024ee:	4313      	orrs	r3, r2
 80024f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002500:	2b00      	cmp	r3, #0
 8002502:	f000 80b4 	beq.w	800266e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002506:	2300      	movs	r3, #0
 8002508:	60fb      	str	r3, [r7, #12]
 800250a:	4b60      	ldr	r3, [pc, #384]	; (800268c <HAL_GPIO_Init+0x30c>)
 800250c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800250e:	4a5f      	ldr	r2, [pc, #380]	; (800268c <HAL_GPIO_Init+0x30c>)
 8002510:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002514:	6453      	str	r3, [r2, #68]	; 0x44
 8002516:	4b5d      	ldr	r3, [pc, #372]	; (800268c <HAL_GPIO_Init+0x30c>)
 8002518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800251a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800251e:	60fb      	str	r3, [r7, #12]
 8002520:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002522:	4a5b      	ldr	r2, [pc, #364]	; (8002690 <HAL_GPIO_Init+0x310>)
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	089b      	lsrs	r3, r3, #2
 8002528:	3302      	adds	r3, #2
 800252a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800252e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	f003 0303 	and.w	r3, r3, #3
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	220f      	movs	r2, #15
 800253a:	fa02 f303 	lsl.w	r3, r2, r3
 800253e:	43db      	mvns	r3, r3
 8002540:	69ba      	ldr	r2, [r7, #24]
 8002542:	4013      	ands	r3, r2
 8002544:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4a52      	ldr	r2, [pc, #328]	; (8002694 <HAL_GPIO_Init+0x314>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d02b      	beq.n	80025a6 <HAL_GPIO_Init+0x226>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4a51      	ldr	r2, [pc, #324]	; (8002698 <HAL_GPIO_Init+0x318>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d025      	beq.n	80025a2 <HAL_GPIO_Init+0x222>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4a50      	ldr	r2, [pc, #320]	; (800269c <HAL_GPIO_Init+0x31c>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d01f      	beq.n	800259e <HAL_GPIO_Init+0x21e>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4a4f      	ldr	r2, [pc, #316]	; (80026a0 <HAL_GPIO_Init+0x320>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d019      	beq.n	800259a <HAL_GPIO_Init+0x21a>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4a4e      	ldr	r2, [pc, #312]	; (80026a4 <HAL_GPIO_Init+0x324>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d013      	beq.n	8002596 <HAL_GPIO_Init+0x216>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4a4d      	ldr	r2, [pc, #308]	; (80026a8 <HAL_GPIO_Init+0x328>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d00d      	beq.n	8002592 <HAL_GPIO_Init+0x212>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4a4c      	ldr	r2, [pc, #304]	; (80026ac <HAL_GPIO_Init+0x32c>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d007      	beq.n	800258e <HAL_GPIO_Init+0x20e>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4a4b      	ldr	r2, [pc, #300]	; (80026b0 <HAL_GPIO_Init+0x330>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d101      	bne.n	800258a <HAL_GPIO_Init+0x20a>
 8002586:	2307      	movs	r3, #7
 8002588:	e00e      	b.n	80025a8 <HAL_GPIO_Init+0x228>
 800258a:	2308      	movs	r3, #8
 800258c:	e00c      	b.n	80025a8 <HAL_GPIO_Init+0x228>
 800258e:	2306      	movs	r3, #6
 8002590:	e00a      	b.n	80025a8 <HAL_GPIO_Init+0x228>
 8002592:	2305      	movs	r3, #5
 8002594:	e008      	b.n	80025a8 <HAL_GPIO_Init+0x228>
 8002596:	2304      	movs	r3, #4
 8002598:	e006      	b.n	80025a8 <HAL_GPIO_Init+0x228>
 800259a:	2303      	movs	r3, #3
 800259c:	e004      	b.n	80025a8 <HAL_GPIO_Init+0x228>
 800259e:	2302      	movs	r3, #2
 80025a0:	e002      	b.n	80025a8 <HAL_GPIO_Init+0x228>
 80025a2:	2301      	movs	r3, #1
 80025a4:	e000      	b.n	80025a8 <HAL_GPIO_Init+0x228>
 80025a6:	2300      	movs	r3, #0
 80025a8:	69fa      	ldr	r2, [r7, #28]
 80025aa:	f002 0203 	and.w	r2, r2, #3
 80025ae:	0092      	lsls	r2, r2, #2
 80025b0:	4093      	lsls	r3, r2
 80025b2:	69ba      	ldr	r2, [r7, #24]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025b8:	4935      	ldr	r1, [pc, #212]	; (8002690 <HAL_GPIO_Init+0x310>)
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	089b      	lsrs	r3, r3, #2
 80025be:	3302      	adds	r3, #2
 80025c0:	69ba      	ldr	r2, [r7, #24]
 80025c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025c6:	4b3b      	ldr	r3, [pc, #236]	; (80026b4 <HAL_GPIO_Init+0x334>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	43db      	mvns	r3, r3
 80025d0:	69ba      	ldr	r2, [r7, #24]
 80025d2:	4013      	ands	r3, r2
 80025d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d003      	beq.n	80025ea <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80025e2:	69ba      	ldr	r2, [r7, #24]
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025ea:	4a32      	ldr	r2, [pc, #200]	; (80026b4 <HAL_GPIO_Init+0x334>)
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80025f0:	4b30      	ldr	r3, [pc, #192]	; (80026b4 <HAL_GPIO_Init+0x334>)
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	43db      	mvns	r3, r3
 80025fa:	69ba      	ldr	r2, [r7, #24]
 80025fc:	4013      	ands	r3, r2
 80025fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002608:	2b00      	cmp	r3, #0
 800260a:	d003      	beq.n	8002614 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800260c:	69ba      	ldr	r2, [r7, #24]
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	4313      	orrs	r3, r2
 8002612:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002614:	4a27      	ldr	r2, [pc, #156]	; (80026b4 <HAL_GPIO_Init+0x334>)
 8002616:	69bb      	ldr	r3, [r7, #24]
 8002618:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800261a:	4b26      	ldr	r3, [pc, #152]	; (80026b4 <HAL_GPIO_Init+0x334>)
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	43db      	mvns	r3, r3
 8002624:	69ba      	ldr	r2, [r7, #24]
 8002626:	4013      	ands	r3, r2
 8002628:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d003      	beq.n	800263e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002636:	69ba      	ldr	r2, [r7, #24]
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	4313      	orrs	r3, r2
 800263c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800263e:	4a1d      	ldr	r2, [pc, #116]	; (80026b4 <HAL_GPIO_Init+0x334>)
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002644:	4b1b      	ldr	r3, [pc, #108]	; (80026b4 <HAL_GPIO_Init+0x334>)
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	43db      	mvns	r3, r3
 800264e:	69ba      	ldr	r2, [r7, #24]
 8002650:	4013      	ands	r3, r2
 8002652:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800265c:	2b00      	cmp	r3, #0
 800265e:	d003      	beq.n	8002668 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002660:	69ba      	ldr	r2, [r7, #24]
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	4313      	orrs	r3, r2
 8002666:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002668:	4a12      	ldr	r2, [pc, #72]	; (80026b4 <HAL_GPIO_Init+0x334>)
 800266a:	69bb      	ldr	r3, [r7, #24]
 800266c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	3301      	adds	r3, #1
 8002672:	61fb      	str	r3, [r7, #28]
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	2b0f      	cmp	r3, #15
 8002678:	f67f ae90 	bls.w	800239c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800267c:	bf00      	nop
 800267e:	bf00      	nop
 8002680:	3724      	adds	r7, #36	; 0x24
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	40023800 	.word	0x40023800
 8002690:	40013800 	.word	0x40013800
 8002694:	40020000 	.word	0x40020000
 8002698:	40020400 	.word	0x40020400
 800269c:	40020800 	.word	0x40020800
 80026a0:	40020c00 	.word	0x40020c00
 80026a4:	40021000 	.word	0x40021000
 80026a8:	40021400 	.word	0x40021400
 80026ac:	40021800 	.word	0x40021800
 80026b0:	40021c00 	.word	0x40021c00
 80026b4:	40013c00 	.word	0x40013c00

080026b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b085      	sub	sp, #20
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	460b      	mov	r3, r1
 80026c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	691a      	ldr	r2, [r3, #16]
 80026c8:	887b      	ldrh	r3, [r7, #2]
 80026ca:	4013      	ands	r3, r2
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d002      	beq.n	80026d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80026d0:	2301      	movs	r3, #1
 80026d2:	73fb      	strb	r3, [r7, #15]
 80026d4:	e001      	b.n	80026da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80026d6:	2300      	movs	r3, #0
 80026d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80026da:	7bfb      	ldrb	r3, [r7, #15]
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3714      	adds	r7, #20
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr

080026e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	460b      	mov	r3, r1
 80026f2:	807b      	strh	r3, [r7, #2]
 80026f4:	4613      	mov	r3, r2
 80026f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026f8:	787b      	ldrb	r3, [r7, #1]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d003      	beq.n	8002706 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026fe:	887a      	ldrh	r2, [r7, #2]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002704:	e003      	b.n	800270e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002706:	887b      	ldrh	r3, [r7, #2]
 8002708:	041a      	lsls	r2, r3, #16
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	619a      	str	r2, [r3, #24]
}
 800270e:	bf00      	nop
 8002710:	370c      	adds	r7, #12
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr

0800271a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800271a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800271c:	b08f      	sub	sp, #60	; 0x3c
 800271e:	af0a      	add	r7, sp, #40	; 0x28
 8002720:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d101      	bne.n	800272c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e054      	b.n	80027d6 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8002738:	b2db      	uxtb	r3, r3
 800273a:	2b00      	cmp	r3, #0
 800273c:	d106      	bne.n	800274c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f006 fb98 	bl	8008e7c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2203      	movs	r2, #3
 8002750:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002758:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800275c:	2b00      	cmp	r3, #0
 800275e:	d102      	bne.n	8002766 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2200      	movs	r2, #0
 8002764:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4618      	mov	r0, r3
 800276c:	f003 fcee 	bl	800614c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	603b      	str	r3, [r7, #0]
 8002776:	687e      	ldr	r6, [r7, #4]
 8002778:	466d      	mov	r5, sp
 800277a:	f106 0410 	add.w	r4, r6, #16
 800277e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002780:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002782:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002784:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002786:	e894 0003 	ldmia.w	r4, {r0, r1}
 800278a:	e885 0003 	stmia.w	r5, {r0, r1}
 800278e:	1d33      	adds	r3, r6, #4
 8002790:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002792:	6838      	ldr	r0, [r7, #0]
 8002794:	f003 fc68 	bl	8006068 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	2101      	movs	r1, #1
 800279e:	4618      	mov	r0, r3
 80027a0:	f003 fce5 	bl	800616e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	603b      	str	r3, [r7, #0]
 80027aa:	687e      	ldr	r6, [r7, #4]
 80027ac:	466d      	mov	r5, sp
 80027ae:	f106 0410 	add.w	r4, r6, #16
 80027b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027ba:	e894 0003 	ldmia.w	r4, {r0, r1}
 80027be:	e885 0003 	stmia.w	r5, {r0, r1}
 80027c2:	1d33      	adds	r3, r6, #4
 80027c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027c6:	6838      	ldr	r0, [r7, #0]
 80027c8:	f003 fe4c 	bl	8006464 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2201      	movs	r2, #1
 80027d0:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80027d4:	2300      	movs	r3, #0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3714      	adds	r7, #20
 80027da:	46bd      	mov	sp, r7
 80027dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080027de <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80027de:	b590      	push	{r4, r7, lr}
 80027e0:	b089      	sub	sp, #36	; 0x24
 80027e2:	af04      	add	r7, sp, #16
 80027e4:	6078      	str	r0, [r7, #4]
 80027e6:	4608      	mov	r0, r1
 80027e8:	4611      	mov	r1, r2
 80027ea:	461a      	mov	r2, r3
 80027ec:	4603      	mov	r3, r0
 80027ee:	70fb      	strb	r3, [r7, #3]
 80027f0:	460b      	mov	r3, r1
 80027f2:	70bb      	strb	r3, [r7, #2]
 80027f4:	4613      	mov	r3, r2
 80027f6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d101      	bne.n	8002806 <HAL_HCD_HC_Init+0x28>
 8002802:	2302      	movs	r3, #2
 8002804:	e076      	b.n	80028f4 <HAL_HCD_HC_Init+0x116>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2201      	movs	r2, #1
 800280a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800280e:	78fb      	ldrb	r3, [r7, #3]
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	212c      	movs	r1, #44	; 0x2c
 8002814:	fb01 f303 	mul.w	r3, r1, r3
 8002818:	4413      	add	r3, r2
 800281a:	333d      	adds	r3, #61	; 0x3d
 800281c:	2200      	movs	r2, #0
 800281e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002820:	78fb      	ldrb	r3, [r7, #3]
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	212c      	movs	r1, #44	; 0x2c
 8002826:	fb01 f303 	mul.w	r3, r1, r3
 800282a:	4413      	add	r3, r2
 800282c:	3338      	adds	r3, #56	; 0x38
 800282e:	787a      	ldrb	r2, [r7, #1]
 8002830:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002832:	78fb      	ldrb	r3, [r7, #3]
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	212c      	movs	r1, #44	; 0x2c
 8002838:	fb01 f303 	mul.w	r3, r1, r3
 800283c:	4413      	add	r3, r2
 800283e:	3340      	adds	r3, #64	; 0x40
 8002840:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002842:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002844:	78fb      	ldrb	r3, [r7, #3]
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	212c      	movs	r1, #44	; 0x2c
 800284a:	fb01 f303 	mul.w	r3, r1, r3
 800284e:	4413      	add	r3, r2
 8002850:	3339      	adds	r3, #57	; 0x39
 8002852:	78fa      	ldrb	r2, [r7, #3]
 8002854:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002856:	78fb      	ldrb	r3, [r7, #3]
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	212c      	movs	r1, #44	; 0x2c
 800285c:	fb01 f303 	mul.w	r3, r1, r3
 8002860:	4413      	add	r3, r2
 8002862:	333f      	adds	r3, #63	; 0x3f
 8002864:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002868:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800286a:	78fb      	ldrb	r3, [r7, #3]
 800286c:	78ba      	ldrb	r2, [r7, #2]
 800286e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002872:	b2d0      	uxtb	r0, r2
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	212c      	movs	r1, #44	; 0x2c
 8002878:	fb01 f303 	mul.w	r3, r1, r3
 800287c:	4413      	add	r3, r2
 800287e:	333a      	adds	r3, #58	; 0x3a
 8002880:	4602      	mov	r2, r0
 8002882:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002884:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002888:	2b00      	cmp	r3, #0
 800288a:	da09      	bge.n	80028a0 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800288c:	78fb      	ldrb	r3, [r7, #3]
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	212c      	movs	r1, #44	; 0x2c
 8002892:	fb01 f303 	mul.w	r3, r1, r3
 8002896:	4413      	add	r3, r2
 8002898:	333b      	adds	r3, #59	; 0x3b
 800289a:	2201      	movs	r2, #1
 800289c:	701a      	strb	r2, [r3, #0]
 800289e:	e008      	b.n	80028b2 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80028a0:	78fb      	ldrb	r3, [r7, #3]
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	212c      	movs	r1, #44	; 0x2c
 80028a6:	fb01 f303 	mul.w	r3, r1, r3
 80028aa:	4413      	add	r3, r2
 80028ac:	333b      	adds	r3, #59	; 0x3b
 80028ae:	2200      	movs	r2, #0
 80028b0:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80028b2:	78fb      	ldrb	r3, [r7, #3]
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	212c      	movs	r1, #44	; 0x2c
 80028b8:	fb01 f303 	mul.w	r3, r1, r3
 80028bc:	4413      	add	r3, r2
 80028be:	333c      	adds	r3, #60	; 0x3c
 80028c0:	f897 2020 	ldrb.w	r2, [r7, #32]
 80028c4:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6818      	ldr	r0, [r3, #0]
 80028ca:	787c      	ldrb	r4, [r7, #1]
 80028cc:	78ba      	ldrb	r2, [r7, #2]
 80028ce:	78f9      	ldrb	r1, [r7, #3]
 80028d0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80028d2:	9302      	str	r3, [sp, #8]
 80028d4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80028d8:	9301      	str	r3, [sp, #4]
 80028da:	f897 3020 	ldrb.w	r3, [r7, #32]
 80028de:	9300      	str	r3, [sp, #0]
 80028e0:	4623      	mov	r3, r4
 80028e2:	f003 ff39 	bl	8006758 <USB_HC_Init>
 80028e6:	4603      	mov	r3, r0
 80028e8:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2200      	movs	r2, #0
 80028ee:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80028f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3714      	adds	r7, #20
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd90      	pop	{r4, r7, pc}

080028fc <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b084      	sub	sp, #16
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	460b      	mov	r3, r1
 8002906:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002908:	2300      	movs	r3, #0
 800290a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002912:	2b01      	cmp	r3, #1
 8002914:	d101      	bne.n	800291a <HAL_HCD_HC_Halt+0x1e>
 8002916:	2302      	movs	r3, #2
 8002918:	e00f      	b.n	800293a <HAL_HCD_HC_Halt+0x3e>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2201      	movs	r2, #1
 800291e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	78fa      	ldrb	r2, [r7, #3]
 8002928:	4611      	mov	r1, r2
 800292a:	4618      	mov	r0, r3
 800292c:	f004 f975 	bl	8006c1a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002938:	7bfb      	ldrb	r3, [r7, #15]
}
 800293a:	4618      	mov	r0, r3
 800293c:	3710      	adds	r7, #16
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
	...

08002944 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b082      	sub	sp, #8
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	4608      	mov	r0, r1
 800294e:	4611      	mov	r1, r2
 8002950:	461a      	mov	r2, r3
 8002952:	4603      	mov	r3, r0
 8002954:	70fb      	strb	r3, [r7, #3]
 8002956:	460b      	mov	r3, r1
 8002958:	70bb      	strb	r3, [r7, #2]
 800295a:	4613      	mov	r3, r2
 800295c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800295e:	78fb      	ldrb	r3, [r7, #3]
 8002960:	687a      	ldr	r2, [r7, #4]
 8002962:	212c      	movs	r1, #44	; 0x2c
 8002964:	fb01 f303 	mul.w	r3, r1, r3
 8002968:	4413      	add	r3, r2
 800296a:	333b      	adds	r3, #59	; 0x3b
 800296c:	78ba      	ldrb	r2, [r7, #2]
 800296e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002970:	78fb      	ldrb	r3, [r7, #3]
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	212c      	movs	r1, #44	; 0x2c
 8002976:	fb01 f303 	mul.w	r3, r1, r3
 800297a:	4413      	add	r3, r2
 800297c:	333f      	adds	r3, #63	; 0x3f
 800297e:	787a      	ldrb	r2, [r7, #1]
 8002980:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002982:	7c3b      	ldrb	r3, [r7, #16]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d112      	bne.n	80029ae <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002988:	78fb      	ldrb	r3, [r7, #3]
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	212c      	movs	r1, #44	; 0x2c
 800298e:	fb01 f303 	mul.w	r3, r1, r3
 8002992:	4413      	add	r3, r2
 8002994:	3342      	adds	r3, #66	; 0x42
 8002996:	2203      	movs	r2, #3
 8002998:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800299a:	78fb      	ldrb	r3, [r7, #3]
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	212c      	movs	r1, #44	; 0x2c
 80029a0:	fb01 f303 	mul.w	r3, r1, r3
 80029a4:	4413      	add	r3, r2
 80029a6:	333d      	adds	r3, #61	; 0x3d
 80029a8:	7f3a      	ldrb	r2, [r7, #28]
 80029aa:	701a      	strb	r2, [r3, #0]
 80029ac:	e008      	b.n	80029c0 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80029ae:	78fb      	ldrb	r3, [r7, #3]
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	212c      	movs	r1, #44	; 0x2c
 80029b4:	fb01 f303 	mul.w	r3, r1, r3
 80029b8:	4413      	add	r3, r2
 80029ba:	3342      	adds	r3, #66	; 0x42
 80029bc:	2202      	movs	r2, #2
 80029be:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80029c0:	787b      	ldrb	r3, [r7, #1]
 80029c2:	2b03      	cmp	r3, #3
 80029c4:	f200 80c6 	bhi.w	8002b54 <HAL_HCD_HC_SubmitRequest+0x210>
 80029c8:	a201      	add	r2, pc, #4	; (adr r2, 80029d0 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80029ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029ce:	bf00      	nop
 80029d0:	080029e1 	.word	0x080029e1
 80029d4:	08002b41 	.word	0x08002b41
 80029d8:	08002a45 	.word	0x08002a45
 80029dc:	08002ac3 	.word	0x08002ac3
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80029e0:	7c3b      	ldrb	r3, [r7, #16]
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	f040 80b8 	bne.w	8002b58 <HAL_HCD_HC_SubmitRequest+0x214>
 80029e8:	78bb      	ldrb	r3, [r7, #2]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	f040 80b4 	bne.w	8002b58 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80029f0:	8b3b      	ldrh	r3, [r7, #24]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d108      	bne.n	8002a08 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80029f6:	78fb      	ldrb	r3, [r7, #3]
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	212c      	movs	r1, #44	; 0x2c
 80029fc:	fb01 f303 	mul.w	r3, r1, r3
 8002a00:	4413      	add	r3, r2
 8002a02:	3355      	adds	r3, #85	; 0x55
 8002a04:	2201      	movs	r2, #1
 8002a06:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002a08:	78fb      	ldrb	r3, [r7, #3]
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	212c      	movs	r1, #44	; 0x2c
 8002a0e:	fb01 f303 	mul.w	r3, r1, r3
 8002a12:	4413      	add	r3, r2
 8002a14:	3355      	adds	r3, #85	; 0x55
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d109      	bne.n	8002a30 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002a1c:	78fb      	ldrb	r3, [r7, #3]
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	212c      	movs	r1, #44	; 0x2c
 8002a22:	fb01 f303 	mul.w	r3, r1, r3
 8002a26:	4413      	add	r3, r2
 8002a28:	3342      	adds	r3, #66	; 0x42
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002a2e:	e093      	b.n	8002b58 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002a30:	78fb      	ldrb	r3, [r7, #3]
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	212c      	movs	r1, #44	; 0x2c
 8002a36:	fb01 f303 	mul.w	r3, r1, r3
 8002a3a:	4413      	add	r3, r2
 8002a3c:	3342      	adds	r3, #66	; 0x42
 8002a3e:	2202      	movs	r2, #2
 8002a40:	701a      	strb	r2, [r3, #0]
      break;
 8002a42:	e089      	b.n	8002b58 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002a44:	78bb      	ldrb	r3, [r7, #2]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d11d      	bne.n	8002a86 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002a4a:	78fb      	ldrb	r3, [r7, #3]
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	212c      	movs	r1, #44	; 0x2c
 8002a50:	fb01 f303 	mul.w	r3, r1, r3
 8002a54:	4413      	add	r3, r2
 8002a56:	3355      	adds	r3, #85	; 0x55
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d109      	bne.n	8002a72 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002a5e:	78fb      	ldrb	r3, [r7, #3]
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	212c      	movs	r1, #44	; 0x2c
 8002a64:	fb01 f303 	mul.w	r3, r1, r3
 8002a68:	4413      	add	r3, r2
 8002a6a:	3342      	adds	r3, #66	; 0x42
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002a70:	e073      	b.n	8002b5a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002a72:	78fb      	ldrb	r3, [r7, #3]
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	212c      	movs	r1, #44	; 0x2c
 8002a78:	fb01 f303 	mul.w	r3, r1, r3
 8002a7c:	4413      	add	r3, r2
 8002a7e:	3342      	adds	r3, #66	; 0x42
 8002a80:	2202      	movs	r2, #2
 8002a82:	701a      	strb	r2, [r3, #0]
      break;
 8002a84:	e069      	b.n	8002b5a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002a86:	78fb      	ldrb	r3, [r7, #3]
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	212c      	movs	r1, #44	; 0x2c
 8002a8c:	fb01 f303 	mul.w	r3, r1, r3
 8002a90:	4413      	add	r3, r2
 8002a92:	3354      	adds	r3, #84	; 0x54
 8002a94:	781b      	ldrb	r3, [r3, #0]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d109      	bne.n	8002aae <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002a9a:	78fb      	ldrb	r3, [r7, #3]
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	212c      	movs	r1, #44	; 0x2c
 8002aa0:	fb01 f303 	mul.w	r3, r1, r3
 8002aa4:	4413      	add	r3, r2
 8002aa6:	3342      	adds	r3, #66	; 0x42
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	701a      	strb	r2, [r3, #0]
      break;
 8002aac:	e055      	b.n	8002b5a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002aae:	78fb      	ldrb	r3, [r7, #3]
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	212c      	movs	r1, #44	; 0x2c
 8002ab4:	fb01 f303 	mul.w	r3, r1, r3
 8002ab8:	4413      	add	r3, r2
 8002aba:	3342      	adds	r3, #66	; 0x42
 8002abc:	2202      	movs	r2, #2
 8002abe:	701a      	strb	r2, [r3, #0]
      break;
 8002ac0:	e04b      	b.n	8002b5a <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002ac2:	78bb      	ldrb	r3, [r7, #2]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d11d      	bne.n	8002b04 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002ac8:	78fb      	ldrb	r3, [r7, #3]
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	212c      	movs	r1, #44	; 0x2c
 8002ace:	fb01 f303 	mul.w	r3, r1, r3
 8002ad2:	4413      	add	r3, r2
 8002ad4:	3355      	adds	r3, #85	; 0x55
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d109      	bne.n	8002af0 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002adc:	78fb      	ldrb	r3, [r7, #3]
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	212c      	movs	r1, #44	; 0x2c
 8002ae2:	fb01 f303 	mul.w	r3, r1, r3
 8002ae6:	4413      	add	r3, r2
 8002ae8:	3342      	adds	r3, #66	; 0x42
 8002aea:	2200      	movs	r2, #0
 8002aec:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002aee:	e034      	b.n	8002b5a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002af0:	78fb      	ldrb	r3, [r7, #3]
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	212c      	movs	r1, #44	; 0x2c
 8002af6:	fb01 f303 	mul.w	r3, r1, r3
 8002afa:	4413      	add	r3, r2
 8002afc:	3342      	adds	r3, #66	; 0x42
 8002afe:	2202      	movs	r2, #2
 8002b00:	701a      	strb	r2, [r3, #0]
      break;
 8002b02:	e02a      	b.n	8002b5a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002b04:	78fb      	ldrb	r3, [r7, #3]
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	212c      	movs	r1, #44	; 0x2c
 8002b0a:	fb01 f303 	mul.w	r3, r1, r3
 8002b0e:	4413      	add	r3, r2
 8002b10:	3354      	adds	r3, #84	; 0x54
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d109      	bne.n	8002b2c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002b18:	78fb      	ldrb	r3, [r7, #3]
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	212c      	movs	r1, #44	; 0x2c
 8002b1e:	fb01 f303 	mul.w	r3, r1, r3
 8002b22:	4413      	add	r3, r2
 8002b24:	3342      	adds	r3, #66	; 0x42
 8002b26:	2200      	movs	r2, #0
 8002b28:	701a      	strb	r2, [r3, #0]
      break;
 8002b2a:	e016      	b.n	8002b5a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002b2c:	78fb      	ldrb	r3, [r7, #3]
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	212c      	movs	r1, #44	; 0x2c
 8002b32:	fb01 f303 	mul.w	r3, r1, r3
 8002b36:	4413      	add	r3, r2
 8002b38:	3342      	adds	r3, #66	; 0x42
 8002b3a:	2202      	movs	r2, #2
 8002b3c:	701a      	strb	r2, [r3, #0]
      break;
 8002b3e:	e00c      	b.n	8002b5a <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002b40:	78fb      	ldrb	r3, [r7, #3]
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	212c      	movs	r1, #44	; 0x2c
 8002b46:	fb01 f303 	mul.w	r3, r1, r3
 8002b4a:	4413      	add	r3, r2
 8002b4c:	3342      	adds	r3, #66	; 0x42
 8002b4e:	2200      	movs	r2, #0
 8002b50:	701a      	strb	r2, [r3, #0]
      break;
 8002b52:	e002      	b.n	8002b5a <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002b54:	bf00      	nop
 8002b56:	e000      	b.n	8002b5a <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8002b58:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002b5a:	78fb      	ldrb	r3, [r7, #3]
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	212c      	movs	r1, #44	; 0x2c
 8002b60:	fb01 f303 	mul.w	r3, r1, r3
 8002b64:	4413      	add	r3, r2
 8002b66:	3344      	adds	r3, #68	; 0x44
 8002b68:	697a      	ldr	r2, [r7, #20]
 8002b6a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002b6c:	78fb      	ldrb	r3, [r7, #3]
 8002b6e:	8b3a      	ldrh	r2, [r7, #24]
 8002b70:	6879      	ldr	r1, [r7, #4]
 8002b72:	202c      	movs	r0, #44	; 0x2c
 8002b74:	fb00 f303 	mul.w	r3, r0, r3
 8002b78:	440b      	add	r3, r1
 8002b7a:	334c      	adds	r3, #76	; 0x4c
 8002b7c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002b7e:	78fb      	ldrb	r3, [r7, #3]
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	212c      	movs	r1, #44	; 0x2c
 8002b84:	fb01 f303 	mul.w	r3, r1, r3
 8002b88:	4413      	add	r3, r2
 8002b8a:	3360      	adds	r3, #96	; 0x60
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002b90:	78fb      	ldrb	r3, [r7, #3]
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	212c      	movs	r1, #44	; 0x2c
 8002b96:	fb01 f303 	mul.w	r3, r1, r3
 8002b9a:	4413      	add	r3, r2
 8002b9c:	3350      	adds	r3, #80	; 0x50
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002ba2:	78fb      	ldrb	r3, [r7, #3]
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	212c      	movs	r1, #44	; 0x2c
 8002ba8:	fb01 f303 	mul.w	r3, r1, r3
 8002bac:	4413      	add	r3, r2
 8002bae:	3339      	adds	r3, #57	; 0x39
 8002bb0:	78fa      	ldrb	r2, [r7, #3]
 8002bb2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002bb4:	78fb      	ldrb	r3, [r7, #3]
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	212c      	movs	r1, #44	; 0x2c
 8002bba:	fb01 f303 	mul.w	r3, r1, r3
 8002bbe:	4413      	add	r3, r2
 8002bc0:	3361      	adds	r3, #97	; 0x61
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6818      	ldr	r0, [r3, #0]
 8002bca:	78fb      	ldrb	r3, [r7, #3]
 8002bcc:	222c      	movs	r2, #44	; 0x2c
 8002bce:	fb02 f303 	mul.w	r3, r2, r3
 8002bd2:	3338      	adds	r3, #56	; 0x38
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	18d1      	adds	r1, r2, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	691b      	ldr	r3, [r3, #16]
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	461a      	mov	r2, r3
 8002be0:	f003 fec8 	bl	8006974 <USB_HC_StartXfer>
 8002be4:	4603      	mov	r3, r0
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3708      	adds	r7, #8
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop

08002bf0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b086      	sub	sp, #24
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4618      	mov	r0, r3
 8002c08:	f003 fbeb 	bl	80063e2 <USB_GetMode>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	f040 80f6 	bne.w	8002e00 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f003 fbcf 	bl	80063bc <USB_ReadInterrupts>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	f000 80ec 	beq.w	8002dfe <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f003 fbc6 	bl	80063bc <USB_ReadInterrupts>
 8002c30:	4603      	mov	r3, r0
 8002c32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c36:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c3a:	d104      	bne.n	8002c46 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002c44:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f003 fbb6 	bl	80063bc <USB_ReadInterrupts>
 8002c50:	4603      	mov	r3, r0
 8002c52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c5a:	d104      	bne.n	8002c66 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002c64:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f003 fba6 	bl	80063bc <USB_ReadInterrupts>
 8002c70:	4603      	mov	r3, r0
 8002c72:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c76:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c7a:	d104      	bne.n	8002c86 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002c84:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f003 fb96 	bl	80063bc <USB_ReadInterrupts>
 8002c90:	4603      	mov	r3, r0
 8002c92:	f003 0302 	and.w	r3, r3, #2
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d103      	bne.n	8002ca2 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	2202      	movs	r2, #2
 8002ca0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f003 fb88 	bl	80063bc <USB_ReadInterrupts>
 8002cac:	4603      	mov	r3, r0
 8002cae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002cb2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002cb6:	d11c      	bne.n	8002cf2 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002cc0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0301 	and.w	r3, r3, #1
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d10f      	bne.n	8002cf2 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002cd2:	2110      	movs	r1, #16
 8002cd4:	6938      	ldr	r0, [r7, #16]
 8002cd6:	f003 fa97 	bl	8006208 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002cda:	6938      	ldr	r0, [r7, #16]
 8002cdc:	f003 fab8 	bl	8006250 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	2101      	movs	r1, #1
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f003 fc70 	bl	80065cc <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	f006 f943 	bl	8008f78 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f003 fb60 	bl	80063bc <USB_ReadInterrupts>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d02:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d06:	d102      	bne.n	8002d0e <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f001 fa03 	bl	8004114 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4618      	mov	r0, r3
 8002d14:	f003 fb52 	bl	80063bc <USB_ReadInterrupts>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	f003 0308 	and.w	r3, r3, #8
 8002d1e:	2b08      	cmp	r3, #8
 8002d20:	d106      	bne.n	8002d30 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f006 f90c 	bl	8008f40 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	2208      	movs	r2, #8
 8002d2e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4618      	mov	r0, r3
 8002d36:	f003 fb41 	bl	80063bc <USB_ReadInterrupts>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	f003 0310 	and.w	r3, r3, #16
 8002d40:	2b10      	cmp	r3, #16
 8002d42:	d101      	bne.n	8002d48 <HAL_HCD_IRQHandler+0x158>
 8002d44:	2301      	movs	r3, #1
 8002d46:	e000      	b.n	8002d4a <HAL_HCD_IRQHandler+0x15a>
 8002d48:	2300      	movs	r3, #0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d012      	beq.n	8002d74 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	699a      	ldr	r2, [r3, #24]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f022 0210 	bic.w	r2, r2, #16
 8002d5c:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f001 f906 	bl	8003f70 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	699a      	ldr	r2, [r3, #24]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f042 0210 	orr.w	r2, r2, #16
 8002d72:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f003 fb1f 	bl	80063bc <USB_ReadInterrupts>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d84:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002d88:	d13a      	bne.n	8002e00 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f003 ff32 	bl	8006bf8 <USB_HC_ReadInterrupt>
 8002d94:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002d96:	2300      	movs	r3, #0
 8002d98:	617b      	str	r3, [r7, #20]
 8002d9a:	e025      	b.n	8002de8 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	f003 030f 	and.w	r3, r3, #15
 8002da2:	68ba      	ldr	r2, [r7, #8]
 8002da4:	fa22 f303 	lsr.w	r3, r2, r3
 8002da8:	f003 0301 	and.w	r3, r3, #1
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d018      	beq.n	8002de2 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	015a      	lsls	r2, r3, #5
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	4413      	add	r3, r2
 8002db8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002dc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002dc6:	d106      	bne.n	8002dd6 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	4619      	mov	r1, r3
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f000 f8ab 	bl	8002f2a <HCD_HC_IN_IRQHandler>
 8002dd4:	e005      	b.n	8002de2 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	4619      	mov	r1, r3
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f000 fcc6 	bl	800376e <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	3301      	adds	r3, #1
 8002de6:	617b      	str	r3, [r7, #20]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	697a      	ldr	r2, [r7, #20]
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d3d4      	bcc.n	8002d9c <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002dfa:	615a      	str	r2, [r3, #20]
 8002dfc:	e000      	b.n	8002e00 <HAL_HCD_IRQHandler+0x210>
      return;
 8002dfe:	bf00      	nop
    }
  }
}
 8002e00:	3718      	adds	r7, #24
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}

08002e06 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002e06:	b580      	push	{r7, lr}
 8002e08:	b082      	sub	sp, #8
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d101      	bne.n	8002e1c <HAL_HCD_Start+0x16>
 8002e18:	2302      	movs	r3, #2
 8002e1a:	e013      	b.n	8002e44 <HAL_HCD_Start+0x3e>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2201      	movs	r2, #1
 8002e20:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	2101      	movs	r1, #1
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f003 fc32 	bl	8006694 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4618      	mov	r0, r3
 8002e36:	f003 f978 	bl	800612a <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002e42:	2300      	movs	r3, #0
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3708      	adds	r7, #8
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b082      	sub	sp, #8
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d101      	bne.n	8002e62 <HAL_HCD_Stop+0x16>
 8002e5e:	2302      	movs	r3, #2
 8002e60:	e00d      	b.n	8002e7e <HAL_HCD_Stop+0x32>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2201      	movs	r2, #1
 8002e66:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f004 f82c 	bl	8006ecc <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002e7c:	2300      	movs	r3, #0
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3708      	adds	r7, #8
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}

08002e86 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002e86:	b580      	push	{r7, lr}
 8002e88:	b082      	sub	sp, #8
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4618      	mov	r0, r3
 8002e94:	f003 fbd4 	bl	8006640 <USB_ResetPort>
 8002e98:	4603      	mov	r3, r0
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3708      	adds	r7, #8
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}

08002ea2 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002ea2:	b480      	push	{r7}
 8002ea4:	b083      	sub	sp, #12
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	6078      	str	r0, [r7, #4]
 8002eaa:	460b      	mov	r3, r1
 8002eac:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002eae:	78fb      	ldrb	r3, [r7, #3]
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	212c      	movs	r1, #44	; 0x2c
 8002eb4:	fb01 f303 	mul.w	r3, r1, r3
 8002eb8:	4413      	add	r3, r2
 8002eba:	3360      	adds	r3, #96	; 0x60
 8002ebc:	781b      	ldrb	r3, [r3, #0]
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	370c      	adds	r7, #12
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr

08002eca <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002eca:	b480      	push	{r7}
 8002ecc:	b083      	sub	sp, #12
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	6078      	str	r0, [r7, #4]
 8002ed2:	460b      	mov	r3, r1
 8002ed4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002ed6:	78fb      	ldrb	r3, [r7, #3]
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	212c      	movs	r1, #44	; 0x2c
 8002edc:	fb01 f303 	mul.w	r3, r1, r3
 8002ee0:	4413      	add	r3, r2
 8002ee2:	3350      	adds	r3, #80	; 0x50
 8002ee4:	681b      	ldr	r3, [r3, #0]
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	370c      	adds	r7, #12
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr

08002ef2 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002ef2:	b580      	push	{r7, lr}
 8002ef4:	b082      	sub	sp, #8
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4618      	mov	r0, r3
 8002f00:	f003 fc18 	bl	8006734 <USB_GetCurrentFrame>
 8002f04:	4603      	mov	r3, r0
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3708      	adds	r7, #8
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}

08002f0e <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002f0e:	b580      	push	{r7, lr}
 8002f10:	b082      	sub	sp, #8
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f003 fbf3 	bl	8006706 <USB_GetHostSpeed>
 8002f20:	4603      	mov	r3, r0
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3708      	adds	r7, #8
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}

08002f2a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002f2a:	b580      	push	{r7, lr}
 8002f2c:	b086      	sub	sp, #24
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	6078      	str	r0, [r7, #4]
 8002f32:	460b      	mov	r3, r1
 8002f34:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002f40:	78fb      	ldrb	r3, [r7, #3]
 8002f42:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	015a      	lsls	r2, r3, #5
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	4413      	add	r3, r2
 8002f4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	f003 0304 	and.w	r3, r3, #4
 8002f56:	2b04      	cmp	r3, #4
 8002f58:	d119      	bne.n	8002f8e <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	015a      	lsls	r2, r3, #5
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	4413      	add	r3, r2
 8002f62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f66:	461a      	mov	r2, r3
 8002f68:	2304      	movs	r3, #4
 8002f6a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	015a      	lsls	r2, r3, #5
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	4413      	add	r3, r2
 8002f74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	68fa      	ldr	r2, [r7, #12]
 8002f7c:	0151      	lsls	r1, r2, #5
 8002f7e:	693a      	ldr	r2, [r7, #16]
 8002f80:	440a      	add	r2, r1
 8002f82:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f86:	f043 0302 	orr.w	r3, r3, #2
 8002f8a:	60d3      	str	r3, [r2, #12]
 8002f8c:	e101      	b.n	8003192 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	015a      	lsls	r2, r3, #5
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	4413      	add	r3, r2
 8002f96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fa0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fa4:	d12b      	bne.n	8002ffe <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	015a      	lsls	r2, r3, #5
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	4413      	add	r3, r2
 8002fae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002fb8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	212c      	movs	r1, #44	; 0x2c
 8002fc0:	fb01 f303 	mul.w	r3, r1, r3
 8002fc4:	4413      	add	r3, r2
 8002fc6:	3361      	adds	r3, #97	; 0x61
 8002fc8:	2207      	movs	r2, #7
 8002fca:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	015a      	lsls	r2, r3, #5
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	4413      	add	r3, r2
 8002fd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fd8:	68db      	ldr	r3, [r3, #12]
 8002fda:	68fa      	ldr	r2, [r7, #12]
 8002fdc:	0151      	lsls	r1, r2, #5
 8002fde:	693a      	ldr	r2, [r7, #16]
 8002fe0:	440a      	add	r2, r1
 8002fe2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002fe6:	f043 0302 	orr.w	r3, r3, #2
 8002fea:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	68fa      	ldr	r2, [r7, #12]
 8002ff2:	b2d2      	uxtb	r2, r2
 8002ff4:	4611      	mov	r1, r2
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f003 fe0f 	bl	8006c1a <USB_HC_Halt>
 8002ffc:	e0c9      	b.n	8003192 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	015a      	lsls	r2, r3, #5
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	4413      	add	r3, r2
 8003006:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	f003 0320 	and.w	r3, r3, #32
 8003010:	2b20      	cmp	r3, #32
 8003012:	d109      	bne.n	8003028 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	015a      	lsls	r2, r3, #5
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	4413      	add	r3, r2
 800301c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003020:	461a      	mov	r2, r3
 8003022:	2320      	movs	r3, #32
 8003024:	6093      	str	r3, [r2, #8]
 8003026:	e0b4      	b.n	8003192 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	015a      	lsls	r2, r3, #5
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	4413      	add	r3, r2
 8003030:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	f003 0308 	and.w	r3, r3, #8
 800303a:	2b08      	cmp	r3, #8
 800303c:	d133      	bne.n	80030a6 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	015a      	lsls	r2, r3, #5
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	4413      	add	r3, r2
 8003046:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	68fa      	ldr	r2, [r7, #12]
 800304e:	0151      	lsls	r1, r2, #5
 8003050:	693a      	ldr	r2, [r7, #16]
 8003052:	440a      	add	r2, r1
 8003054:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003058:	f043 0302 	orr.w	r3, r3, #2
 800305c:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	212c      	movs	r1, #44	; 0x2c
 8003064:	fb01 f303 	mul.w	r3, r1, r3
 8003068:	4413      	add	r3, r2
 800306a:	3361      	adds	r3, #97	; 0x61
 800306c:	2205      	movs	r2, #5
 800306e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	015a      	lsls	r2, r3, #5
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	4413      	add	r3, r2
 8003078:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800307c:	461a      	mov	r2, r3
 800307e:	2310      	movs	r3, #16
 8003080:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	015a      	lsls	r2, r3, #5
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	4413      	add	r3, r2
 800308a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800308e:	461a      	mov	r2, r3
 8003090:	2308      	movs	r3, #8
 8003092:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	68fa      	ldr	r2, [r7, #12]
 800309a:	b2d2      	uxtb	r2, r2
 800309c:	4611      	mov	r1, r2
 800309e:	4618      	mov	r0, r3
 80030a0:	f003 fdbb 	bl	8006c1a <USB_HC_Halt>
 80030a4:	e075      	b.n	8003192 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	015a      	lsls	r2, r3, #5
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	4413      	add	r3, r2
 80030ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030bc:	d134      	bne.n	8003128 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	015a      	lsls	r2, r3, #5
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	4413      	add	r3, r2
 80030c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	68fa      	ldr	r2, [r7, #12]
 80030ce:	0151      	lsls	r1, r2, #5
 80030d0:	693a      	ldr	r2, [r7, #16]
 80030d2:	440a      	add	r2, r1
 80030d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80030d8:	f043 0302 	orr.w	r3, r3, #2
 80030dc:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	212c      	movs	r1, #44	; 0x2c
 80030e4:	fb01 f303 	mul.w	r3, r1, r3
 80030e8:	4413      	add	r3, r2
 80030ea:	3361      	adds	r3, #97	; 0x61
 80030ec:	2208      	movs	r2, #8
 80030ee:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	015a      	lsls	r2, r3, #5
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	4413      	add	r3, r2
 80030f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030fc:	461a      	mov	r2, r3
 80030fe:	2310      	movs	r3, #16
 8003100:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	015a      	lsls	r2, r3, #5
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	4413      	add	r3, r2
 800310a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800310e:	461a      	mov	r2, r3
 8003110:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003114:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	68fa      	ldr	r2, [r7, #12]
 800311c:	b2d2      	uxtb	r2, r2
 800311e:	4611      	mov	r1, r2
 8003120:	4618      	mov	r0, r3
 8003122:	f003 fd7a 	bl	8006c1a <USB_HC_Halt>
 8003126:	e034      	b.n	8003192 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	015a      	lsls	r2, r3, #5
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	4413      	add	r3, r2
 8003130:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800313a:	2b80      	cmp	r3, #128	; 0x80
 800313c:	d129      	bne.n	8003192 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	015a      	lsls	r2, r3, #5
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	4413      	add	r3, r2
 8003146:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	68fa      	ldr	r2, [r7, #12]
 800314e:	0151      	lsls	r1, r2, #5
 8003150:	693a      	ldr	r2, [r7, #16]
 8003152:	440a      	add	r2, r1
 8003154:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003158:	f043 0302 	orr.w	r3, r3, #2
 800315c:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	212c      	movs	r1, #44	; 0x2c
 8003164:	fb01 f303 	mul.w	r3, r1, r3
 8003168:	4413      	add	r3, r2
 800316a:	3361      	adds	r3, #97	; 0x61
 800316c:	2206      	movs	r2, #6
 800316e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	68fa      	ldr	r2, [r7, #12]
 8003176:	b2d2      	uxtb	r2, r2
 8003178:	4611      	mov	r1, r2
 800317a:	4618      	mov	r0, r3
 800317c:	f003 fd4d 	bl	8006c1a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	015a      	lsls	r2, r3, #5
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	4413      	add	r3, r2
 8003188:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800318c:	461a      	mov	r2, r3
 800318e:	2380      	movs	r3, #128	; 0x80
 8003190:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	015a      	lsls	r2, r3, #5
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	4413      	add	r3, r2
 800319a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031a8:	d122      	bne.n	80031f0 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	015a      	lsls	r2, r3, #5
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	4413      	add	r3, r2
 80031b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	68fa      	ldr	r2, [r7, #12]
 80031ba:	0151      	lsls	r1, r2, #5
 80031bc:	693a      	ldr	r2, [r7, #16]
 80031be:	440a      	add	r2, r1
 80031c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80031c4:	f043 0302 	orr.w	r3, r3, #2
 80031c8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	68fa      	ldr	r2, [r7, #12]
 80031d0:	b2d2      	uxtb	r2, r2
 80031d2:	4611      	mov	r1, r2
 80031d4:	4618      	mov	r0, r3
 80031d6:	f003 fd20 	bl	8006c1a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	015a      	lsls	r2, r3, #5
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	4413      	add	r3, r2
 80031e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031e6:	461a      	mov	r2, r3
 80031e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80031ec:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80031ee:	e2ba      	b.n	8003766 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	015a      	lsls	r2, r3, #5
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	4413      	add	r3, r2
 80031f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	f003 0301 	and.w	r3, r3, #1
 8003202:	2b01      	cmp	r3, #1
 8003204:	f040 811b 	bne.w	800343e <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	691b      	ldr	r3, [r3, #16]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d019      	beq.n	8003244 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	212c      	movs	r1, #44	; 0x2c
 8003216:	fb01 f303 	mul.w	r3, r1, r3
 800321a:	4413      	add	r3, r2
 800321c:	3348      	adds	r3, #72	; 0x48
 800321e:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	0159      	lsls	r1, r3, #5
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	440b      	add	r3, r1
 8003228:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800322c:	691b      	ldr	r3, [r3, #16]
 800322e:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003232:	1ad2      	subs	r2, r2, r3
 8003234:	6879      	ldr	r1, [r7, #4]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	202c      	movs	r0, #44	; 0x2c
 800323a:	fb00 f303 	mul.w	r3, r0, r3
 800323e:	440b      	add	r3, r1
 8003240:	3350      	adds	r3, #80	; 0x50
 8003242:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003244:	687a      	ldr	r2, [r7, #4]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	212c      	movs	r1, #44	; 0x2c
 800324a:	fb01 f303 	mul.w	r3, r1, r3
 800324e:	4413      	add	r3, r2
 8003250:	3361      	adds	r3, #97	; 0x61
 8003252:	2201      	movs	r2, #1
 8003254:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	212c      	movs	r1, #44	; 0x2c
 800325c:	fb01 f303 	mul.w	r3, r1, r3
 8003260:	4413      	add	r3, r2
 8003262:	335c      	adds	r3, #92	; 0x5c
 8003264:	2200      	movs	r2, #0
 8003266:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	015a      	lsls	r2, r3, #5
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	4413      	add	r3, r2
 8003270:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003274:	461a      	mov	r2, r3
 8003276:	2301      	movs	r3, #1
 8003278:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	212c      	movs	r1, #44	; 0x2c
 8003280:	fb01 f303 	mul.w	r3, r1, r3
 8003284:	4413      	add	r3, r2
 8003286:	333f      	adds	r3, #63	; 0x3f
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d009      	beq.n	80032a2 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	212c      	movs	r1, #44	; 0x2c
 8003294:	fb01 f303 	mul.w	r3, r1, r3
 8003298:	4413      	add	r3, r2
 800329a:	333f      	adds	r3, #63	; 0x3f
 800329c:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d121      	bne.n	80032e6 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	015a      	lsls	r2, r3, #5
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	4413      	add	r3, r2
 80032aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	68fa      	ldr	r2, [r7, #12]
 80032b2:	0151      	lsls	r1, r2, #5
 80032b4:	693a      	ldr	r2, [r7, #16]
 80032b6:	440a      	add	r2, r1
 80032b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80032bc:	f043 0302 	orr.w	r3, r3, #2
 80032c0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	68fa      	ldr	r2, [r7, #12]
 80032c8:	b2d2      	uxtb	r2, r2
 80032ca:	4611      	mov	r1, r2
 80032cc:	4618      	mov	r0, r3
 80032ce:	f003 fca4 	bl	8006c1a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	015a      	lsls	r2, r3, #5
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	4413      	add	r3, r2
 80032da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032de:	461a      	mov	r2, r3
 80032e0:	2310      	movs	r3, #16
 80032e2:	6093      	str	r3, [r2, #8]
 80032e4:	e066      	b.n	80033b4 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	212c      	movs	r1, #44	; 0x2c
 80032ec:	fb01 f303 	mul.w	r3, r1, r3
 80032f0:	4413      	add	r3, r2
 80032f2:	333f      	adds	r3, #63	; 0x3f
 80032f4:	781b      	ldrb	r3, [r3, #0]
 80032f6:	2b03      	cmp	r3, #3
 80032f8:	d127      	bne.n	800334a <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	015a      	lsls	r2, r3, #5
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	4413      	add	r3, r2
 8003302:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	68fa      	ldr	r2, [r7, #12]
 800330a:	0151      	lsls	r1, r2, #5
 800330c:	693a      	ldr	r2, [r7, #16]
 800330e:	440a      	add	r2, r1
 8003310:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003314:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003318:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	212c      	movs	r1, #44	; 0x2c
 8003320:	fb01 f303 	mul.w	r3, r1, r3
 8003324:	4413      	add	r3, r2
 8003326:	3360      	adds	r3, #96	; 0x60
 8003328:	2201      	movs	r2, #1
 800332a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	b2d9      	uxtb	r1, r3
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	202c      	movs	r0, #44	; 0x2c
 8003336:	fb00 f303 	mul.w	r3, r0, r3
 800333a:	4413      	add	r3, r2
 800333c:	3360      	adds	r3, #96	; 0x60
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	461a      	mov	r2, r3
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f005 fe26 	bl	8008f94 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003348:	e034      	b.n	80033b4 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	212c      	movs	r1, #44	; 0x2c
 8003350:	fb01 f303 	mul.w	r3, r1, r3
 8003354:	4413      	add	r3, r2
 8003356:	333f      	adds	r3, #63	; 0x3f
 8003358:	781b      	ldrb	r3, [r3, #0]
 800335a:	2b01      	cmp	r3, #1
 800335c:	d12a      	bne.n	80033b4 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800335e:	687a      	ldr	r2, [r7, #4]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	212c      	movs	r1, #44	; 0x2c
 8003364:	fb01 f303 	mul.w	r3, r1, r3
 8003368:	4413      	add	r3, r2
 800336a:	3360      	adds	r3, #96	; 0x60
 800336c:	2201      	movs	r2, #1
 800336e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	212c      	movs	r1, #44	; 0x2c
 8003376:	fb01 f303 	mul.w	r3, r1, r3
 800337a:	4413      	add	r3, r2
 800337c:	3354      	adds	r3, #84	; 0x54
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	f083 0301 	eor.w	r3, r3, #1
 8003384:	b2d8      	uxtb	r0, r3
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	212c      	movs	r1, #44	; 0x2c
 800338c:	fb01 f303 	mul.w	r3, r1, r3
 8003390:	4413      	add	r3, r2
 8003392:	3354      	adds	r3, #84	; 0x54
 8003394:	4602      	mov	r2, r0
 8003396:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	b2d9      	uxtb	r1, r3
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	202c      	movs	r0, #44	; 0x2c
 80033a2:	fb00 f303 	mul.w	r3, r0, r3
 80033a6:	4413      	add	r3, r2
 80033a8:	3360      	adds	r3, #96	; 0x60
 80033aa:	781b      	ldrb	r3, [r3, #0]
 80033ac:	461a      	mov	r2, r3
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f005 fdf0 	bl	8008f94 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	691b      	ldr	r3, [r3, #16]
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d12b      	bne.n	8003414 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80033bc:	687a      	ldr	r2, [r7, #4]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	212c      	movs	r1, #44	; 0x2c
 80033c2:	fb01 f303 	mul.w	r3, r1, r3
 80033c6:	4413      	add	r3, r2
 80033c8:	3348      	adds	r3, #72	; 0x48
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	6879      	ldr	r1, [r7, #4]
 80033ce:	68fa      	ldr	r2, [r7, #12]
 80033d0:	202c      	movs	r0, #44	; 0x2c
 80033d2:	fb00 f202 	mul.w	r2, r0, r2
 80033d6:	440a      	add	r2, r1
 80033d8:	3240      	adds	r2, #64	; 0x40
 80033da:	8812      	ldrh	r2, [r2, #0]
 80033dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80033e0:	f003 0301 	and.w	r3, r3, #1
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	f000 81be 	beq.w	8003766 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	212c      	movs	r1, #44	; 0x2c
 80033f0:	fb01 f303 	mul.w	r3, r1, r3
 80033f4:	4413      	add	r3, r2
 80033f6:	3354      	adds	r3, #84	; 0x54
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	f083 0301 	eor.w	r3, r3, #1
 80033fe:	b2d8      	uxtb	r0, r3
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	212c      	movs	r1, #44	; 0x2c
 8003406:	fb01 f303 	mul.w	r3, r1, r3
 800340a:	4413      	add	r3, r2
 800340c:	3354      	adds	r3, #84	; 0x54
 800340e:	4602      	mov	r2, r0
 8003410:	701a      	strb	r2, [r3, #0]
}
 8003412:	e1a8      	b.n	8003766 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	212c      	movs	r1, #44	; 0x2c
 800341a:	fb01 f303 	mul.w	r3, r1, r3
 800341e:	4413      	add	r3, r2
 8003420:	3354      	adds	r3, #84	; 0x54
 8003422:	781b      	ldrb	r3, [r3, #0]
 8003424:	f083 0301 	eor.w	r3, r3, #1
 8003428:	b2d8      	uxtb	r0, r3
 800342a:	687a      	ldr	r2, [r7, #4]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	212c      	movs	r1, #44	; 0x2c
 8003430:	fb01 f303 	mul.w	r3, r1, r3
 8003434:	4413      	add	r3, r2
 8003436:	3354      	adds	r3, #84	; 0x54
 8003438:	4602      	mov	r2, r0
 800343a:	701a      	strb	r2, [r3, #0]
}
 800343c:	e193      	b.n	8003766 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	015a      	lsls	r2, r3, #5
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	4413      	add	r3, r2
 8003446:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	f003 0302 	and.w	r3, r3, #2
 8003450:	2b02      	cmp	r3, #2
 8003452:	f040 8106 	bne.w	8003662 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	015a      	lsls	r2, r3, #5
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	4413      	add	r3, r2
 800345e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	68fa      	ldr	r2, [r7, #12]
 8003466:	0151      	lsls	r1, r2, #5
 8003468:	693a      	ldr	r2, [r7, #16]
 800346a:	440a      	add	r2, r1
 800346c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003470:	f023 0302 	bic.w	r3, r3, #2
 8003474:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	212c      	movs	r1, #44	; 0x2c
 800347c:	fb01 f303 	mul.w	r3, r1, r3
 8003480:	4413      	add	r3, r2
 8003482:	3361      	adds	r3, #97	; 0x61
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	2b01      	cmp	r3, #1
 8003488:	d109      	bne.n	800349e <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	212c      	movs	r1, #44	; 0x2c
 8003490:	fb01 f303 	mul.w	r3, r1, r3
 8003494:	4413      	add	r3, r2
 8003496:	3360      	adds	r3, #96	; 0x60
 8003498:	2201      	movs	r2, #1
 800349a:	701a      	strb	r2, [r3, #0]
 800349c:	e0c9      	b.n	8003632 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	212c      	movs	r1, #44	; 0x2c
 80034a4:	fb01 f303 	mul.w	r3, r1, r3
 80034a8:	4413      	add	r3, r2
 80034aa:	3361      	adds	r3, #97	; 0x61
 80034ac:	781b      	ldrb	r3, [r3, #0]
 80034ae:	2b05      	cmp	r3, #5
 80034b0:	d109      	bne.n	80034c6 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	212c      	movs	r1, #44	; 0x2c
 80034b8:	fb01 f303 	mul.w	r3, r1, r3
 80034bc:	4413      	add	r3, r2
 80034be:	3360      	adds	r3, #96	; 0x60
 80034c0:	2205      	movs	r2, #5
 80034c2:	701a      	strb	r2, [r3, #0]
 80034c4:	e0b5      	b.n	8003632 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	212c      	movs	r1, #44	; 0x2c
 80034cc:	fb01 f303 	mul.w	r3, r1, r3
 80034d0:	4413      	add	r3, r2
 80034d2:	3361      	adds	r3, #97	; 0x61
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	2b06      	cmp	r3, #6
 80034d8:	d009      	beq.n	80034ee <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	212c      	movs	r1, #44	; 0x2c
 80034e0:	fb01 f303 	mul.w	r3, r1, r3
 80034e4:	4413      	add	r3, r2
 80034e6:	3361      	adds	r3, #97	; 0x61
 80034e8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80034ea:	2b08      	cmp	r3, #8
 80034ec:	d150      	bne.n	8003590 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	212c      	movs	r1, #44	; 0x2c
 80034f4:	fb01 f303 	mul.w	r3, r1, r3
 80034f8:	4413      	add	r3, r2
 80034fa:	335c      	adds	r3, #92	; 0x5c
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	1c5a      	adds	r2, r3, #1
 8003500:	6879      	ldr	r1, [r7, #4]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	202c      	movs	r0, #44	; 0x2c
 8003506:	fb00 f303 	mul.w	r3, r0, r3
 800350a:	440b      	add	r3, r1
 800350c:	335c      	adds	r3, #92	; 0x5c
 800350e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	212c      	movs	r1, #44	; 0x2c
 8003516:	fb01 f303 	mul.w	r3, r1, r3
 800351a:	4413      	add	r3, r2
 800351c:	335c      	adds	r3, #92	; 0x5c
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	2b02      	cmp	r3, #2
 8003522:	d912      	bls.n	800354a <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	212c      	movs	r1, #44	; 0x2c
 800352a:	fb01 f303 	mul.w	r3, r1, r3
 800352e:	4413      	add	r3, r2
 8003530:	335c      	adds	r3, #92	; 0x5c
 8003532:	2200      	movs	r2, #0
 8003534:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	212c      	movs	r1, #44	; 0x2c
 800353c:	fb01 f303 	mul.w	r3, r1, r3
 8003540:	4413      	add	r3, r2
 8003542:	3360      	adds	r3, #96	; 0x60
 8003544:	2204      	movs	r2, #4
 8003546:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003548:	e073      	b.n	8003632 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	212c      	movs	r1, #44	; 0x2c
 8003550:	fb01 f303 	mul.w	r3, r1, r3
 8003554:	4413      	add	r3, r2
 8003556:	3360      	adds	r3, #96	; 0x60
 8003558:	2202      	movs	r2, #2
 800355a:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	015a      	lsls	r2, r3, #5
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	4413      	add	r3, r2
 8003564:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003572:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800357a:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	015a      	lsls	r2, r3, #5
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	4413      	add	r3, r2
 8003584:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003588:	461a      	mov	r2, r3
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800358e:	e050      	b.n	8003632 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003590:	687a      	ldr	r2, [r7, #4]
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	212c      	movs	r1, #44	; 0x2c
 8003596:	fb01 f303 	mul.w	r3, r1, r3
 800359a:	4413      	add	r3, r2
 800359c:	3361      	adds	r3, #97	; 0x61
 800359e:	781b      	ldrb	r3, [r3, #0]
 80035a0:	2b03      	cmp	r3, #3
 80035a2:	d122      	bne.n	80035ea <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	212c      	movs	r1, #44	; 0x2c
 80035aa:	fb01 f303 	mul.w	r3, r1, r3
 80035ae:	4413      	add	r3, r2
 80035b0:	3360      	adds	r3, #96	; 0x60
 80035b2:	2202      	movs	r2, #2
 80035b4:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	015a      	lsls	r2, r3, #5
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	4413      	add	r3, r2
 80035be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80035cc:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80035d4:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	015a      	lsls	r2, r3, #5
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	4413      	add	r3, r2
 80035de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035e2:	461a      	mov	r2, r3
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	6013      	str	r3, [r2, #0]
 80035e8:	e023      	b.n	8003632 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	212c      	movs	r1, #44	; 0x2c
 80035f0:	fb01 f303 	mul.w	r3, r1, r3
 80035f4:	4413      	add	r3, r2
 80035f6:	3361      	adds	r3, #97	; 0x61
 80035f8:	781b      	ldrb	r3, [r3, #0]
 80035fa:	2b07      	cmp	r3, #7
 80035fc:	d119      	bne.n	8003632 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	212c      	movs	r1, #44	; 0x2c
 8003604:	fb01 f303 	mul.w	r3, r1, r3
 8003608:	4413      	add	r3, r2
 800360a:	335c      	adds	r3, #92	; 0x5c
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	1c5a      	adds	r2, r3, #1
 8003610:	6879      	ldr	r1, [r7, #4]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	202c      	movs	r0, #44	; 0x2c
 8003616:	fb00 f303 	mul.w	r3, r0, r3
 800361a:	440b      	add	r3, r1
 800361c:	335c      	adds	r3, #92	; 0x5c
 800361e:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	212c      	movs	r1, #44	; 0x2c
 8003626:	fb01 f303 	mul.w	r3, r1, r3
 800362a:	4413      	add	r3, r2
 800362c:	3360      	adds	r3, #96	; 0x60
 800362e:	2204      	movs	r2, #4
 8003630:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	015a      	lsls	r2, r3, #5
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	4413      	add	r3, r2
 800363a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800363e:	461a      	mov	r2, r3
 8003640:	2302      	movs	r3, #2
 8003642:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	b2d9      	uxtb	r1, r3
 8003648:	687a      	ldr	r2, [r7, #4]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	202c      	movs	r0, #44	; 0x2c
 800364e:	fb00 f303 	mul.w	r3, r0, r3
 8003652:	4413      	add	r3, r2
 8003654:	3360      	adds	r3, #96	; 0x60
 8003656:	781b      	ldrb	r3, [r3, #0]
 8003658:	461a      	mov	r2, r3
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f005 fc9a 	bl	8008f94 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003660:	e081      	b.n	8003766 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	015a      	lsls	r2, r3, #5
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	4413      	add	r3, r2
 800366a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	f003 0310 	and.w	r3, r3, #16
 8003674:	2b10      	cmp	r3, #16
 8003676:	d176      	bne.n	8003766 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003678:	687a      	ldr	r2, [r7, #4]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	212c      	movs	r1, #44	; 0x2c
 800367e:	fb01 f303 	mul.w	r3, r1, r3
 8003682:	4413      	add	r3, r2
 8003684:	333f      	adds	r3, #63	; 0x3f
 8003686:	781b      	ldrb	r3, [r3, #0]
 8003688:	2b03      	cmp	r3, #3
 800368a:	d121      	bne.n	80036d0 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	212c      	movs	r1, #44	; 0x2c
 8003692:	fb01 f303 	mul.w	r3, r1, r3
 8003696:	4413      	add	r3, r2
 8003698:	335c      	adds	r3, #92	; 0x5c
 800369a:	2200      	movs	r2, #0
 800369c:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	015a      	lsls	r2, r3, #5
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	4413      	add	r3, r2
 80036a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	68fa      	ldr	r2, [r7, #12]
 80036ae:	0151      	lsls	r1, r2, #5
 80036b0:	693a      	ldr	r2, [r7, #16]
 80036b2:	440a      	add	r2, r1
 80036b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80036b8:	f043 0302 	orr.w	r3, r3, #2
 80036bc:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	68fa      	ldr	r2, [r7, #12]
 80036c4:	b2d2      	uxtb	r2, r2
 80036c6:	4611      	mov	r1, r2
 80036c8:	4618      	mov	r0, r3
 80036ca:	f003 faa6 	bl	8006c1a <USB_HC_Halt>
 80036ce:	e041      	b.n	8003754 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	212c      	movs	r1, #44	; 0x2c
 80036d6:	fb01 f303 	mul.w	r3, r1, r3
 80036da:	4413      	add	r3, r2
 80036dc:	333f      	adds	r3, #63	; 0x3f
 80036de:	781b      	ldrb	r3, [r3, #0]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d009      	beq.n	80036f8 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	212c      	movs	r1, #44	; 0x2c
 80036ea:	fb01 f303 	mul.w	r3, r1, r3
 80036ee:	4413      	add	r3, r2
 80036f0:	333f      	adds	r3, #63	; 0x3f
 80036f2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80036f4:	2b02      	cmp	r3, #2
 80036f6:	d12d      	bne.n	8003754 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	212c      	movs	r1, #44	; 0x2c
 80036fe:	fb01 f303 	mul.w	r3, r1, r3
 8003702:	4413      	add	r3, r2
 8003704:	335c      	adds	r3, #92	; 0x5c
 8003706:	2200      	movs	r2, #0
 8003708:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	691b      	ldr	r3, [r3, #16]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d120      	bne.n	8003754 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	212c      	movs	r1, #44	; 0x2c
 8003718:	fb01 f303 	mul.w	r3, r1, r3
 800371c:	4413      	add	r3, r2
 800371e:	3361      	adds	r3, #97	; 0x61
 8003720:	2203      	movs	r2, #3
 8003722:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	015a      	lsls	r2, r3, #5
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	4413      	add	r3, r2
 800372c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	68fa      	ldr	r2, [r7, #12]
 8003734:	0151      	lsls	r1, r2, #5
 8003736:	693a      	ldr	r2, [r7, #16]
 8003738:	440a      	add	r2, r1
 800373a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800373e:	f043 0302 	orr.w	r3, r3, #2
 8003742:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	68fa      	ldr	r2, [r7, #12]
 800374a:	b2d2      	uxtb	r2, r2
 800374c:	4611      	mov	r1, r2
 800374e:	4618      	mov	r0, r3
 8003750:	f003 fa63 	bl	8006c1a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	015a      	lsls	r2, r3, #5
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	4413      	add	r3, r2
 800375c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003760:	461a      	mov	r2, r3
 8003762:	2310      	movs	r3, #16
 8003764:	6093      	str	r3, [r2, #8]
}
 8003766:	bf00      	nop
 8003768:	3718      	adds	r7, #24
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}

0800376e <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800376e:	b580      	push	{r7, lr}
 8003770:	b088      	sub	sp, #32
 8003772:	af00      	add	r7, sp, #0
 8003774:	6078      	str	r0, [r7, #4]
 8003776:	460b      	mov	r3, r1
 8003778:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003780:	69fb      	ldr	r3, [r7, #28]
 8003782:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8003784:	78fb      	ldrb	r3, [r7, #3]
 8003786:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	015a      	lsls	r2, r3, #5
 800378c:	69bb      	ldr	r3, [r7, #24]
 800378e:	4413      	add	r3, r2
 8003790:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	f003 0304 	and.w	r3, r3, #4
 800379a:	2b04      	cmp	r3, #4
 800379c:	d119      	bne.n	80037d2 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	015a      	lsls	r2, r3, #5
 80037a2:	69bb      	ldr	r3, [r7, #24]
 80037a4:	4413      	add	r3, r2
 80037a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037aa:	461a      	mov	r2, r3
 80037ac:	2304      	movs	r3, #4
 80037ae:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	015a      	lsls	r2, r3, #5
 80037b4:	69bb      	ldr	r3, [r7, #24]
 80037b6:	4413      	add	r3, r2
 80037b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	697a      	ldr	r2, [r7, #20]
 80037c0:	0151      	lsls	r1, r2, #5
 80037c2:	69ba      	ldr	r2, [r7, #24]
 80037c4:	440a      	add	r2, r1
 80037c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80037ca:	f043 0302 	orr.w	r3, r3, #2
 80037ce:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80037d0:	e3ca      	b.n	8003f68 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	015a      	lsls	r2, r3, #5
 80037d6:	69bb      	ldr	r3, [r7, #24]
 80037d8:	4413      	add	r3, r2
 80037da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	f003 0320 	and.w	r3, r3, #32
 80037e4:	2b20      	cmp	r3, #32
 80037e6:	d13e      	bne.n	8003866 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	015a      	lsls	r2, r3, #5
 80037ec:	69bb      	ldr	r3, [r7, #24]
 80037ee:	4413      	add	r3, r2
 80037f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037f4:	461a      	mov	r2, r3
 80037f6:	2320      	movs	r3, #32
 80037f8:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	212c      	movs	r1, #44	; 0x2c
 8003800:	fb01 f303 	mul.w	r3, r1, r3
 8003804:	4413      	add	r3, r2
 8003806:	333d      	adds	r3, #61	; 0x3d
 8003808:	781b      	ldrb	r3, [r3, #0]
 800380a:	2b01      	cmp	r3, #1
 800380c:	f040 83ac 	bne.w	8003f68 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	212c      	movs	r1, #44	; 0x2c
 8003816:	fb01 f303 	mul.w	r3, r1, r3
 800381a:	4413      	add	r3, r2
 800381c:	333d      	adds	r3, #61	; 0x3d
 800381e:	2200      	movs	r2, #0
 8003820:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	212c      	movs	r1, #44	; 0x2c
 8003828:	fb01 f303 	mul.w	r3, r1, r3
 800382c:	4413      	add	r3, r2
 800382e:	3360      	adds	r3, #96	; 0x60
 8003830:	2202      	movs	r2, #2
 8003832:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	015a      	lsls	r2, r3, #5
 8003838:	69bb      	ldr	r3, [r7, #24]
 800383a:	4413      	add	r3, r2
 800383c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	697a      	ldr	r2, [r7, #20]
 8003844:	0151      	lsls	r1, r2, #5
 8003846:	69ba      	ldr	r2, [r7, #24]
 8003848:	440a      	add	r2, r1
 800384a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800384e:	f043 0302 	orr.w	r3, r3, #2
 8003852:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	697a      	ldr	r2, [r7, #20]
 800385a:	b2d2      	uxtb	r2, r2
 800385c:	4611      	mov	r1, r2
 800385e:	4618      	mov	r0, r3
 8003860:	f003 f9db 	bl	8006c1a <USB_HC_Halt>
}
 8003864:	e380      	b.n	8003f68 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	015a      	lsls	r2, r3, #5
 800386a:	69bb      	ldr	r3, [r7, #24]
 800386c:	4413      	add	r3, r2
 800386e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003878:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800387c:	d122      	bne.n	80038c4 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	015a      	lsls	r2, r3, #5
 8003882:	69bb      	ldr	r3, [r7, #24]
 8003884:	4413      	add	r3, r2
 8003886:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	697a      	ldr	r2, [r7, #20]
 800388e:	0151      	lsls	r1, r2, #5
 8003890:	69ba      	ldr	r2, [r7, #24]
 8003892:	440a      	add	r2, r1
 8003894:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003898:	f043 0302 	orr.w	r3, r3, #2
 800389c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	697a      	ldr	r2, [r7, #20]
 80038a4:	b2d2      	uxtb	r2, r2
 80038a6:	4611      	mov	r1, r2
 80038a8:	4618      	mov	r0, r3
 80038aa:	f003 f9b6 	bl	8006c1a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	015a      	lsls	r2, r3, #5
 80038b2:	69bb      	ldr	r3, [r7, #24]
 80038b4:	4413      	add	r3, r2
 80038b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038ba:	461a      	mov	r2, r3
 80038bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80038c0:	6093      	str	r3, [r2, #8]
}
 80038c2:	e351      	b.n	8003f68 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	015a      	lsls	r2, r3, #5
 80038c8:	69bb      	ldr	r3, [r7, #24]
 80038ca:	4413      	add	r3, r2
 80038cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	f003 0301 	and.w	r3, r3, #1
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d150      	bne.n	800397c <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80038da:	687a      	ldr	r2, [r7, #4]
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	212c      	movs	r1, #44	; 0x2c
 80038e0:	fb01 f303 	mul.w	r3, r1, r3
 80038e4:	4413      	add	r3, r2
 80038e6:	335c      	adds	r3, #92	; 0x5c
 80038e8:	2200      	movs	r2, #0
 80038ea:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	015a      	lsls	r2, r3, #5
 80038f0:	69bb      	ldr	r3, [r7, #24]
 80038f2:	4413      	add	r3, r2
 80038f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038fe:	2b40      	cmp	r3, #64	; 0x40
 8003900:	d111      	bne.n	8003926 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	212c      	movs	r1, #44	; 0x2c
 8003908:	fb01 f303 	mul.w	r3, r1, r3
 800390c:	4413      	add	r3, r2
 800390e:	333d      	adds	r3, #61	; 0x3d
 8003910:	2201      	movs	r2, #1
 8003912:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	015a      	lsls	r2, r3, #5
 8003918:	69bb      	ldr	r3, [r7, #24]
 800391a:	4413      	add	r3, r2
 800391c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003920:	461a      	mov	r2, r3
 8003922:	2340      	movs	r3, #64	; 0x40
 8003924:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	015a      	lsls	r2, r3, #5
 800392a:	69bb      	ldr	r3, [r7, #24]
 800392c:	4413      	add	r3, r2
 800392e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	697a      	ldr	r2, [r7, #20]
 8003936:	0151      	lsls	r1, r2, #5
 8003938:	69ba      	ldr	r2, [r7, #24]
 800393a:	440a      	add	r2, r1
 800393c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003940:	f043 0302 	orr.w	r3, r3, #2
 8003944:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	697a      	ldr	r2, [r7, #20]
 800394c:	b2d2      	uxtb	r2, r2
 800394e:	4611      	mov	r1, r2
 8003950:	4618      	mov	r0, r3
 8003952:	f003 f962 	bl	8006c1a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	015a      	lsls	r2, r3, #5
 800395a:	69bb      	ldr	r3, [r7, #24]
 800395c:	4413      	add	r3, r2
 800395e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003962:	461a      	mov	r2, r3
 8003964:	2301      	movs	r3, #1
 8003966:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003968:	687a      	ldr	r2, [r7, #4]
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	212c      	movs	r1, #44	; 0x2c
 800396e:	fb01 f303 	mul.w	r3, r1, r3
 8003972:	4413      	add	r3, r2
 8003974:	3361      	adds	r3, #97	; 0x61
 8003976:	2201      	movs	r2, #1
 8003978:	701a      	strb	r2, [r3, #0]
}
 800397a:	e2f5      	b.n	8003f68 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	015a      	lsls	r2, r3, #5
 8003980:	69bb      	ldr	r3, [r7, #24]
 8003982:	4413      	add	r3, r2
 8003984:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800398e:	2b40      	cmp	r3, #64	; 0x40
 8003990:	d13c      	bne.n	8003a0c <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	212c      	movs	r1, #44	; 0x2c
 8003998:	fb01 f303 	mul.w	r3, r1, r3
 800399c:	4413      	add	r3, r2
 800399e:	3361      	adds	r3, #97	; 0x61
 80039a0:	2204      	movs	r2, #4
 80039a2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	212c      	movs	r1, #44	; 0x2c
 80039aa:	fb01 f303 	mul.w	r3, r1, r3
 80039ae:	4413      	add	r3, r2
 80039b0:	333d      	adds	r3, #61	; 0x3d
 80039b2:	2201      	movs	r2, #1
 80039b4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	212c      	movs	r1, #44	; 0x2c
 80039bc:	fb01 f303 	mul.w	r3, r1, r3
 80039c0:	4413      	add	r3, r2
 80039c2:	335c      	adds	r3, #92	; 0x5c
 80039c4:	2200      	movs	r2, #0
 80039c6:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	015a      	lsls	r2, r3, #5
 80039cc:	69bb      	ldr	r3, [r7, #24]
 80039ce:	4413      	add	r3, r2
 80039d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	697a      	ldr	r2, [r7, #20]
 80039d8:	0151      	lsls	r1, r2, #5
 80039da:	69ba      	ldr	r2, [r7, #24]
 80039dc:	440a      	add	r2, r1
 80039de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80039e2:	f043 0302 	orr.w	r3, r3, #2
 80039e6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	697a      	ldr	r2, [r7, #20]
 80039ee:	b2d2      	uxtb	r2, r2
 80039f0:	4611      	mov	r1, r2
 80039f2:	4618      	mov	r0, r3
 80039f4:	f003 f911 	bl	8006c1a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	015a      	lsls	r2, r3, #5
 80039fc:	69bb      	ldr	r3, [r7, #24]
 80039fe:	4413      	add	r3, r2
 8003a00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a04:	461a      	mov	r2, r3
 8003a06:	2340      	movs	r3, #64	; 0x40
 8003a08:	6093      	str	r3, [r2, #8]
}
 8003a0a:	e2ad      	b.n	8003f68 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	015a      	lsls	r2, r3, #5
 8003a10:	69bb      	ldr	r3, [r7, #24]
 8003a12:	4413      	add	r3, r2
 8003a14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	f003 0308 	and.w	r3, r3, #8
 8003a1e:	2b08      	cmp	r3, #8
 8003a20:	d12a      	bne.n	8003a78 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	015a      	lsls	r2, r3, #5
 8003a26:	69bb      	ldr	r3, [r7, #24]
 8003a28:	4413      	add	r3, r2
 8003a2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a2e:	461a      	mov	r2, r3
 8003a30:	2308      	movs	r3, #8
 8003a32:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	015a      	lsls	r2, r3, #5
 8003a38:	69bb      	ldr	r3, [r7, #24]
 8003a3a:	4413      	add	r3, r2
 8003a3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a40:	68db      	ldr	r3, [r3, #12]
 8003a42:	697a      	ldr	r2, [r7, #20]
 8003a44:	0151      	lsls	r1, r2, #5
 8003a46:	69ba      	ldr	r2, [r7, #24]
 8003a48:	440a      	add	r2, r1
 8003a4a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a4e:	f043 0302 	orr.w	r3, r3, #2
 8003a52:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	697a      	ldr	r2, [r7, #20]
 8003a5a:	b2d2      	uxtb	r2, r2
 8003a5c:	4611      	mov	r1, r2
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f003 f8db 	bl	8006c1a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	212c      	movs	r1, #44	; 0x2c
 8003a6a:	fb01 f303 	mul.w	r3, r1, r3
 8003a6e:	4413      	add	r3, r2
 8003a70:	3361      	adds	r3, #97	; 0x61
 8003a72:	2205      	movs	r2, #5
 8003a74:	701a      	strb	r2, [r3, #0]
}
 8003a76:	e277      	b.n	8003f68 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	015a      	lsls	r2, r3, #5
 8003a7c:	69bb      	ldr	r3, [r7, #24]
 8003a7e:	4413      	add	r3, r2
 8003a80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	f003 0310 	and.w	r3, r3, #16
 8003a8a:	2b10      	cmp	r3, #16
 8003a8c:	d150      	bne.n	8003b30 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	212c      	movs	r1, #44	; 0x2c
 8003a94:	fb01 f303 	mul.w	r3, r1, r3
 8003a98:	4413      	add	r3, r2
 8003a9a:	335c      	adds	r3, #92	; 0x5c
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	212c      	movs	r1, #44	; 0x2c
 8003aa6:	fb01 f303 	mul.w	r3, r1, r3
 8003aaa:	4413      	add	r3, r2
 8003aac:	3361      	adds	r3, #97	; 0x61
 8003aae:	2203      	movs	r2, #3
 8003ab0:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	212c      	movs	r1, #44	; 0x2c
 8003ab8:	fb01 f303 	mul.w	r3, r1, r3
 8003abc:	4413      	add	r3, r2
 8003abe:	333d      	adds	r3, #61	; 0x3d
 8003ac0:	781b      	ldrb	r3, [r3, #0]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d112      	bne.n	8003aec <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	212c      	movs	r1, #44	; 0x2c
 8003acc:	fb01 f303 	mul.w	r3, r1, r3
 8003ad0:	4413      	add	r3, r2
 8003ad2:	333c      	adds	r3, #60	; 0x3c
 8003ad4:	781b      	ldrb	r3, [r3, #0]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d108      	bne.n	8003aec <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	212c      	movs	r1, #44	; 0x2c
 8003ae0:	fb01 f303 	mul.w	r3, r1, r3
 8003ae4:	4413      	add	r3, r2
 8003ae6:	333d      	adds	r3, #61	; 0x3d
 8003ae8:	2201      	movs	r2, #1
 8003aea:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	015a      	lsls	r2, r3, #5
 8003af0:	69bb      	ldr	r3, [r7, #24]
 8003af2:	4413      	add	r3, r2
 8003af4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003af8:	68db      	ldr	r3, [r3, #12]
 8003afa:	697a      	ldr	r2, [r7, #20]
 8003afc:	0151      	lsls	r1, r2, #5
 8003afe:	69ba      	ldr	r2, [r7, #24]
 8003b00:	440a      	add	r2, r1
 8003b02:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b06:	f043 0302 	orr.w	r3, r3, #2
 8003b0a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	697a      	ldr	r2, [r7, #20]
 8003b12:	b2d2      	uxtb	r2, r2
 8003b14:	4611      	mov	r1, r2
 8003b16:	4618      	mov	r0, r3
 8003b18:	f003 f87f 	bl	8006c1a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	015a      	lsls	r2, r3, #5
 8003b20:	69bb      	ldr	r3, [r7, #24]
 8003b22:	4413      	add	r3, r2
 8003b24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b28:	461a      	mov	r2, r3
 8003b2a:	2310      	movs	r3, #16
 8003b2c:	6093      	str	r3, [r2, #8]
}
 8003b2e:	e21b      	b.n	8003f68 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	015a      	lsls	r2, r3, #5
 8003b34:	69bb      	ldr	r3, [r7, #24]
 8003b36:	4413      	add	r3, r2
 8003b38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b42:	2b80      	cmp	r3, #128	; 0x80
 8003b44:	d174      	bne.n	8003c30 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	691b      	ldr	r3, [r3, #16]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d121      	bne.n	8003b92 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	212c      	movs	r1, #44	; 0x2c
 8003b54:	fb01 f303 	mul.w	r3, r1, r3
 8003b58:	4413      	add	r3, r2
 8003b5a:	3361      	adds	r3, #97	; 0x61
 8003b5c:	2206      	movs	r2, #6
 8003b5e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	015a      	lsls	r2, r3, #5
 8003b64:	69bb      	ldr	r3, [r7, #24]
 8003b66:	4413      	add	r3, r2
 8003b68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b6c:	68db      	ldr	r3, [r3, #12]
 8003b6e:	697a      	ldr	r2, [r7, #20]
 8003b70:	0151      	lsls	r1, r2, #5
 8003b72:	69ba      	ldr	r2, [r7, #24]
 8003b74:	440a      	add	r2, r1
 8003b76:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b7a:	f043 0302 	orr.w	r3, r3, #2
 8003b7e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	697a      	ldr	r2, [r7, #20]
 8003b86:	b2d2      	uxtb	r2, r2
 8003b88:	4611      	mov	r1, r2
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f003 f845 	bl	8006c1a <USB_HC_Halt>
 8003b90:	e044      	b.n	8003c1c <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	212c      	movs	r1, #44	; 0x2c
 8003b98:	fb01 f303 	mul.w	r3, r1, r3
 8003b9c:	4413      	add	r3, r2
 8003b9e:	335c      	adds	r3, #92	; 0x5c
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	1c5a      	adds	r2, r3, #1
 8003ba4:	6879      	ldr	r1, [r7, #4]
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	202c      	movs	r0, #44	; 0x2c
 8003baa:	fb00 f303 	mul.w	r3, r0, r3
 8003bae:	440b      	add	r3, r1
 8003bb0:	335c      	adds	r3, #92	; 0x5c
 8003bb2:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003bb4:	687a      	ldr	r2, [r7, #4]
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	212c      	movs	r1, #44	; 0x2c
 8003bba:	fb01 f303 	mul.w	r3, r1, r3
 8003bbe:	4413      	add	r3, r2
 8003bc0:	335c      	adds	r3, #92	; 0x5c
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	2b02      	cmp	r3, #2
 8003bc6:	d920      	bls.n	8003c0a <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003bc8:	687a      	ldr	r2, [r7, #4]
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	212c      	movs	r1, #44	; 0x2c
 8003bce:	fb01 f303 	mul.w	r3, r1, r3
 8003bd2:	4413      	add	r3, r2
 8003bd4:	335c      	adds	r3, #92	; 0x5c
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	212c      	movs	r1, #44	; 0x2c
 8003be0:	fb01 f303 	mul.w	r3, r1, r3
 8003be4:	4413      	add	r3, r2
 8003be6:	3360      	adds	r3, #96	; 0x60
 8003be8:	2204      	movs	r2, #4
 8003bea:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	b2d9      	uxtb	r1, r3
 8003bf0:	687a      	ldr	r2, [r7, #4]
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	202c      	movs	r0, #44	; 0x2c
 8003bf6:	fb00 f303 	mul.w	r3, r0, r3
 8003bfa:	4413      	add	r3, r2
 8003bfc:	3360      	adds	r3, #96	; 0x60
 8003bfe:	781b      	ldrb	r3, [r3, #0]
 8003c00:	461a      	mov	r2, r3
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f005 f9c6 	bl	8008f94 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003c08:	e008      	b.n	8003c1c <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	212c      	movs	r1, #44	; 0x2c
 8003c10:	fb01 f303 	mul.w	r3, r1, r3
 8003c14:	4413      	add	r3, r2
 8003c16:	3360      	adds	r3, #96	; 0x60
 8003c18:	2202      	movs	r2, #2
 8003c1a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	015a      	lsls	r2, r3, #5
 8003c20:	69bb      	ldr	r3, [r7, #24]
 8003c22:	4413      	add	r3, r2
 8003c24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c28:	461a      	mov	r2, r3
 8003c2a:	2380      	movs	r3, #128	; 0x80
 8003c2c:	6093      	str	r3, [r2, #8]
}
 8003c2e:	e19b      	b.n	8003f68 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	015a      	lsls	r2, r3, #5
 8003c34:	69bb      	ldr	r3, [r7, #24]
 8003c36:	4413      	add	r3, r2
 8003c38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c46:	d134      	bne.n	8003cb2 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	015a      	lsls	r2, r3, #5
 8003c4c:	69bb      	ldr	r3, [r7, #24]
 8003c4e:	4413      	add	r3, r2
 8003c50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	697a      	ldr	r2, [r7, #20]
 8003c58:	0151      	lsls	r1, r2, #5
 8003c5a:	69ba      	ldr	r2, [r7, #24]
 8003c5c:	440a      	add	r2, r1
 8003c5e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c62:	f043 0302 	orr.w	r3, r3, #2
 8003c66:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	697a      	ldr	r2, [r7, #20]
 8003c6e:	b2d2      	uxtb	r2, r2
 8003c70:	4611      	mov	r1, r2
 8003c72:	4618      	mov	r0, r3
 8003c74:	f002 ffd1 	bl	8006c1a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	015a      	lsls	r2, r3, #5
 8003c7c:	69bb      	ldr	r3, [r7, #24]
 8003c7e:	4413      	add	r3, r2
 8003c80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c84:	461a      	mov	r2, r3
 8003c86:	2310      	movs	r3, #16
 8003c88:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	015a      	lsls	r2, r3, #5
 8003c8e:	69bb      	ldr	r3, [r7, #24]
 8003c90:	4413      	add	r3, r2
 8003c92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c96:	461a      	mov	r2, r3
 8003c98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c9c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	212c      	movs	r1, #44	; 0x2c
 8003ca4:	fb01 f303 	mul.w	r3, r1, r3
 8003ca8:	4413      	add	r3, r2
 8003caa:	3361      	adds	r3, #97	; 0x61
 8003cac:	2208      	movs	r2, #8
 8003cae:	701a      	strb	r2, [r3, #0]
}
 8003cb0:	e15a      	b.n	8003f68 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	015a      	lsls	r2, r3, #5
 8003cb6:	69bb      	ldr	r3, [r7, #24]
 8003cb8:	4413      	add	r3, r2
 8003cba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	f003 0302 	and.w	r3, r3, #2
 8003cc4:	2b02      	cmp	r3, #2
 8003cc6:	f040 814f 	bne.w	8003f68 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	015a      	lsls	r2, r3, #5
 8003cce:	69bb      	ldr	r3, [r7, #24]
 8003cd0:	4413      	add	r3, r2
 8003cd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	697a      	ldr	r2, [r7, #20]
 8003cda:	0151      	lsls	r1, r2, #5
 8003cdc:	69ba      	ldr	r2, [r7, #24]
 8003cde:	440a      	add	r2, r1
 8003ce0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003ce4:	f023 0302 	bic.w	r3, r3, #2
 8003ce8:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	212c      	movs	r1, #44	; 0x2c
 8003cf0:	fb01 f303 	mul.w	r3, r1, r3
 8003cf4:	4413      	add	r3, r2
 8003cf6:	3361      	adds	r3, #97	; 0x61
 8003cf8:	781b      	ldrb	r3, [r3, #0]
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d17d      	bne.n	8003dfa <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003cfe:	687a      	ldr	r2, [r7, #4]
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	212c      	movs	r1, #44	; 0x2c
 8003d04:	fb01 f303 	mul.w	r3, r1, r3
 8003d08:	4413      	add	r3, r2
 8003d0a:	3360      	adds	r3, #96	; 0x60
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003d10:	687a      	ldr	r2, [r7, #4]
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	212c      	movs	r1, #44	; 0x2c
 8003d16:	fb01 f303 	mul.w	r3, r1, r3
 8003d1a:	4413      	add	r3, r2
 8003d1c:	333f      	adds	r3, #63	; 0x3f
 8003d1e:	781b      	ldrb	r3, [r3, #0]
 8003d20:	2b02      	cmp	r3, #2
 8003d22:	d00a      	beq.n	8003d3a <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003d24:	687a      	ldr	r2, [r7, #4]
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	212c      	movs	r1, #44	; 0x2c
 8003d2a:	fb01 f303 	mul.w	r3, r1, r3
 8003d2e:	4413      	add	r3, r2
 8003d30:	333f      	adds	r3, #63	; 0x3f
 8003d32:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003d34:	2b03      	cmp	r3, #3
 8003d36:	f040 8100 	bne.w	8003f3a <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	691b      	ldr	r3, [r3, #16]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d113      	bne.n	8003d6a <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	212c      	movs	r1, #44	; 0x2c
 8003d48:	fb01 f303 	mul.w	r3, r1, r3
 8003d4c:	4413      	add	r3, r2
 8003d4e:	3355      	adds	r3, #85	; 0x55
 8003d50:	781b      	ldrb	r3, [r3, #0]
 8003d52:	f083 0301 	eor.w	r3, r3, #1
 8003d56:	b2d8      	uxtb	r0, r3
 8003d58:	687a      	ldr	r2, [r7, #4]
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	212c      	movs	r1, #44	; 0x2c
 8003d5e:	fb01 f303 	mul.w	r3, r1, r3
 8003d62:	4413      	add	r3, r2
 8003d64:	3355      	adds	r3, #85	; 0x55
 8003d66:	4602      	mov	r2, r0
 8003d68:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	691b      	ldr	r3, [r3, #16]
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	f040 80e3 	bne.w	8003f3a <HCD_HC_OUT_IRQHandler+0x7cc>
 8003d74:	687a      	ldr	r2, [r7, #4]
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	212c      	movs	r1, #44	; 0x2c
 8003d7a:	fb01 f303 	mul.w	r3, r1, r3
 8003d7e:	4413      	add	r3, r2
 8003d80:	334c      	adds	r3, #76	; 0x4c
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	f000 80d8 	beq.w	8003f3a <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	212c      	movs	r1, #44	; 0x2c
 8003d90:	fb01 f303 	mul.w	r3, r1, r3
 8003d94:	4413      	add	r3, r2
 8003d96:	334c      	adds	r3, #76	; 0x4c
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	6879      	ldr	r1, [r7, #4]
 8003d9c:	697a      	ldr	r2, [r7, #20]
 8003d9e:	202c      	movs	r0, #44	; 0x2c
 8003da0:	fb00 f202 	mul.w	r2, r0, r2
 8003da4:	440a      	add	r2, r1
 8003da6:	3240      	adds	r2, #64	; 0x40
 8003da8:	8812      	ldrh	r2, [r2, #0]
 8003daa:	4413      	add	r3, r2
 8003dac:	3b01      	subs	r3, #1
 8003dae:	6879      	ldr	r1, [r7, #4]
 8003db0:	697a      	ldr	r2, [r7, #20]
 8003db2:	202c      	movs	r0, #44	; 0x2c
 8003db4:	fb00 f202 	mul.w	r2, r0, r2
 8003db8:	440a      	add	r2, r1
 8003dba:	3240      	adds	r2, #64	; 0x40
 8003dbc:	8812      	ldrh	r2, [r2, #0]
 8003dbe:	fbb3 f3f2 	udiv	r3, r3, r2
 8003dc2:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f003 0301 	and.w	r3, r3, #1
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	f000 80b5 	beq.w	8003f3a <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	212c      	movs	r1, #44	; 0x2c
 8003dd6:	fb01 f303 	mul.w	r3, r1, r3
 8003dda:	4413      	add	r3, r2
 8003ddc:	3355      	adds	r3, #85	; 0x55
 8003dde:	781b      	ldrb	r3, [r3, #0]
 8003de0:	f083 0301 	eor.w	r3, r3, #1
 8003de4:	b2d8      	uxtb	r0, r3
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	212c      	movs	r1, #44	; 0x2c
 8003dec:	fb01 f303 	mul.w	r3, r1, r3
 8003df0:	4413      	add	r3, r2
 8003df2:	3355      	adds	r3, #85	; 0x55
 8003df4:	4602      	mov	r2, r0
 8003df6:	701a      	strb	r2, [r3, #0]
 8003df8:	e09f      	b.n	8003f3a <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	212c      	movs	r1, #44	; 0x2c
 8003e00:	fb01 f303 	mul.w	r3, r1, r3
 8003e04:	4413      	add	r3, r2
 8003e06:	3361      	adds	r3, #97	; 0x61
 8003e08:	781b      	ldrb	r3, [r3, #0]
 8003e0a:	2b03      	cmp	r3, #3
 8003e0c:	d109      	bne.n	8003e22 <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	212c      	movs	r1, #44	; 0x2c
 8003e14:	fb01 f303 	mul.w	r3, r1, r3
 8003e18:	4413      	add	r3, r2
 8003e1a:	3360      	adds	r3, #96	; 0x60
 8003e1c:	2202      	movs	r2, #2
 8003e1e:	701a      	strb	r2, [r3, #0]
 8003e20:	e08b      	b.n	8003f3a <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	212c      	movs	r1, #44	; 0x2c
 8003e28:	fb01 f303 	mul.w	r3, r1, r3
 8003e2c:	4413      	add	r3, r2
 8003e2e:	3361      	adds	r3, #97	; 0x61
 8003e30:	781b      	ldrb	r3, [r3, #0]
 8003e32:	2b04      	cmp	r3, #4
 8003e34:	d109      	bne.n	8003e4a <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	212c      	movs	r1, #44	; 0x2c
 8003e3c:	fb01 f303 	mul.w	r3, r1, r3
 8003e40:	4413      	add	r3, r2
 8003e42:	3360      	adds	r3, #96	; 0x60
 8003e44:	2202      	movs	r2, #2
 8003e46:	701a      	strb	r2, [r3, #0]
 8003e48:	e077      	b.n	8003f3a <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003e4a:	687a      	ldr	r2, [r7, #4]
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	212c      	movs	r1, #44	; 0x2c
 8003e50:	fb01 f303 	mul.w	r3, r1, r3
 8003e54:	4413      	add	r3, r2
 8003e56:	3361      	adds	r3, #97	; 0x61
 8003e58:	781b      	ldrb	r3, [r3, #0]
 8003e5a:	2b05      	cmp	r3, #5
 8003e5c:	d109      	bne.n	8003e72 <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	212c      	movs	r1, #44	; 0x2c
 8003e64:	fb01 f303 	mul.w	r3, r1, r3
 8003e68:	4413      	add	r3, r2
 8003e6a:	3360      	adds	r3, #96	; 0x60
 8003e6c:	2205      	movs	r2, #5
 8003e6e:	701a      	strb	r2, [r3, #0]
 8003e70:	e063      	b.n	8003f3a <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	212c      	movs	r1, #44	; 0x2c
 8003e78:	fb01 f303 	mul.w	r3, r1, r3
 8003e7c:	4413      	add	r3, r2
 8003e7e:	3361      	adds	r3, #97	; 0x61
 8003e80:	781b      	ldrb	r3, [r3, #0]
 8003e82:	2b06      	cmp	r3, #6
 8003e84:	d009      	beq.n	8003e9a <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	212c      	movs	r1, #44	; 0x2c
 8003e8c:	fb01 f303 	mul.w	r3, r1, r3
 8003e90:	4413      	add	r3, r2
 8003e92:	3361      	adds	r3, #97	; 0x61
 8003e94:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003e96:	2b08      	cmp	r3, #8
 8003e98:	d14f      	bne.n	8003f3a <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	212c      	movs	r1, #44	; 0x2c
 8003ea0:	fb01 f303 	mul.w	r3, r1, r3
 8003ea4:	4413      	add	r3, r2
 8003ea6:	335c      	adds	r3, #92	; 0x5c
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	1c5a      	adds	r2, r3, #1
 8003eac:	6879      	ldr	r1, [r7, #4]
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	202c      	movs	r0, #44	; 0x2c
 8003eb2:	fb00 f303 	mul.w	r3, r0, r3
 8003eb6:	440b      	add	r3, r1
 8003eb8:	335c      	adds	r3, #92	; 0x5c
 8003eba:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003ebc:	687a      	ldr	r2, [r7, #4]
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	212c      	movs	r1, #44	; 0x2c
 8003ec2:	fb01 f303 	mul.w	r3, r1, r3
 8003ec6:	4413      	add	r3, r2
 8003ec8:	335c      	adds	r3, #92	; 0x5c
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	2b02      	cmp	r3, #2
 8003ece:	d912      	bls.n	8003ef6 <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003ed0:	687a      	ldr	r2, [r7, #4]
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	212c      	movs	r1, #44	; 0x2c
 8003ed6:	fb01 f303 	mul.w	r3, r1, r3
 8003eda:	4413      	add	r3, r2
 8003edc:	335c      	adds	r3, #92	; 0x5c
 8003ede:	2200      	movs	r2, #0
 8003ee0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	212c      	movs	r1, #44	; 0x2c
 8003ee8:	fb01 f303 	mul.w	r3, r1, r3
 8003eec:	4413      	add	r3, r2
 8003eee:	3360      	adds	r3, #96	; 0x60
 8003ef0:	2204      	movs	r2, #4
 8003ef2:	701a      	strb	r2, [r3, #0]
 8003ef4:	e021      	b.n	8003f3a <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	212c      	movs	r1, #44	; 0x2c
 8003efc:	fb01 f303 	mul.w	r3, r1, r3
 8003f00:	4413      	add	r3, r2
 8003f02:	3360      	adds	r3, #96	; 0x60
 8003f04:	2202      	movs	r2, #2
 8003f06:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	015a      	lsls	r2, r3, #5
 8003f0c:	69bb      	ldr	r3, [r7, #24]
 8003f0e:	4413      	add	r3, r2
 8003f10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003f1e:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003f26:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	015a      	lsls	r2, r3, #5
 8003f2c:	69bb      	ldr	r3, [r7, #24]
 8003f2e:	4413      	add	r3, r2
 8003f30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f34:	461a      	mov	r2, r3
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	015a      	lsls	r2, r3, #5
 8003f3e:	69bb      	ldr	r3, [r7, #24]
 8003f40:	4413      	add	r3, r2
 8003f42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f46:	461a      	mov	r2, r3
 8003f48:	2302      	movs	r3, #2
 8003f4a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	b2d9      	uxtb	r1, r3
 8003f50:	687a      	ldr	r2, [r7, #4]
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	202c      	movs	r0, #44	; 0x2c
 8003f56:	fb00 f303 	mul.w	r3, r0, r3
 8003f5a:	4413      	add	r3, r2
 8003f5c:	3360      	adds	r3, #96	; 0x60
 8003f5e:	781b      	ldrb	r3, [r3, #0]
 8003f60:	461a      	mov	r2, r3
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f005 f816 	bl	8008f94 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003f68:	bf00      	nop
 8003f6a:	3720      	adds	r7, #32
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}

08003f70 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b08a      	sub	sp, #40	; 0x28
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f80:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	6a1b      	ldr	r3, [r3, #32]
 8003f88:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003f8a:	69fb      	ldr	r3, [r7, #28]
 8003f8c:	f003 030f 	and.w	r3, r3, #15
 8003f90:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003f92:	69fb      	ldr	r3, [r7, #28]
 8003f94:	0c5b      	lsrs	r3, r3, #17
 8003f96:	f003 030f 	and.w	r3, r3, #15
 8003f9a:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003f9c:	69fb      	ldr	r3, [r7, #28]
 8003f9e:	091b      	lsrs	r3, r3, #4
 8003fa0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003fa4:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	2b02      	cmp	r3, #2
 8003faa:	d004      	beq.n	8003fb6 <HCD_RXQLVL_IRQHandler+0x46>
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	2b05      	cmp	r3, #5
 8003fb0:	f000 80a9 	beq.w	8004106 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003fb4:	e0aa      	b.n	800410c <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	f000 80a6 	beq.w	800410a <HCD_RXQLVL_IRQHandler+0x19a>
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	69bb      	ldr	r3, [r7, #24]
 8003fc2:	212c      	movs	r1, #44	; 0x2c
 8003fc4:	fb01 f303 	mul.w	r3, r1, r3
 8003fc8:	4413      	add	r3, r2
 8003fca:	3344      	adds	r3, #68	; 0x44
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	f000 809b 	beq.w	800410a <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003fd4:	687a      	ldr	r2, [r7, #4]
 8003fd6:	69bb      	ldr	r3, [r7, #24]
 8003fd8:	212c      	movs	r1, #44	; 0x2c
 8003fda:	fb01 f303 	mul.w	r3, r1, r3
 8003fde:	4413      	add	r3, r2
 8003fe0:	3350      	adds	r3, #80	; 0x50
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	441a      	add	r2, r3
 8003fe8:	6879      	ldr	r1, [r7, #4]
 8003fea:	69bb      	ldr	r3, [r7, #24]
 8003fec:	202c      	movs	r0, #44	; 0x2c
 8003fee:	fb00 f303 	mul.w	r3, r0, r3
 8003ff2:	440b      	add	r3, r1
 8003ff4:	334c      	adds	r3, #76	; 0x4c
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d87a      	bhi.n	80040f2 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6818      	ldr	r0, [r3, #0]
 8004000:	687a      	ldr	r2, [r7, #4]
 8004002:	69bb      	ldr	r3, [r7, #24]
 8004004:	212c      	movs	r1, #44	; 0x2c
 8004006:	fb01 f303 	mul.w	r3, r1, r3
 800400a:	4413      	add	r3, r2
 800400c:	3344      	adds	r3, #68	; 0x44
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	693a      	ldr	r2, [r7, #16]
 8004012:	b292      	uxth	r2, r2
 8004014:	4619      	mov	r1, r3
 8004016:	f002 f979 	bl	800630c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	69bb      	ldr	r3, [r7, #24]
 800401e:	212c      	movs	r1, #44	; 0x2c
 8004020:	fb01 f303 	mul.w	r3, r1, r3
 8004024:	4413      	add	r3, r2
 8004026:	3344      	adds	r3, #68	; 0x44
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	441a      	add	r2, r3
 800402e:	6879      	ldr	r1, [r7, #4]
 8004030:	69bb      	ldr	r3, [r7, #24]
 8004032:	202c      	movs	r0, #44	; 0x2c
 8004034:	fb00 f303 	mul.w	r3, r0, r3
 8004038:	440b      	add	r3, r1
 800403a:	3344      	adds	r3, #68	; 0x44
 800403c:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 800403e:	687a      	ldr	r2, [r7, #4]
 8004040:	69bb      	ldr	r3, [r7, #24]
 8004042:	212c      	movs	r1, #44	; 0x2c
 8004044:	fb01 f303 	mul.w	r3, r1, r3
 8004048:	4413      	add	r3, r2
 800404a:	3350      	adds	r3, #80	; 0x50
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	441a      	add	r2, r3
 8004052:	6879      	ldr	r1, [r7, #4]
 8004054:	69bb      	ldr	r3, [r7, #24]
 8004056:	202c      	movs	r0, #44	; 0x2c
 8004058:	fb00 f303 	mul.w	r3, r0, r3
 800405c:	440b      	add	r3, r1
 800405e:	3350      	adds	r3, #80	; 0x50
 8004060:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004062:	69bb      	ldr	r3, [r7, #24]
 8004064:	015a      	lsls	r2, r3, #5
 8004066:	6a3b      	ldr	r3, [r7, #32]
 8004068:	4413      	add	r3, r2
 800406a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800406e:	691b      	ldr	r3, [r3, #16]
 8004070:	0cdb      	lsrs	r3, r3, #19
 8004072:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004076:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004078:	687a      	ldr	r2, [r7, #4]
 800407a:	69bb      	ldr	r3, [r7, #24]
 800407c:	212c      	movs	r1, #44	; 0x2c
 800407e:	fb01 f303 	mul.w	r3, r1, r3
 8004082:	4413      	add	r3, r2
 8004084:	3340      	adds	r3, #64	; 0x40
 8004086:	881b      	ldrh	r3, [r3, #0]
 8004088:	461a      	mov	r2, r3
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	4293      	cmp	r3, r2
 800408e:	d13c      	bne.n	800410a <HCD_RXQLVL_IRQHandler+0x19a>
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d039      	beq.n	800410a <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004096:	69bb      	ldr	r3, [r7, #24]
 8004098:	015a      	lsls	r2, r3, #5
 800409a:	6a3b      	ldr	r3, [r7, #32]
 800409c:	4413      	add	r3, r2
 800409e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80040ac:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80040b4:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80040b6:	69bb      	ldr	r3, [r7, #24]
 80040b8:	015a      	lsls	r2, r3, #5
 80040ba:	6a3b      	ldr	r3, [r7, #32]
 80040bc:	4413      	add	r3, r2
 80040be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040c2:	461a      	mov	r2, r3
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80040c8:	687a      	ldr	r2, [r7, #4]
 80040ca:	69bb      	ldr	r3, [r7, #24]
 80040cc:	212c      	movs	r1, #44	; 0x2c
 80040ce:	fb01 f303 	mul.w	r3, r1, r3
 80040d2:	4413      	add	r3, r2
 80040d4:	3354      	adds	r3, #84	; 0x54
 80040d6:	781b      	ldrb	r3, [r3, #0]
 80040d8:	f083 0301 	eor.w	r3, r3, #1
 80040dc:	b2d8      	uxtb	r0, r3
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	69bb      	ldr	r3, [r7, #24]
 80040e2:	212c      	movs	r1, #44	; 0x2c
 80040e4:	fb01 f303 	mul.w	r3, r1, r3
 80040e8:	4413      	add	r3, r2
 80040ea:	3354      	adds	r3, #84	; 0x54
 80040ec:	4602      	mov	r2, r0
 80040ee:	701a      	strb	r2, [r3, #0]
      break;
 80040f0:	e00b      	b.n	800410a <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	69bb      	ldr	r3, [r7, #24]
 80040f6:	212c      	movs	r1, #44	; 0x2c
 80040f8:	fb01 f303 	mul.w	r3, r1, r3
 80040fc:	4413      	add	r3, r2
 80040fe:	3360      	adds	r3, #96	; 0x60
 8004100:	2204      	movs	r2, #4
 8004102:	701a      	strb	r2, [r3, #0]
      break;
 8004104:	e001      	b.n	800410a <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8004106:	bf00      	nop
 8004108:	e000      	b.n	800410c <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 800410a:	bf00      	nop
  }
}
 800410c:	bf00      	nop
 800410e:	3728      	adds	r7, #40	; 0x28
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}

08004114 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b086      	sub	sp, #24
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004140:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	f003 0302 	and.w	r3, r3, #2
 8004148:	2b02      	cmp	r3, #2
 800414a:	d10b      	bne.n	8004164 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f003 0301 	and.w	r3, r3, #1
 8004152:	2b01      	cmp	r3, #1
 8004154:	d102      	bne.n	800415c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f004 ff00 	bl	8008f5c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	f043 0302 	orr.w	r3, r3, #2
 8004162:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f003 0308 	and.w	r3, r3, #8
 800416a:	2b08      	cmp	r3, #8
 800416c:	d132      	bne.n	80041d4 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	f043 0308 	orr.w	r3, r3, #8
 8004174:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	f003 0304 	and.w	r3, r3, #4
 800417c:	2b04      	cmp	r3, #4
 800417e:	d126      	bne.n	80041ce <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	699b      	ldr	r3, [r3, #24]
 8004184:	2b02      	cmp	r3, #2
 8004186:	d113      	bne.n	80041b0 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800418e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004192:	d106      	bne.n	80041a2 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	2102      	movs	r1, #2
 800419a:	4618      	mov	r0, r3
 800419c:	f002 fa16 	bl	80065cc <USB_InitFSLSPClkSel>
 80041a0:	e011      	b.n	80041c6 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	2101      	movs	r1, #1
 80041a8:	4618      	mov	r0, r3
 80041aa:	f002 fa0f 	bl	80065cc <USB_InitFSLSPClkSel>
 80041ae:	e00a      	b.n	80041c6 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	68db      	ldr	r3, [r3, #12]
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d106      	bne.n	80041c6 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80041be:	461a      	mov	r2, r3
 80041c0:	f64e 2360 	movw	r3, #60000	; 0xea60
 80041c4:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f004 fef2 	bl	8008fb0 <HAL_HCD_PortEnabled_Callback>
 80041cc:	e002      	b.n	80041d4 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f004 fefc 	bl	8008fcc <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f003 0320 	and.w	r3, r3, #32
 80041da:	2b20      	cmp	r3, #32
 80041dc:	d103      	bne.n	80041e6 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	f043 0320 	orr.w	r3, r3, #32
 80041e4:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80041ec:	461a      	mov	r2, r3
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	6013      	str	r3, [r2, #0]
}
 80041f2:	bf00      	nop
 80041f4:	3718      	adds	r7, #24
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
	...

080041fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b084      	sub	sp, #16
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d101      	bne.n	800420e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e12b      	b.n	8004466 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004214:	b2db      	uxtb	r3, r3
 8004216:	2b00      	cmp	r3, #0
 8004218:	d106      	bne.n	8004228 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2200      	movs	r2, #0
 800421e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f7fd f8e4 	bl	80013f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2224      	movs	r2, #36	; 0x24
 800422c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f022 0201 	bic.w	r2, r2, #1
 800423e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800424e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800425e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004260:	f001 f9fc 	bl	800565c <HAL_RCC_GetPCLK1Freq>
 8004264:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	4a81      	ldr	r2, [pc, #516]	; (8004470 <HAL_I2C_Init+0x274>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d807      	bhi.n	8004280 <HAL_I2C_Init+0x84>
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	4a80      	ldr	r2, [pc, #512]	; (8004474 <HAL_I2C_Init+0x278>)
 8004274:	4293      	cmp	r3, r2
 8004276:	bf94      	ite	ls
 8004278:	2301      	movls	r3, #1
 800427a:	2300      	movhi	r3, #0
 800427c:	b2db      	uxtb	r3, r3
 800427e:	e006      	b.n	800428e <HAL_I2C_Init+0x92>
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	4a7d      	ldr	r2, [pc, #500]	; (8004478 <HAL_I2C_Init+0x27c>)
 8004284:	4293      	cmp	r3, r2
 8004286:	bf94      	ite	ls
 8004288:	2301      	movls	r3, #1
 800428a:	2300      	movhi	r3, #0
 800428c:	b2db      	uxtb	r3, r3
 800428e:	2b00      	cmp	r3, #0
 8004290:	d001      	beq.n	8004296 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e0e7      	b.n	8004466 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	4a78      	ldr	r2, [pc, #480]	; (800447c <HAL_I2C_Init+0x280>)
 800429a:	fba2 2303 	umull	r2, r3, r2, r3
 800429e:	0c9b      	lsrs	r3, r3, #18
 80042a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	68ba      	ldr	r2, [r7, #8]
 80042b2:	430a      	orrs	r2, r1
 80042b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	6a1b      	ldr	r3, [r3, #32]
 80042bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	4a6a      	ldr	r2, [pc, #424]	; (8004470 <HAL_I2C_Init+0x274>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d802      	bhi.n	80042d0 <HAL_I2C_Init+0xd4>
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	3301      	adds	r3, #1
 80042ce:	e009      	b.n	80042e4 <HAL_I2C_Init+0xe8>
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80042d6:	fb02 f303 	mul.w	r3, r2, r3
 80042da:	4a69      	ldr	r2, [pc, #420]	; (8004480 <HAL_I2C_Init+0x284>)
 80042dc:	fba2 2303 	umull	r2, r3, r2, r3
 80042e0:	099b      	lsrs	r3, r3, #6
 80042e2:	3301      	adds	r3, #1
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	6812      	ldr	r2, [r2, #0]
 80042e8:	430b      	orrs	r3, r1
 80042ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	69db      	ldr	r3, [r3, #28]
 80042f2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80042f6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	495c      	ldr	r1, [pc, #368]	; (8004470 <HAL_I2C_Init+0x274>)
 8004300:	428b      	cmp	r3, r1
 8004302:	d819      	bhi.n	8004338 <HAL_I2C_Init+0x13c>
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	1e59      	subs	r1, r3, #1
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	005b      	lsls	r3, r3, #1
 800430e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004312:	1c59      	adds	r1, r3, #1
 8004314:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004318:	400b      	ands	r3, r1
 800431a:	2b00      	cmp	r3, #0
 800431c:	d00a      	beq.n	8004334 <HAL_I2C_Init+0x138>
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	1e59      	subs	r1, r3, #1
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	005b      	lsls	r3, r3, #1
 8004328:	fbb1 f3f3 	udiv	r3, r1, r3
 800432c:	3301      	adds	r3, #1
 800432e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004332:	e051      	b.n	80043d8 <HAL_I2C_Init+0x1dc>
 8004334:	2304      	movs	r3, #4
 8004336:	e04f      	b.n	80043d8 <HAL_I2C_Init+0x1dc>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d111      	bne.n	8004364 <HAL_I2C_Init+0x168>
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	1e58      	subs	r0, r3, #1
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6859      	ldr	r1, [r3, #4]
 8004348:	460b      	mov	r3, r1
 800434a:	005b      	lsls	r3, r3, #1
 800434c:	440b      	add	r3, r1
 800434e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004352:	3301      	adds	r3, #1
 8004354:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004358:	2b00      	cmp	r3, #0
 800435a:	bf0c      	ite	eq
 800435c:	2301      	moveq	r3, #1
 800435e:	2300      	movne	r3, #0
 8004360:	b2db      	uxtb	r3, r3
 8004362:	e012      	b.n	800438a <HAL_I2C_Init+0x18e>
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	1e58      	subs	r0, r3, #1
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6859      	ldr	r1, [r3, #4]
 800436c:	460b      	mov	r3, r1
 800436e:	009b      	lsls	r3, r3, #2
 8004370:	440b      	add	r3, r1
 8004372:	0099      	lsls	r1, r3, #2
 8004374:	440b      	add	r3, r1
 8004376:	fbb0 f3f3 	udiv	r3, r0, r3
 800437a:	3301      	adds	r3, #1
 800437c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004380:	2b00      	cmp	r3, #0
 8004382:	bf0c      	ite	eq
 8004384:	2301      	moveq	r3, #1
 8004386:	2300      	movne	r3, #0
 8004388:	b2db      	uxtb	r3, r3
 800438a:	2b00      	cmp	r3, #0
 800438c:	d001      	beq.n	8004392 <HAL_I2C_Init+0x196>
 800438e:	2301      	movs	r3, #1
 8004390:	e022      	b.n	80043d8 <HAL_I2C_Init+0x1dc>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d10e      	bne.n	80043b8 <HAL_I2C_Init+0x1bc>
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	1e58      	subs	r0, r3, #1
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6859      	ldr	r1, [r3, #4]
 80043a2:	460b      	mov	r3, r1
 80043a4:	005b      	lsls	r3, r3, #1
 80043a6:	440b      	add	r3, r1
 80043a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80043ac:	3301      	adds	r3, #1
 80043ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043b6:	e00f      	b.n	80043d8 <HAL_I2C_Init+0x1dc>
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	1e58      	subs	r0, r3, #1
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6859      	ldr	r1, [r3, #4]
 80043c0:	460b      	mov	r3, r1
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	440b      	add	r3, r1
 80043c6:	0099      	lsls	r1, r3, #2
 80043c8:	440b      	add	r3, r1
 80043ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80043ce:	3301      	adds	r3, #1
 80043d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80043d8:	6879      	ldr	r1, [r7, #4]
 80043da:	6809      	ldr	r1, [r1, #0]
 80043dc:	4313      	orrs	r3, r2
 80043de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	69da      	ldr	r2, [r3, #28]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6a1b      	ldr	r3, [r3, #32]
 80043f2:	431a      	orrs	r2, r3
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	430a      	orrs	r2, r1
 80043fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004406:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800440a:	687a      	ldr	r2, [r7, #4]
 800440c:	6911      	ldr	r1, [r2, #16]
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	68d2      	ldr	r2, [r2, #12]
 8004412:	4311      	orrs	r1, r2
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	6812      	ldr	r2, [r2, #0]
 8004418:	430b      	orrs	r3, r1
 800441a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	68db      	ldr	r3, [r3, #12]
 8004422:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	695a      	ldr	r2, [r3, #20]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	699b      	ldr	r3, [r3, #24]
 800442e:	431a      	orrs	r2, r3
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	430a      	orrs	r2, r1
 8004436:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f042 0201 	orr.w	r2, r2, #1
 8004446:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2200      	movs	r2, #0
 800444c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2220      	movs	r2, #32
 8004452:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2200      	movs	r2, #0
 8004460:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004464:	2300      	movs	r3, #0
}
 8004466:	4618      	mov	r0, r3
 8004468:	3710      	adds	r7, #16
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}
 800446e:	bf00      	nop
 8004470:	000186a0 	.word	0x000186a0
 8004474:	001e847f 	.word	0x001e847f
 8004478:	003d08ff 	.word	0x003d08ff
 800447c:	431bde83 	.word	0x431bde83
 8004480:	10624dd3 	.word	0x10624dd3

08004484 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b088      	sub	sp, #32
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d101      	bne.n	8004496 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e128      	b.n	80046e8 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800449c:	b2db      	uxtb	r3, r3
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d109      	bne.n	80044b6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2200      	movs	r2, #0
 80044a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	4a90      	ldr	r2, [pc, #576]	; (80046f0 <HAL_I2S_Init+0x26c>)
 80044ae:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80044b0:	6878      	ldr	r0, [r7, #4]
 80044b2:	f7fc ffe5 	bl	8001480 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2202      	movs	r2, #2
 80044ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	69db      	ldr	r3, [r3, #28]
 80044c4:	687a      	ldr	r2, [r7, #4]
 80044c6:	6812      	ldr	r2, [r2, #0]
 80044c8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80044cc:	f023 030f 	bic.w	r3, r3, #15
 80044d0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	2202      	movs	r2, #2
 80044d8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	695b      	ldr	r3, [r3, #20]
 80044de:	2b02      	cmp	r3, #2
 80044e0:	d060      	beq.n	80045a4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	68db      	ldr	r3, [r3, #12]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d102      	bne.n	80044f0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80044ea:	2310      	movs	r3, #16
 80044ec:	617b      	str	r3, [r7, #20]
 80044ee:	e001      	b.n	80044f4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80044f0:	2320      	movs	r3, #32
 80044f2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	2b20      	cmp	r3, #32
 80044fa:	d802      	bhi.n	8004502 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	005b      	lsls	r3, r3, #1
 8004500:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004502:	2001      	movs	r0, #1
 8004504:	f001 f9b4 	bl	8005870 <HAL_RCCEx_GetPeriphCLKFreq>
 8004508:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	691b      	ldr	r3, [r3, #16]
 800450e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004512:	d125      	bne.n	8004560 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d010      	beq.n	800453e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	68fa      	ldr	r2, [r7, #12]
 8004522:	fbb2 f2f3 	udiv	r2, r2, r3
 8004526:	4613      	mov	r3, r2
 8004528:	009b      	lsls	r3, r3, #2
 800452a:	4413      	add	r3, r2
 800452c:	005b      	lsls	r3, r3, #1
 800452e:	461a      	mov	r2, r3
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	695b      	ldr	r3, [r3, #20]
 8004534:	fbb2 f3f3 	udiv	r3, r2, r3
 8004538:	3305      	adds	r3, #5
 800453a:	613b      	str	r3, [r7, #16]
 800453c:	e01f      	b.n	800457e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	00db      	lsls	r3, r3, #3
 8004542:	68fa      	ldr	r2, [r7, #12]
 8004544:	fbb2 f2f3 	udiv	r2, r2, r3
 8004548:	4613      	mov	r3, r2
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	4413      	add	r3, r2
 800454e:	005b      	lsls	r3, r3, #1
 8004550:	461a      	mov	r2, r3
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	695b      	ldr	r3, [r3, #20]
 8004556:	fbb2 f3f3 	udiv	r3, r2, r3
 800455a:	3305      	adds	r3, #5
 800455c:	613b      	str	r3, [r7, #16]
 800455e:	e00e      	b.n	800457e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004560:	68fa      	ldr	r2, [r7, #12]
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	fbb2 f2f3 	udiv	r2, r2, r3
 8004568:	4613      	mov	r3, r2
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	4413      	add	r3, r2
 800456e:	005b      	lsls	r3, r3, #1
 8004570:	461a      	mov	r2, r3
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	695b      	ldr	r3, [r3, #20]
 8004576:	fbb2 f3f3 	udiv	r3, r2, r3
 800457a:	3305      	adds	r3, #5
 800457c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	4a5c      	ldr	r2, [pc, #368]	; (80046f4 <HAL_I2S_Init+0x270>)
 8004582:	fba2 2303 	umull	r2, r3, r2, r3
 8004586:	08db      	lsrs	r3, r3, #3
 8004588:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	f003 0301 	and.w	r3, r3, #1
 8004590:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004592:	693a      	ldr	r2, [r7, #16]
 8004594:	69bb      	ldr	r3, [r7, #24]
 8004596:	1ad3      	subs	r3, r2, r3
 8004598:	085b      	lsrs	r3, r3, #1
 800459a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800459c:	69bb      	ldr	r3, [r7, #24]
 800459e:	021b      	lsls	r3, r3, #8
 80045a0:	61bb      	str	r3, [r7, #24]
 80045a2:	e003      	b.n	80045ac <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80045a4:	2302      	movs	r3, #2
 80045a6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80045a8:	2300      	movs	r3, #0
 80045aa:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80045ac:	69fb      	ldr	r3, [r7, #28]
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d902      	bls.n	80045b8 <HAL_I2S_Init+0x134>
 80045b2:	69fb      	ldr	r3, [r7, #28]
 80045b4:	2bff      	cmp	r3, #255	; 0xff
 80045b6:	d907      	bls.n	80045c8 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045bc:	f043 0210 	orr.w	r2, r3, #16
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	e08f      	b.n	80046e8 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	691a      	ldr	r2, [r3, #16]
 80045cc:	69bb      	ldr	r3, [r7, #24]
 80045ce:	ea42 0103 	orr.w	r1, r2, r3
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	69fa      	ldr	r2, [r7, #28]
 80045d8:	430a      	orrs	r2, r1
 80045da:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	69db      	ldr	r3, [r3, #28]
 80045e2:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80045e6:	f023 030f 	bic.w	r3, r3, #15
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	6851      	ldr	r1, [r2, #4]
 80045ee:	687a      	ldr	r2, [r7, #4]
 80045f0:	6892      	ldr	r2, [r2, #8]
 80045f2:	4311      	orrs	r1, r2
 80045f4:	687a      	ldr	r2, [r7, #4]
 80045f6:	68d2      	ldr	r2, [r2, #12]
 80045f8:	4311      	orrs	r1, r2
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	6992      	ldr	r2, [r2, #24]
 80045fe:	430a      	orrs	r2, r1
 8004600:	431a      	orrs	r2, r3
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800460a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6a1b      	ldr	r3, [r3, #32]
 8004610:	2b01      	cmp	r3, #1
 8004612:	d161      	bne.n	80046d8 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	4a38      	ldr	r2, [pc, #224]	; (80046f8 <HAL_I2S_Init+0x274>)
 8004618:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a37      	ldr	r2, [pc, #220]	; (80046fc <HAL_I2S_Init+0x278>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d101      	bne.n	8004628 <HAL_I2S_Init+0x1a4>
 8004624:	4b36      	ldr	r3, [pc, #216]	; (8004700 <HAL_I2S_Init+0x27c>)
 8004626:	e001      	b.n	800462c <HAL_I2S_Init+0x1a8>
 8004628:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800462c:	69db      	ldr	r3, [r3, #28]
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	6812      	ldr	r2, [r2, #0]
 8004632:	4932      	ldr	r1, [pc, #200]	; (80046fc <HAL_I2S_Init+0x278>)
 8004634:	428a      	cmp	r2, r1
 8004636:	d101      	bne.n	800463c <HAL_I2S_Init+0x1b8>
 8004638:	4a31      	ldr	r2, [pc, #196]	; (8004700 <HAL_I2S_Init+0x27c>)
 800463a:	e001      	b.n	8004640 <HAL_I2S_Init+0x1bc>
 800463c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8004640:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004644:	f023 030f 	bic.w	r3, r3, #15
 8004648:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a2b      	ldr	r2, [pc, #172]	; (80046fc <HAL_I2S_Init+0x278>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d101      	bne.n	8004658 <HAL_I2S_Init+0x1d4>
 8004654:	4b2a      	ldr	r3, [pc, #168]	; (8004700 <HAL_I2S_Init+0x27c>)
 8004656:	e001      	b.n	800465c <HAL_I2S_Init+0x1d8>
 8004658:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800465c:	2202      	movs	r2, #2
 800465e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a25      	ldr	r2, [pc, #148]	; (80046fc <HAL_I2S_Init+0x278>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d101      	bne.n	800466e <HAL_I2S_Init+0x1ea>
 800466a:	4b25      	ldr	r3, [pc, #148]	; (8004700 <HAL_I2S_Init+0x27c>)
 800466c:	e001      	b.n	8004672 <HAL_I2S_Init+0x1ee>
 800466e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004672:	69db      	ldr	r3, [r3, #28]
 8004674:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800467e:	d003      	beq.n	8004688 <HAL_I2S_Init+0x204>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d103      	bne.n	8004690 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004688:	f44f 7380 	mov.w	r3, #256	; 0x100
 800468c:	613b      	str	r3, [r7, #16]
 800468e:	e001      	b.n	8004694 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004690:	2300      	movs	r3, #0
 8004692:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800469e:	4313      	orrs	r3, r2
 80046a0:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	68db      	ldr	r3, [r3, #12]
 80046a6:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80046a8:	4313      	orrs	r3, r2
 80046aa:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	699b      	ldr	r3, [r3, #24]
 80046b0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80046b2:	4313      	orrs	r3, r2
 80046b4:	b29a      	uxth	r2, r3
 80046b6:	897b      	ldrh	r3, [r7, #10]
 80046b8:	4313      	orrs	r3, r2
 80046ba:	b29b      	uxth	r3, r3
 80046bc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80046c0:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a0d      	ldr	r2, [pc, #52]	; (80046fc <HAL_I2S_Init+0x278>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d101      	bne.n	80046d0 <HAL_I2S_Init+0x24c>
 80046cc:	4b0c      	ldr	r3, [pc, #48]	; (8004700 <HAL_I2S_Init+0x27c>)
 80046ce:	e001      	b.n	80046d4 <HAL_I2S_Init+0x250>
 80046d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80046d4:	897a      	ldrh	r2, [r7, #10]
 80046d6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2200      	movs	r2, #0
 80046dc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2201      	movs	r2, #1
 80046e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80046e6:	2300      	movs	r3, #0
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3720      	adds	r7, #32
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}
 80046f0:	080047fb 	.word	0x080047fb
 80046f4:	cccccccd 	.word	0xcccccccd
 80046f8:	08004911 	.word	0x08004911
 80046fc:	40003800 	.word	0x40003800
 8004700:	40003400 	.word	0x40003400

08004704 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004704:	b480      	push	{r7}
 8004706:	b083      	sub	sp, #12
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800470c:	bf00      	nop
 800470e:	370c      	adds	r7, #12
 8004710:	46bd      	mov	sp, r7
 8004712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004716:	4770      	bx	lr

08004718 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004718:	b480      	push	{r7}
 800471a:	b083      	sub	sp, #12
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004720:	bf00      	nop
 8004722:	370c      	adds	r7, #12
 8004724:	46bd      	mov	sp, r7
 8004726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472a:	4770      	bx	lr

0800472c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800472c:	b480      	push	{r7}
 800472e:	b083      	sub	sp, #12
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004734:	bf00      	nop
 8004736:	370c      	adds	r7, #12
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr

08004740 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b082      	sub	sp, #8
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474c:	881a      	ldrh	r2, [r3, #0]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004758:	1c9a      	adds	r2, r3, #2
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004762:	b29b      	uxth	r3, r3
 8004764:	3b01      	subs	r3, #1
 8004766:	b29a      	uxth	r2, r3
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004770:	b29b      	uxth	r3, r3
 8004772:	2b00      	cmp	r3, #0
 8004774:	d10e      	bne.n	8004794 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	685a      	ldr	r2, [r3, #4]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004784:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2201      	movs	r2, #1
 800478a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f7ff ffb8 	bl	8004704 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004794:	bf00      	nop
 8004796:	3708      	adds	r7, #8
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}

0800479c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b082      	sub	sp, #8
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	68da      	ldr	r2, [r3, #12]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ae:	b292      	uxth	r2, r2
 80047b0:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047b6:	1c9a      	adds	r2, r3, #2
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80047c0:	b29b      	uxth	r3, r3
 80047c2:	3b01      	subs	r3, #1
 80047c4:	b29a      	uxth	r2, r3
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d10e      	bne.n	80047f2 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	685a      	ldr	r2, [r3, #4]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80047e2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2201      	movs	r2, #1
 80047e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f7ff ff93 	bl	8004718 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80047f2:	bf00      	nop
 80047f4:	3708      	adds	r7, #8
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}

080047fa <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80047fa:	b580      	push	{r7, lr}
 80047fc:	b086      	sub	sp, #24
 80047fe:	af00      	add	r7, sp, #0
 8004800:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004810:	b2db      	uxtb	r3, r3
 8004812:	2b04      	cmp	r3, #4
 8004814:	d13a      	bne.n	800488c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	f003 0301 	and.w	r3, r3, #1
 800481c:	2b01      	cmp	r3, #1
 800481e:	d109      	bne.n	8004834 <I2S_IRQHandler+0x3a>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800482a:	2b40      	cmp	r3, #64	; 0x40
 800482c:	d102      	bne.n	8004834 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f7ff ffb4 	bl	800479c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800483a:	2b40      	cmp	r3, #64	; 0x40
 800483c:	d126      	bne.n	800488c <I2S_IRQHandler+0x92>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	f003 0320 	and.w	r3, r3, #32
 8004848:	2b20      	cmp	r3, #32
 800484a:	d11f      	bne.n	800488c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	685a      	ldr	r2, [r3, #4]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800485a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800485c:	2300      	movs	r3, #0
 800485e:	613b      	str	r3, [r7, #16]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	68db      	ldr	r3, [r3, #12]
 8004866:	613b      	str	r3, [r7, #16]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	613b      	str	r3, [r7, #16]
 8004870:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2201      	movs	r2, #1
 8004876:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800487e:	f043 0202 	orr.w	r2, r3, #2
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f7ff ff50 	bl	800472c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004892:	b2db      	uxtb	r3, r3
 8004894:	2b03      	cmp	r3, #3
 8004896:	d136      	bne.n	8004906 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	f003 0302 	and.w	r3, r3, #2
 800489e:	2b02      	cmp	r3, #2
 80048a0:	d109      	bne.n	80048b6 <I2S_IRQHandler+0xbc>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048ac:	2b80      	cmp	r3, #128	; 0x80
 80048ae:	d102      	bne.n	80048b6 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	f7ff ff45 	bl	8004740 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	f003 0308 	and.w	r3, r3, #8
 80048bc:	2b08      	cmp	r3, #8
 80048be:	d122      	bne.n	8004906 <I2S_IRQHandler+0x10c>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	f003 0320 	and.w	r3, r3, #32
 80048ca:	2b20      	cmp	r3, #32
 80048cc:	d11b      	bne.n	8004906 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	685a      	ldr	r2, [r3, #4]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80048dc:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80048de:	2300      	movs	r3, #0
 80048e0:	60fb      	str	r3, [r7, #12]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	60fb      	str	r3, [r7, #12]
 80048ea:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2201      	movs	r2, #1
 80048f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048f8:	f043 0204 	orr.w	r2, r3, #4
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f7ff ff13 	bl	800472c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004906:	bf00      	nop
 8004908:	3718      	adds	r7, #24
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}
	...

08004910 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b088      	sub	sp, #32
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4aa2      	ldr	r2, [pc, #648]	; (8004bb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d101      	bne.n	800492e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800492a:	4ba2      	ldr	r3, [pc, #648]	; (8004bb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800492c:	e001      	b.n	8004932 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800492e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a9b      	ldr	r2, [pc, #620]	; (8004bb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d101      	bne.n	800494c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004948:	4b9a      	ldr	r3, [pc, #616]	; (8004bb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800494a:	e001      	b.n	8004950 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800494c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800495c:	d004      	beq.n	8004968 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	2b00      	cmp	r3, #0
 8004964:	f040 8099 	bne.w	8004a9a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004968:	69fb      	ldr	r3, [r7, #28]
 800496a:	f003 0302 	and.w	r3, r3, #2
 800496e:	2b02      	cmp	r3, #2
 8004970:	d107      	bne.n	8004982 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004978:	2b00      	cmp	r3, #0
 800497a:	d002      	beq.n	8004982 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	f000 f925 	bl	8004bcc <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004982:	69bb      	ldr	r3, [r7, #24]
 8004984:	f003 0301 	and.w	r3, r3, #1
 8004988:	2b01      	cmp	r3, #1
 800498a:	d107      	bne.n	800499c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004992:	2b00      	cmp	r3, #0
 8004994:	d002      	beq.n	800499c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f000 f9c8 	bl	8004d2c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800499c:	69bb      	ldr	r3, [r7, #24]
 800499e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049a2:	2b40      	cmp	r3, #64	; 0x40
 80049a4:	d13a      	bne.n	8004a1c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	f003 0320 	and.w	r3, r3, #32
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d035      	beq.n	8004a1c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a7e      	ldr	r2, [pc, #504]	; (8004bb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d101      	bne.n	80049be <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80049ba:	4b7e      	ldr	r3, [pc, #504]	; (8004bb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80049bc:	e001      	b.n	80049c2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80049be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80049c2:	685a      	ldr	r2, [r3, #4]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4979      	ldr	r1, [pc, #484]	; (8004bb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80049ca:	428b      	cmp	r3, r1
 80049cc:	d101      	bne.n	80049d2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80049ce:	4b79      	ldr	r3, [pc, #484]	; (8004bb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80049d0:	e001      	b.n	80049d6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80049d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80049d6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80049da:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	685a      	ldr	r2, [r3, #4]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80049ea:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80049ec:	2300      	movs	r3, #0
 80049ee:	60fb      	str	r3, [r7, #12]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	68db      	ldr	r3, [r3, #12]
 80049f6:	60fb      	str	r3, [r7, #12]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	60fb      	str	r3, [r7, #12]
 8004a00:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2201      	movs	r2, #1
 8004a06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a0e:	f043 0202 	orr.w	r2, r3, #2
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f7ff fe88 	bl	800472c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004a1c:	69fb      	ldr	r3, [r7, #28]
 8004a1e:	f003 0308 	and.w	r3, r3, #8
 8004a22:	2b08      	cmp	r3, #8
 8004a24:	f040 80be 	bne.w	8004ba4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	f003 0320 	and.w	r3, r3, #32
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	f000 80b8 	beq.w	8004ba4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	685a      	ldr	r2, [r3, #4]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004a42:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a59      	ldr	r2, [pc, #356]	; (8004bb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d101      	bne.n	8004a52 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004a4e:	4b59      	ldr	r3, [pc, #356]	; (8004bb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004a50:	e001      	b.n	8004a56 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004a52:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a56:	685a      	ldr	r2, [r3, #4]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4954      	ldr	r1, [pc, #336]	; (8004bb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004a5e:	428b      	cmp	r3, r1
 8004a60:	d101      	bne.n	8004a66 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004a62:	4b54      	ldr	r3, [pc, #336]	; (8004bb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004a64:	e001      	b.n	8004a6a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004a66:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a6a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004a6e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004a70:	2300      	movs	r3, #0
 8004a72:	60bb      	str	r3, [r7, #8]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	60bb      	str	r3, [r7, #8]
 8004a7c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2201      	movs	r2, #1
 8004a82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a8a:	f043 0204 	orr.w	r2, r3, #4
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f7ff fe4a 	bl	800472c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004a98:	e084      	b.n	8004ba4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004a9a:	69bb      	ldr	r3, [r7, #24]
 8004a9c:	f003 0302 	and.w	r3, r3, #2
 8004aa0:	2b02      	cmp	r3, #2
 8004aa2:	d107      	bne.n	8004ab4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d002      	beq.n	8004ab4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f000 f8be 	bl	8004c30 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004ab4:	69fb      	ldr	r3, [r7, #28]
 8004ab6:	f003 0301 	and.w	r3, r3, #1
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d107      	bne.n	8004ace <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d002      	beq.n	8004ace <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	f000 f8fd 	bl	8004cc8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004ace:	69fb      	ldr	r3, [r7, #28]
 8004ad0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ad4:	2b40      	cmp	r3, #64	; 0x40
 8004ad6:	d12f      	bne.n	8004b38 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	f003 0320 	and.w	r3, r3, #32
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d02a      	beq.n	8004b38 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	685a      	ldr	r2, [r3, #4]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004af0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a2e      	ldr	r2, [pc, #184]	; (8004bb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d101      	bne.n	8004b00 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004afc:	4b2d      	ldr	r3, [pc, #180]	; (8004bb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004afe:	e001      	b.n	8004b04 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004b00:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b04:	685a      	ldr	r2, [r3, #4]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4929      	ldr	r1, [pc, #164]	; (8004bb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004b0c:	428b      	cmp	r3, r1
 8004b0e:	d101      	bne.n	8004b14 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004b10:	4b28      	ldr	r3, [pc, #160]	; (8004bb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004b12:	e001      	b.n	8004b18 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004b14:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b18:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004b1c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2201      	movs	r2, #1
 8004b22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b2a:	f043 0202 	orr.w	r2, r3, #2
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f7ff fdfa 	bl	800472c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004b38:	69bb      	ldr	r3, [r7, #24]
 8004b3a:	f003 0308 	and.w	r3, r3, #8
 8004b3e:	2b08      	cmp	r3, #8
 8004b40:	d131      	bne.n	8004ba6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	f003 0320 	and.w	r3, r3, #32
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d02c      	beq.n	8004ba6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a17      	ldr	r2, [pc, #92]	; (8004bb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d101      	bne.n	8004b5a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004b56:	4b17      	ldr	r3, [pc, #92]	; (8004bb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004b58:	e001      	b.n	8004b5e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004b5a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b5e:	685a      	ldr	r2, [r3, #4]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4912      	ldr	r1, [pc, #72]	; (8004bb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004b66:	428b      	cmp	r3, r1
 8004b68:	d101      	bne.n	8004b6e <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8004b6a:	4b12      	ldr	r3, [pc, #72]	; (8004bb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004b6c:	e001      	b.n	8004b72 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8004b6e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b72:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004b76:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	685a      	ldr	r2, [r3, #4]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004b86:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b94:	f043 0204 	orr.w	r2, r3, #4
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	f7ff fdc5 	bl	800472c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004ba2:	e000      	b.n	8004ba6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004ba4:	bf00      	nop
}
 8004ba6:	bf00      	nop
 8004ba8:	3720      	adds	r7, #32
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}
 8004bae:	bf00      	nop
 8004bb0:	40003800 	.word	0x40003800
 8004bb4:	40003400 	.word	0x40003400

08004bb8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b083      	sub	sp, #12
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004bc0:	bf00      	nop
 8004bc2:	370c      	adds	r7, #12
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr

08004bcc <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b082      	sub	sp, #8
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd8:	1c99      	adds	r1, r3, #2
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	6251      	str	r1, [r2, #36]	; 0x24
 8004bde:	881a      	ldrh	r2, [r3, #0]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	3b01      	subs	r3, #1
 8004bee:	b29a      	uxth	r2, r3
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bf8:	b29b      	uxth	r3, r3
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d113      	bne.n	8004c26 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	685a      	ldr	r2, [r3, #4]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004c0c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004c12:	b29b      	uxth	r3, r3
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d106      	bne.n	8004c26 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f7ff ffc9 	bl	8004bb8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004c26:	bf00      	nop
 8004c28:	3708      	adds	r7, #8
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}
	...

08004c30 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b082      	sub	sp, #8
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c3c:	1c99      	adds	r1, r3, #2
 8004c3e:	687a      	ldr	r2, [r7, #4]
 8004c40:	6251      	str	r1, [r2, #36]	; 0x24
 8004c42:	8819      	ldrh	r1, [r3, #0]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a1d      	ldr	r2, [pc, #116]	; (8004cc0 <I2SEx_TxISR_I2SExt+0x90>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d101      	bne.n	8004c52 <I2SEx_TxISR_I2SExt+0x22>
 8004c4e:	4b1d      	ldr	r3, [pc, #116]	; (8004cc4 <I2SEx_TxISR_I2SExt+0x94>)
 8004c50:	e001      	b.n	8004c56 <I2SEx_TxISR_I2SExt+0x26>
 8004c52:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c56:	460a      	mov	r2, r1
 8004c58:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	3b01      	subs	r3, #1
 8004c62:	b29a      	uxth	r2, r3
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d121      	bne.n	8004cb6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a12      	ldr	r2, [pc, #72]	; (8004cc0 <I2SEx_TxISR_I2SExt+0x90>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d101      	bne.n	8004c80 <I2SEx_TxISR_I2SExt+0x50>
 8004c7c:	4b11      	ldr	r3, [pc, #68]	; (8004cc4 <I2SEx_TxISR_I2SExt+0x94>)
 8004c7e:	e001      	b.n	8004c84 <I2SEx_TxISR_I2SExt+0x54>
 8004c80:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c84:	685a      	ldr	r2, [r3, #4]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	490d      	ldr	r1, [pc, #52]	; (8004cc0 <I2SEx_TxISR_I2SExt+0x90>)
 8004c8c:	428b      	cmp	r3, r1
 8004c8e:	d101      	bne.n	8004c94 <I2SEx_TxISR_I2SExt+0x64>
 8004c90:	4b0c      	ldr	r3, [pc, #48]	; (8004cc4 <I2SEx_TxISR_I2SExt+0x94>)
 8004c92:	e001      	b.n	8004c98 <I2SEx_TxISR_I2SExt+0x68>
 8004c94:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c98:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004c9c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d106      	bne.n	8004cb6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2201      	movs	r2, #1
 8004cac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	f7ff ff81 	bl	8004bb8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004cb6:	bf00      	nop
 8004cb8:	3708      	adds	r7, #8
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}
 8004cbe:	bf00      	nop
 8004cc0:	40003800 	.word	0x40003800
 8004cc4:	40003400 	.word	0x40003400

08004cc8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b082      	sub	sp, #8
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	68d8      	ldr	r0, [r3, #12]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cda:	1c99      	adds	r1, r3, #2
 8004cdc:	687a      	ldr	r2, [r7, #4]
 8004cde:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004ce0:	b282      	uxth	r2, r0
 8004ce2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004ce8:	b29b      	uxth	r3, r3
 8004cea:	3b01      	subs	r3, #1
 8004cec:	b29a      	uxth	r2, r3
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004cf6:	b29b      	uxth	r3, r3
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d113      	bne.n	8004d24 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	685a      	ldr	r2, [r3, #4]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004d0a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d10:	b29b      	uxth	r3, r3
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d106      	bne.n	8004d24 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2201      	movs	r2, #1
 8004d1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f7ff ff4a 	bl	8004bb8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004d24:	bf00      	nop
 8004d26:	3708      	adds	r7, #8
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}

08004d2c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b082      	sub	sp, #8
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a20      	ldr	r2, [pc, #128]	; (8004dbc <I2SEx_RxISR_I2SExt+0x90>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d101      	bne.n	8004d42 <I2SEx_RxISR_I2SExt+0x16>
 8004d3e:	4b20      	ldr	r3, [pc, #128]	; (8004dc0 <I2SEx_RxISR_I2SExt+0x94>)
 8004d40:	e001      	b.n	8004d46 <I2SEx_RxISR_I2SExt+0x1a>
 8004d42:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004d46:	68d8      	ldr	r0, [r3, #12]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d4c:	1c99      	adds	r1, r3, #2
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004d52:	b282      	uxth	r2, r0
 8004d54:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	3b01      	subs	r3, #1
 8004d5e:	b29a      	uxth	r2, r3
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004d68:	b29b      	uxth	r3, r3
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d121      	bne.n	8004db2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a12      	ldr	r2, [pc, #72]	; (8004dbc <I2SEx_RxISR_I2SExt+0x90>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d101      	bne.n	8004d7c <I2SEx_RxISR_I2SExt+0x50>
 8004d78:	4b11      	ldr	r3, [pc, #68]	; (8004dc0 <I2SEx_RxISR_I2SExt+0x94>)
 8004d7a:	e001      	b.n	8004d80 <I2SEx_RxISR_I2SExt+0x54>
 8004d7c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004d80:	685a      	ldr	r2, [r3, #4]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	490d      	ldr	r1, [pc, #52]	; (8004dbc <I2SEx_RxISR_I2SExt+0x90>)
 8004d88:	428b      	cmp	r3, r1
 8004d8a:	d101      	bne.n	8004d90 <I2SEx_RxISR_I2SExt+0x64>
 8004d8c:	4b0c      	ldr	r3, [pc, #48]	; (8004dc0 <I2SEx_RxISR_I2SExt+0x94>)
 8004d8e:	e001      	b.n	8004d94 <I2SEx_RxISR_I2SExt+0x68>
 8004d90:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004d94:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004d98:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d106      	bne.n	8004db2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2201      	movs	r2, #1
 8004da8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004dac:	6878      	ldr	r0, [r7, #4]
 8004dae:	f7ff ff03 	bl	8004bb8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004db2:	bf00      	nop
 8004db4:	3708      	adds	r7, #8
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}
 8004dba:	bf00      	nop
 8004dbc:	40003800 	.word	0x40003800
 8004dc0:	40003400 	.word	0x40003400

08004dc4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b086      	sub	sp, #24
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d101      	bne.n	8004dd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e264      	b.n	80052a0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f003 0301 	and.w	r3, r3, #1
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d075      	beq.n	8004ece <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004de2:	4ba3      	ldr	r3, [pc, #652]	; (8005070 <HAL_RCC_OscConfig+0x2ac>)
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	f003 030c 	and.w	r3, r3, #12
 8004dea:	2b04      	cmp	r3, #4
 8004dec:	d00c      	beq.n	8004e08 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004dee:	4ba0      	ldr	r3, [pc, #640]	; (8005070 <HAL_RCC_OscConfig+0x2ac>)
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004df6:	2b08      	cmp	r3, #8
 8004df8:	d112      	bne.n	8004e20 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004dfa:	4b9d      	ldr	r3, [pc, #628]	; (8005070 <HAL_RCC_OscConfig+0x2ac>)
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e06:	d10b      	bne.n	8004e20 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e08:	4b99      	ldr	r3, [pc, #612]	; (8005070 <HAL_RCC_OscConfig+0x2ac>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d05b      	beq.n	8004ecc <HAL_RCC_OscConfig+0x108>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d157      	bne.n	8004ecc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	e23f      	b.n	80052a0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e28:	d106      	bne.n	8004e38 <HAL_RCC_OscConfig+0x74>
 8004e2a:	4b91      	ldr	r3, [pc, #580]	; (8005070 <HAL_RCC_OscConfig+0x2ac>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a90      	ldr	r2, [pc, #576]	; (8005070 <HAL_RCC_OscConfig+0x2ac>)
 8004e30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e34:	6013      	str	r3, [r2, #0]
 8004e36:	e01d      	b.n	8004e74 <HAL_RCC_OscConfig+0xb0>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e40:	d10c      	bne.n	8004e5c <HAL_RCC_OscConfig+0x98>
 8004e42:	4b8b      	ldr	r3, [pc, #556]	; (8005070 <HAL_RCC_OscConfig+0x2ac>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a8a      	ldr	r2, [pc, #552]	; (8005070 <HAL_RCC_OscConfig+0x2ac>)
 8004e48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e4c:	6013      	str	r3, [r2, #0]
 8004e4e:	4b88      	ldr	r3, [pc, #544]	; (8005070 <HAL_RCC_OscConfig+0x2ac>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a87      	ldr	r2, [pc, #540]	; (8005070 <HAL_RCC_OscConfig+0x2ac>)
 8004e54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e58:	6013      	str	r3, [r2, #0]
 8004e5a:	e00b      	b.n	8004e74 <HAL_RCC_OscConfig+0xb0>
 8004e5c:	4b84      	ldr	r3, [pc, #528]	; (8005070 <HAL_RCC_OscConfig+0x2ac>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a83      	ldr	r2, [pc, #524]	; (8005070 <HAL_RCC_OscConfig+0x2ac>)
 8004e62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e66:	6013      	str	r3, [r2, #0]
 8004e68:	4b81      	ldr	r3, [pc, #516]	; (8005070 <HAL_RCC_OscConfig+0x2ac>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a80      	ldr	r2, [pc, #512]	; (8005070 <HAL_RCC_OscConfig+0x2ac>)
 8004e6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d013      	beq.n	8004ea4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e7c:	f7fc fd3e 	bl	80018fc <HAL_GetTick>
 8004e80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e82:	e008      	b.n	8004e96 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e84:	f7fc fd3a 	bl	80018fc <HAL_GetTick>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	1ad3      	subs	r3, r2, r3
 8004e8e:	2b64      	cmp	r3, #100	; 0x64
 8004e90:	d901      	bls.n	8004e96 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004e92:	2303      	movs	r3, #3
 8004e94:	e204      	b.n	80052a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e96:	4b76      	ldr	r3, [pc, #472]	; (8005070 <HAL_RCC_OscConfig+0x2ac>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d0f0      	beq.n	8004e84 <HAL_RCC_OscConfig+0xc0>
 8004ea2:	e014      	b.n	8004ece <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ea4:	f7fc fd2a 	bl	80018fc <HAL_GetTick>
 8004ea8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004eaa:	e008      	b.n	8004ebe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004eac:	f7fc fd26 	bl	80018fc <HAL_GetTick>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	1ad3      	subs	r3, r2, r3
 8004eb6:	2b64      	cmp	r3, #100	; 0x64
 8004eb8:	d901      	bls.n	8004ebe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004eba:	2303      	movs	r3, #3
 8004ebc:	e1f0      	b.n	80052a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ebe:	4b6c      	ldr	r3, [pc, #432]	; (8005070 <HAL_RCC_OscConfig+0x2ac>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d1f0      	bne.n	8004eac <HAL_RCC_OscConfig+0xe8>
 8004eca:	e000      	b.n	8004ece <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ecc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f003 0302 	and.w	r3, r3, #2
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d063      	beq.n	8004fa2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004eda:	4b65      	ldr	r3, [pc, #404]	; (8005070 <HAL_RCC_OscConfig+0x2ac>)
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	f003 030c 	and.w	r3, r3, #12
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d00b      	beq.n	8004efe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ee6:	4b62      	ldr	r3, [pc, #392]	; (8005070 <HAL_RCC_OscConfig+0x2ac>)
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004eee:	2b08      	cmp	r3, #8
 8004ef0:	d11c      	bne.n	8004f2c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ef2:	4b5f      	ldr	r3, [pc, #380]	; (8005070 <HAL_RCC_OscConfig+0x2ac>)
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d116      	bne.n	8004f2c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004efe:	4b5c      	ldr	r3, [pc, #368]	; (8005070 <HAL_RCC_OscConfig+0x2ac>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f003 0302 	and.w	r3, r3, #2
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d005      	beq.n	8004f16 <HAL_RCC_OscConfig+0x152>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	68db      	ldr	r3, [r3, #12]
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d001      	beq.n	8004f16 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	e1c4      	b.n	80052a0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f16:	4b56      	ldr	r3, [pc, #344]	; (8005070 <HAL_RCC_OscConfig+0x2ac>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	691b      	ldr	r3, [r3, #16]
 8004f22:	00db      	lsls	r3, r3, #3
 8004f24:	4952      	ldr	r1, [pc, #328]	; (8005070 <HAL_RCC_OscConfig+0x2ac>)
 8004f26:	4313      	orrs	r3, r2
 8004f28:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f2a:	e03a      	b.n	8004fa2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	68db      	ldr	r3, [r3, #12]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d020      	beq.n	8004f76 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f34:	4b4f      	ldr	r3, [pc, #316]	; (8005074 <HAL_RCC_OscConfig+0x2b0>)
 8004f36:	2201      	movs	r2, #1
 8004f38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f3a:	f7fc fcdf 	bl	80018fc <HAL_GetTick>
 8004f3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f40:	e008      	b.n	8004f54 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f42:	f7fc fcdb 	bl	80018fc <HAL_GetTick>
 8004f46:	4602      	mov	r2, r0
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	1ad3      	subs	r3, r2, r3
 8004f4c:	2b02      	cmp	r3, #2
 8004f4e:	d901      	bls.n	8004f54 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004f50:	2303      	movs	r3, #3
 8004f52:	e1a5      	b.n	80052a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f54:	4b46      	ldr	r3, [pc, #280]	; (8005070 <HAL_RCC_OscConfig+0x2ac>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f003 0302 	and.w	r3, r3, #2
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d0f0      	beq.n	8004f42 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f60:	4b43      	ldr	r3, [pc, #268]	; (8005070 <HAL_RCC_OscConfig+0x2ac>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	691b      	ldr	r3, [r3, #16]
 8004f6c:	00db      	lsls	r3, r3, #3
 8004f6e:	4940      	ldr	r1, [pc, #256]	; (8005070 <HAL_RCC_OscConfig+0x2ac>)
 8004f70:	4313      	orrs	r3, r2
 8004f72:	600b      	str	r3, [r1, #0]
 8004f74:	e015      	b.n	8004fa2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f76:	4b3f      	ldr	r3, [pc, #252]	; (8005074 <HAL_RCC_OscConfig+0x2b0>)
 8004f78:	2200      	movs	r2, #0
 8004f7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f7c:	f7fc fcbe 	bl	80018fc <HAL_GetTick>
 8004f80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f82:	e008      	b.n	8004f96 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f84:	f7fc fcba 	bl	80018fc <HAL_GetTick>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	1ad3      	subs	r3, r2, r3
 8004f8e:	2b02      	cmp	r3, #2
 8004f90:	d901      	bls.n	8004f96 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004f92:	2303      	movs	r3, #3
 8004f94:	e184      	b.n	80052a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f96:	4b36      	ldr	r3, [pc, #216]	; (8005070 <HAL_RCC_OscConfig+0x2ac>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f003 0302 	and.w	r3, r3, #2
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d1f0      	bne.n	8004f84 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f003 0308 	and.w	r3, r3, #8
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d030      	beq.n	8005010 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	695b      	ldr	r3, [r3, #20]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d016      	beq.n	8004fe4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004fb6:	4b30      	ldr	r3, [pc, #192]	; (8005078 <HAL_RCC_OscConfig+0x2b4>)
 8004fb8:	2201      	movs	r2, #1
 8004fba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fbc:	f7fc fc9e 	bl	80018fc <HAL_GetTick>
 8004fc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fc2:	e008      	b.n	8004fd6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004fc4:	f7fc fc9a 	bl	80018fc <HAL_GetTick>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	1ad3      	subs	r3, r2, r3
 8004fce:	2b02      	cmp	r3, #2
 8004fd0:	d901      	bls.n	8004fd6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004fd2:	2303      	movs	r3, #3
 8004fd4:	e164      	b.n	80052a0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fd6:	4b26      	ldr	r3, [pc, #152]	; (8005070 <HAL_RCC_OscConfig+0x2ac>)
 8004fd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fda:	f003 0302 	and.w	r3, r3, #2
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d0f0      	beq.n	8004fc4 <HAL_RCC_OscConfig+0x200>
 8004fe2:	e015      	b.n	8005010 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004fe4:	4b24      	ldr	r3, [pc, #144]	; (8005078 <HAL_RCC_OscConfig+0x2b4>)
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fea:	f7fc fc87 	bl	80018fc <HAL_GetTick>
 8004fee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ff0:	e008      	b.n	8005004 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ff2:	f7fc fc83 	bl	80018fc <HAL_GetTick>
 8004ff6:	4602      	mov	r2, r0
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	1ad3      	subs	r3, r2, r3
 8004ffc:	2b02      	cmp	r3, #2
 8004ffe:	d901      	bls.n	8005004 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005000:	2303      	movs	r3, #3
 8005002:	e14d      	b.n	80052a0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005004:	4b1a      	ldr	r3, [pc, #104]	; (8005070 <HAL_RCC_OscConfig+0x2ac>)
 8005006:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005008:	f003 0302 	and.w	r3, r3, #2
 800500c:	2b00      	cmp	r3, #0
 800500e:	d1f0      	bne.n	8004ff2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f003 0304 	and.w	r3, r3, #4
 8005018:	2b00      	cmp	r3, #0
 800501a:	f000 80a0 	beq.w	800515e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800501e:	2300      	movs	r3, #0
 8005020:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005022:	4b13      	ldr	r3, [pc, #76]	; (8005070 <HAL_RCC_OscConfig+0x2ac>)
 8005024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005026:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800502a:	2b00      	cmp	r3, #0
 800502c:	d10f      	bne.n	800504e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800502e:	2300      	movs	r3, #0
 8005030:	60bb      	str	r3, [r7, #8]
 8005032:	4b0f      	ldr	r3, [pc, #60]	; (8005070 <HAL_RCC_OscConfig+0x2ac>)
 8005034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005036:	4a0e      	ldr	r2, [pc, #56]	; (8005070 <HAL_RCC_OscConfig+0x2ac>)
 8005038:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800503c:	6413      	str	r3, [r2, #64]	; 0x40
 800503e:	4b0c      	ldr	r3, [pc, #48]	; (8005070 <HAL_RCC_OscConfig+0x2ac>)
 8005040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005042:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005046:	60bb      	str	r3, [r7, #8]
 8005048:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800504a:	2301      	movs	r3, #1
 800504c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800504e:	4b0b      	ldr	r3, [pc, #44]	; (800507c <HAL_RCC_OscConfig+0x2b8>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005056:	2b00      	cmp	r3, #0
 8005058:	d121      	bne.n	800509e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800505a:	4b08      	ldr	r3, [pc, #32]	; (800507c <HAL_RCC_OscConfig+0x2b8>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a07      	ldr	r2, [pc, #28]	; (800507c <HAL_RCC_OscConfig+0x2b8>)
 8005060:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005064:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005066:	f7fc fc49 	bl	80018fc <HAL_GetTick>
 800506a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800506c:	e011      	b.n	8005092 <HAL_RCC_OscConfig+0x2ce>
 800506e:	bf00      	nop
 8005070:	40023800 	.word	0x40023800
 8005074:	42470000 	.word	0x42470000
 8005078:	42470e80 	.word	0x42470e80
 800507c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005080:	f7fc fc3c 	bl	80018fc <HAL_GetTick>
 8005084:	4602      	mov	r2, r0
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	1ad3      	subs	r3, r2, r3
 800508a:	2b02      	cmp	r3, #2
 800508c:	d901      	bls.n	8005092 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800508e:	2303      	movs	r3, #3
 8005090:	e106      	b.n	80052a0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005092:	4b85      	ldr	r3, [pc, #532]	; (80052a8 <HAL_RCC_OscConfig+0x4e4>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800509a:	2b00      	cmp	r3, #0
 800509c:	d0f0      	beq.n	8005080 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	d106      	bne.n	80050b4 <HAL_RCC_OscConfig+0x2f0>
 80050a6:	4b81      	ldr	r3, [pc, #516]	; (80052ac <HAL_RCC_OscConfig+0x4e8>)
 80050a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050aa:	4a80      	ldr	r2, [pc, #512]	; (80052ac <HAL_RCC_OscConfig+0x4e8>)
 80050ac:	f043 0301 	orr.w	r3, r3, #1
 80050b0:	6713      	str	r3, [r2, #112]	; 0x70
 80050b2:	e01c      	b.n	80050ee <HAL_RCC_OscConfig+0x32a>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	2b05      	cmp	r3, #5
 80050ba:	d10c      	bne.n	80050d6 <HAL_RCC_OscConfig+0x312>
 80050bc:	4b7b      	ldr	r3, [pc, #492]	; (80052ac <HAL_RCC_OscConfig+0x4e8>)
 80050be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050c0:	4a7a      	ldr	r2, [pc, #488]	; (80052ac <HAL_RCC_OscConfig+0x4e8>)
 80050c2:	f043 0304 	orr.w	r3, r3, #4
 80050c6:	6713      	str	r3, [r2, #112]	; 0x70
 80050c8:	4b78      	ldr	r3, [pc, #480]	; (80052ac <HAL_RCC_OscConfig+0x4e8>)
 80050ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050cc:	4a77      	ldr	r2, [pc, #476]	; (80052ac <HAL_RCC_OscConfig+0x4e8>)
 80050ce:	f043 0301 	orr.w	r3, r3, #1
 80050d2:	6713      	str	r3, [r2, #112]	; 0x70
 80050d4:	e00b      	b.n	80050ee <HAL_RCC_OscConfig+0x32a>
 80050d6:	4b75      	ldr	r3, [pc, #468]	; (80052ac <HAL_RCC_OscConfig+0x4e8>)
 80050d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050da:	4a74      	ldr	r2, [pc, #464]	; (80052ac <HAL_RCC_OscConfig+0x4e8>)
 80050dc:	f023 0301 	bic.w	r3, r3, #1
 80050e0:	6713      	str	r3, [r2, #112]	; 0x70
 80050e2:	4b72      	ldr	r3, [pc, #456]	; (80052ac <HAL_RCC_OscConfig+0x4e8>)
 80050e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050e6:	4a71      	ldr	r2, [pc, #452]	; (80052ac <HAL_RCC_OscConfig+0x4e8>)
 80050e8:	f023 0304 	bic.w	r3, r3, #4
 80050ec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d015      	beq.n	8005122 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050f6:	f7fc fc01 	bl	80018fc <HAL_GetTick>
 80050fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050fc:	e00a      	b.n	8005114 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050fe:	f7fc fbfd 	bl	80018fc <HAL_GetTick>
 8005102:	4602      	mov	r2, r0
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	1ad3      	subs	r3, r2, r3
 8005108:	f241 3288 	movw	r2, #5000	; 0x1388
 800510c:	4293      	cmp	r3, r2
 800510e:	d901      	bls.n	8005114 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005110:	2303      	movs	r3, #3
 8005112:	e0c5      	b.n	80052a0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005114:	4b65      	ldr	r3, [pc, #404]	; (80052ac <HAL_RCC_OscConfig+0x4e8>)
 8005116:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005118:	f003 0302 	and.w	r3, r3, #2
 800511c:	2b00      	cmp	r3, #0
 800511e:	d0ee      	beq.n	80050fe <HAL_RCC_OscConfig+0x33a>
 8005120:	e014      	b.n	800514c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005122:	f7fc fbeb 	bl	80018fc <HAL_GetTick>
 8005126:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005128:	e00a      	b.n	8005140 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800512a:	f7fc fbe7 	bl	80018fc <HAL_GetTick>
 800512e:	4602      	mov	r2, r0
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	1ad3      	subs	r3, r2, r3
 8005134:	f241 3288 	movw	r2, #5000	; 0x1388
 8005138:	4293      	cmp	r3, r2
 800513a:	d901      	bls.n	8005140 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800513c:	2303      	movs	r3, #3
 800513e:	e0af      	b.n	80052a0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005140:	4b5a      	ldr	r3, [pc, #360]	; (80052ac <HAL_RCC_OscConfig+0x4e8>)
 8005142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005144:	f003 0302 	and.w	r3, r3, #2
 8005148:	2b00      	cmp	r3, #0
 800514a:	d1ee      	bne.n	800512a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800514c:	7dfb      	ldrb	r3, [r7, #23]
 800514e:	2b01      	cmp	r3, #1
 8005150:	d105      	bne.n	800515e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005152:	4b56      	ldr	r3, [pc, #344]	; (80052ac <HAL_RCC_OscConfig+0x4e8>)
 8005154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005156:	4a55      	ldr	r2, [pc, #340]	; (80052ac <HAL_RCC_OscConfig+0x4e8>)
 8005158:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800515c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	699b      	ldr	r3, [r3, #24]
 8005162:	2b00      	cmp	r3, #0
 8005164:	f000 809b 	beq.w	800529e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005168:	4b50      	ldr	r3, [pc, #320]	; (80052ac <HAL_RCC_OscConfig+0x4e8>)
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	f003 030c 	and.w	r3, r3, #12
 8005170:	2b08      	cmp	r3, #8
 8005172:	d05c      	beq.n	800522e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	699b      	ldr	r3, [r3, #24]
 8005178:	2b02      	cmp	r3, #2
 800517a:	d141      	bne.n	8005200 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800517c:	4b4c      	ldr	r3, [pc, #304]	; (80052b0 <HAL_RCC_OscConfig+0x4ec>)
 800517e:	2200      	movs	r2, #0
 8005180:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005182:	f7fc fbbb 	bl	80018fc <HAL_GetTick>
 8005186:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005188:	e008      	b.n	800519c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800518a:	f7fc fbb7 	bl	80018fc <HAL_GetTick>
 800518e:	4602      	mov	r2, r0
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	1ad3      	subs	r3, r2, r3
 8005194:	2b02      	cmp	r3, #2
 8005196:	d901      	bls.n	800519c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005198:	2303      	movs	r3, #3
 800519a:	e081      	b.n	80052a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800519c:	4b43      	ldr	r3, [pc, #268]	; (80052ac <HAL_RCC_OscConfig+0x4e8>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d1f0      	bne.n	800518a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	69da      	ldr	r2, [r3, #28]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6a1b      	ldr	r3, [r3, #32]
 80051b0:	431a      	orrs	r2, r3
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b6:	019b      	lsls	r3, r3, #6
 80051b8:	431a      	orrs	r2, r3
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051be:	085b      	lsrs	r3, r3, #1
 80051c0:	3b01      	subs	r3, #1
 80051c2:	041b      	lsls	r3, r3, #16
 80051c4:	431a      	orrs	r2, r3
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ca:	061b      	lsls	r3, r3, #24
 80051cc:	4937      	ldr	r1, [pc, #220]	; (80052ac <HAL_RCC_OscConfig+0x4e8>)
 80051ce:	4313      	orrs	r3, r2
 80051d0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051d2:	4b37      	ldr	r3, [pc, #220]	; (80052b0 <HAL_RCC_OscConfig+0x4ec>)
 80051d4:	2201      	movs	r2, #1
 80051d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051d8:	f7fc fb90 	bl	80018fc <HAL_GetTick>
 80051dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051de:	e008      	b.n	80051f2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051e0:	f7fc fb8c 	bl	80018fc <HAL_GetTick>
 80051e4:	4602      	mov	r2, r0
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	1ad3      	subs	r3, r2, r3
 80051ea:	2b02      	cmp	r3, #2
 80051ec:	d901      	bls.n	80051f2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80051ee:	2303      	movs	r3, #3
 80051f0:	e056      	b.n	80052a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051f2:	4b2e      	ldr	r3, [pc, #184]	; (80052ac <HAL_RCC_OscConfig+0x4e8>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d0f0      	beq.n	80051e0 <HAL_RCC_OscConfig+0x41c>
 80051fe:	e04e      	b.n	800529e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005200:	4b2b      	ldr	r3, [pc, #172]	; (80052b0 <HAL_RCC_OscConfig+0x4ec>)
 8005202:	2200      	movs	r2, #0
 8005204:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005206:	f7fc fb79 	bl	80018fc <HAL_GetTick>
 800520a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800520c:	e008      	b.n	8005220 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800520e:	f7fc fb75 	bl	80018fc <HAL_GetTick>
 8005212:	4602      	mov	r2, r0
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	1ad3      	subs	r3, r2, r3
 8005218:	2b02      	cmp	r3, #2
 800521a:	d901      	bls.n	8005220 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800521c:	2303      	movs	r3, #3
 800521e:	e03f      	b.n	80052a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005220:	4b22      	ldr	r3, [pc, #136]	; (80052ac <HAL_RCC_OscConfig+0x4e8>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005228:	2b00      	cmp	r3, #0
 800522a:	d1f0      	bne.n	800520e <HAL_RCC_OscConfig+0x44a>
 800522c:	e037      	b.n	800529e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	699b      	ldr	r3, [r3, #24]
 8005232:	2b01      	cmp	r3, #1
 8005234:	d101      	bne.n	800523a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005236:	2301      	movs	r3, #1
 8005238:	e032      	b.n	80052a0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800523a:	4b1c      	ldr	r3, [pc, #112]	; (80052ac <HAL_RCC_OscConfig+0x4e8>)
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	699b      	ldr	r3, [r3, #24]
 8005244:	2b01      	cmp	r3, #1
 8005246:	d028      	beq.n	800529a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005252:	429a      	cmp	r2, r3
 8005254:	d121      	bne.n	800529a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005260:	429a      	cmp	r2, r3
 8005262:	d11a      	bne.n	800529a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005264:	68fa      	ldr	r2, [r7, #12]
 8005266:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800526a:	4013      	ands	r3, r2
 800526c:	687a      	ldr	r2, [r7, #4]
 800526e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005270:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005272:	4293      	cmp	r3, r2
 8005274:	d111      	bne.n	800529a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005280:	085b      	lsrs	r3, r3, #1
 8005282:	3b01      	subs	r3, #1
 8005284:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005286:	429a      	cmp	r2, r3
 8005288:	d107      	bne.n	800529a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005294:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005296:	429a      	cmp	r2, r3
 8005298:	d001      	beq.n	800529e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	e000      	b.n	80052a0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800529e:	2300      	movs	r3, #0
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	3718      	adds	r7, #24
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}
 80052a8:	40007000 	.word	0x40007000
 80052ac:	40023800 	.word	0x40023800
 80052b0:	42470060 	.word	0x42470060

080052b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b084      	sub	sp, #16
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d101      	bne.n	80052c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80052c4:	2301      	movs	r3, #1
 80052c6:	e0cc      	b.n	8005462 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80052c8:	4b68      	ldr	r3, [pc, #416]	; (800546c <HAL_RCC_ClockConfig+0x1b8>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f003 0307 	and.w	r3, r3, #7
 80052d0:	683a      	ldr	r2, [r7, #0]
 80052d2:	429a      	cmp	r2, r3
 80052d4:	d90c      	bls.n	80052f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052d6:	4b65      	ldr	r3, [pc, #404]	; (800546c <HAL_RCC_ClockConfig+0x1b8>)
 80052d8:	683a      	ldr	r2, [r7, #0]
 80052da:	b2d2      	uxtb	r2, r2
 80052dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052de:	4b63      	ldr	r3, [pc, #396]	; (800546c <HAL_RCC_ClockConfig+0x1b8>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f003 0307 	and.w	r3, r3, #7
 80052e6:	683a      	ldr	r2, [r7, #0]
 80052e8:	429a      	cmp	r2, r3
 80052ea:	d001      	beq.n	80052f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	e0b8      	b.n	8005462 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f003 0302 	and.w	r3, r3, #2
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d020      	beq.n	800533e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f003 0304 	and.w	r3, r3, #4
 8005304:	2b00      	cmp	r3, #0
 8005306:	d005      	beq.n	8005314 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005308:	4b59      	ldr	r3, [pc, #356]	; (8005470 <HAL_RCC_ClockConfig+0x1bc>)
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	4a58      	ldr	r2, [pc, #352]	; (8005470 <HAL_RCC_ClockConfig+0x1bc>)
 800530e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005312:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f003 0308 	and.w	r3, r3, #8
 800531c:	2b00      	cmp	r3, #0
 800531e:	d005      	beq.n	800532c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005320:	4b53      	ldr	r3, [pc, #332]	; (8005470 <HAL_RCC_ClockConfig+0x1bc>)
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	4a52      	ldr	r2, [pc, #328]	; (8005470 <HAL_RCC_ClockConfig+0x1bc>)
 8005326:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800532a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800532c:	4b50      	ldr	r3, [pc, #320]	; (8005470 <HAL_RCC_ClockConfig+0x1bc>)
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	689b      	ldr	r3, [r3, #8]
 8005338:	494d      	ldr	r1, [pc, #308]	; (8005470 <HAL_RCC_ClockConfig+0x1bc>)
 800533a:	4313      	orrs	r3, r2
 800533c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f003 0301 	and.w	r3, r3, #1
 8005346:	2b00      	cmp	r3, #0
 8005348:	d044      	beq.n	80053d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	2b01      	cmp	r3, #1
 8005350:	d107      	bne.n	8005362 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005352:	4b47      	ldr	r3, [pc, #284]	; (8005470 <HAL_RCC_ClockConfig+0x1bc>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800535a:	2b00      	cmp	r3, #0
 800535c:	d119      	bne.n	8005392 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	e07f      	b.n	8005462 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	2b02      	cmp	r3, #2
 8005368:	d003      	beq.n	8005372 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800536e:	2b03      	cmp	r3, #3
 8005370:	d107      	bne.n	8005382 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005372:	4b3f      	ldr	r3, [pc, #252]	; (8005470 <HAL_RCC_ClockConfig+0x1bc>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800537a:	2b00      	cmp	r3, #0
 800537c:	d109      	bne.n	8005392 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	e06f      	b.n	8005462 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005382:	4b3b      	ldr	r3, [pc, #236]	; (8005470 <HAL_RCC_ClockConfig+0x1bc>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f003 0302 	and.w	r3, r3, #2
 800538a:	2b00      	cmp	r3, #0
 800538c:	d101      	bne.n	8005392 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	e067      	b.n	8005462 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005392:	4b37      	ldr	r3, [pc, #220]	; (8005470 <HAL_RCC_ClockConfig+0x1bc>)
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	f023 0203 	bic.w	r2, r3, #3
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	4934      	ldr	r1, [pc, #208]	; (8005470 <HAL_RCC_ClockConfig+0x1bc>)
 80053a0:	4313      	orrs	r3, r2
 80053a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80053a4:	f7fc faaa 	bl	80018fc <HAL_GetTick>
 80053a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053aa:	e00a      	b.n	80053c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053ac:	f7fc faa6 	bl	80018fc <HAL_GetTick>
 80053b0:	4602      	mov	r2, r0
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	1ad3      	subs	r3, r2, r3
 80053b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d901      	bls.n	80053c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80053be:	2303      	movs	r3, #3
 80053c0:	e04f      	b.n	8005462 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053c2:	4b2b      	ldr	r3, [pc, #172]	; (8005470 <HAL_RCC_ClockConfig+0x1bc>)
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	f003 020c 	and.w	r2, r3, #12
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	009b      	lsls	r3, r3, #2
 80053d0:	429a      	cmp	r2, r3
 80053d2:	d1eb      	bne.n	80053ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80053d4:	4b25      	ldr	r3, [pc, #148]	; (800546c <HAL_RCC_ClockConfig+0x1b8>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f003 0307 	and.w	r3, r3, #7
 80053dc:	683a      	ldr	r2, [r7, #0]
 80053de:	429a      	cmp	r2, r3
 80053e0:	d20c      	bcs.n	80053fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053e2:	4b22      	ldr	r3, [pc, #136]	; (800546c <HAL_RCC_ClockConfig+0x1b8>)
 80053e4:	683a      	ldr	r2, [r7, #0]
 80053e6:	b2d2      	uxtb	r2, r2
 80053e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053ea:	4b20      	ldr	r3, [pc, #128]	; (800546c <HAL_RCC_ClockConfig+0x1b8>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f003 0307 	and.w	r3, r3, #7
 80053f2:	683a      	ldr	r2, [r7, #0]
 80053f4:	429a      	cmp	r2, r3
 80053f6:	d001      	beq.n	80053fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80053f8:	2301      	movs	r3, #1
 80053fa:	e032      	b.n	8005462 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f003 0304 	and.w	r3, r3, #4
 8005404:	2b00      	cmp	r3, #0
 8005406:	d008      	beq.n	800541a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005408:	4b19      	ldr	r3, [pc, #100]	; (8005470 <HAL_RCC_ClockConfig+0x1bc>)
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	68db      	ldr	r3, [r3, #12]
 8005414:	4916      	ldr	r1, [pc, #88]	; (8005470 <HAL_RCC_ClockConfig+0x1bc>)
 8005416:	4313      	orrs	r3, r2
 8005418:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f003 0308 	and.w	r3, r3, #8
 8005422:	2b00      	cmp	r3, #0
 8005424:	d009      	beq.n	800543a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005426:	4b12      	ldr	r3, [pc, #72]	; (8005470 <HAL_RCC_ClockConfig+0x1bc>)
 8005428:	689b      	ldr	r3, [r3, #8]
 800542a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	691b      	ldr	r3, [r3, #16]
 8005432:	00db      	lsls	r3, r3, #3
 8005434:	490e      	ldr	r1, [pc, #56]	; (8005470 <HAL_RCC_ClockConfig+0x1bc>)
 8005436:	4313      	orrs	r3, r2
 8005438:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800543a:	f000 f821 	bl	8005480 <HAL_RCC_GetSysClockFreq>
 800543e:	4602      	mov	r2, r0
 8005440:	4b0b      	ldr	r3, [pc, #44]	; (8005470 <HAL_RCC_ClockConfig+0x1bc>)
 8005442:	689b      	ldr	r3, [r3, #8]
 8005444:	091b      	lsrs	r3, r3, #4
 8005446:	f003 030f 	and.w	r3, r3, #15
 800544a:	490a      	ldr	r1, [pc, #40]	; (8005474 <HAL_RCC_ClockConfig+0x1c0>)
 800544c:	5ccb      	ldrb	r3, [r1, r3]
 800544e:	fa22 f303 	lsr.w	r3, r2, r3
 8005452:	4a09      	ldr	r2, [pc, #36]	; (8005478 <HAL_RCC_ClockConfig+0x1c4>)
 8005454:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005456:	4b09      	ldr	r3, [pc, #36]	; (800547c <HAL_RCC_ClockConfig+0x1c8>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4618      	mov	r0, r3
 800545c:	f7fc fa0a 	bl	8001874 <HAL_InitTick>

  return HAL_OK;
 8005460:	2300      	movs	r3, #0
}
 8005462:	4618      	mov	r0, r3
 8005464:	3710      	adds	r7, #16
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}
 800546a:	bf00      	nop
 800546c:	40023c00 	.word	0x40023c00
 8005470:	40023800 	.word	0x40023800
 8005474:	08009cf8 	.word	0x08009cf8
 8005478:	20000018 	.word	0x20000018
 800547c:	2000001c 	.word	0x2000001c

08005480 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005480:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005484:	b084      	sub	sp, #16
 8005486:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005488:	2300      	movs	r3, #0
 800548a:	607b      	str	r3, [r7, #4]
 800548c:	2300      	movs	r3, #0
 800548e:	60fb      	str	r3, [r7, #12]
 8005490:	2300      	movs	r3, #0
 8005492:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005494:	2300      	movs	r3, #0
 8005496:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005498:	4b67      	ldr	r3, [pc, #412]	; (8005638 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	f003 030c 	and.w	r3, r3, #12
 80054a0:	2b08      	cmp	r3, #8
 80054a2:	d00d      	beq.n	80054c0 <HAL_RCC_GetSysClockFreq+0x40>
 80054a4:	2b08      	cmp	r3, #8
 80054a6:	f200 80bd 	bhi.w	8005624 <HAL_RCC_GetSysClockFreq+0x1a4>
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d002      	beq.n	80054b4 <HAL_RCC_GetSysClockFreq+0x34>
 80054ae:	2b04      	cmp	r3, #4
 80054b0:	d003      	beq.n	80054ba <HAL_RCC_GetSysClockFreq+0x3a>
 80054b2:	e0b7      	b.n	8005624 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80054b4:	4b61      	ldr	r3, [pc, #388]	; (800563c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80054b6:	60bb      	str	r3, [r7, #8]
       break;
 80054b8:	e0b7      	b.n	800562a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80054ba:	4b61      	ldr	r3, [pc, #388]	; (8005640 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80054bc:	60bb      	str	r3, [r7, #8]
      break;
 80054be:	e0b4      	b.n	800562a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80054c0:	4b5d      	ldr	r3, [pc, #372]	; (8005638 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80054c8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80054ca:	4b5b      	ldr	r3, [pc, #364]	; (8005638 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d04d      	beq.n	8005572 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054d6:	4b58      	ldr	r3, [pc, #352]	; (8005638 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	099b      	lsrs	r3, r3, #6
 80054dc:	461a      	mov	r2, r3
 80054de:	f04f 0300 	mov.w	r3, #0
 80054e2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80054e6:	f04f 0100 	mov.w	r1, #0
 80054ea:	ea02 0800 	and.w	r8, r2, r0
 80054ee:	ea03 0901 	and.w	r9, r3, r1
 80054f2:	4640      	mov	r0, r8
 80054f4:	4649      	mov	r1, r9
 80054f6:	f04f 0200 	mov.w	r2, #0
 80054fa:	f04f 0300 	mov.w	r3, #0
 80054fe:	014b      	lsls	r3, r1, #5
 8005500:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005504:	0142      	lsls	r2, r0, #5
 8005506:	4610      	mov	r0, r2
 8005508:	4619      	mov	r1, r3
 800550a:	ebb0 0008 	subs.w	r0, r0, r8
 800550e:	eb61 0109 	sbc.w	r1, r1, r9
 8005512:	f04f 0200 	mov.w	r2, #0
 8005516:	f04f 0300 	mov.w	r3, #0
 800551a:	018b      	lsls	r3, r1, #6
 800551c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005520:	0182      	lsls	r2, r0, #6
 8005522:	1a12      	subs	r2, r2, r0
 8005524:	eb63 0301 	sbc.w	r3, r3, r1
 8005528:	f04f 0000 	mov.w	r0, #0
 800552c:	f04f 0100 	mov.w	r1, #0
 8005530:	00d9      	lsls	r1, r3, #3
 8005532:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005536:	00d0      	lsls	r0, r2, #3
 8005538:	4602      	mov	r2, r0
 800553a:	460b      	mov	r3, r1
 800553c:	eb12 0208 	adds.w	r2, r2, r8
 8005540:	eb43 0309 	adc.w	r3, r3, r9
 8005544:	f04f 0000 	mov.w	r0, #0
 8005548:	f04f 0100 	mov.w	r1, #0
 800554c:	0259      	lsls	r1, r3, #9
 800554e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005552:	0250      	lsls	r0, r2, #9
 8005554:	4602      	mov	r2, r0
 8005556:	460b      	mov	r3, r1
 8005558:	4610      	mov	r0, r2
 800555a:	4619      	mov	r1, r3
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	461a      	mov	r2, r3
 8005560:	f04f 0300 	mov.w	r3, #0
 8005564:	f7fa fe8c 	bl	8000280 <__aeabi_uldivmod>
 8005568:	4602      	mov	r2, r0
 800556a:	460b      	mov	r3, r1
 800556c:	4613      	mov	r3, r2
 800556e:	60fb      	str	r3, [r7, #12]
 8005570:	e04a      	b.n	8005608 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005572:	4b31      	ldr	r3, [pc, #196]	; (8005638 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	099b      	lsrs	r3, r3, #6
 8005578:	461a      	mov	r2, r3
 800557a:	f04f 0300 	mov.w	r3, #0
 800557e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005582:	f04f 0100 	mov.w	r1, #0
 8005586:	ea02 0400 	and.w	r4, r2, r0
 800558a:	ea03 0501 	and.w	r5, r3, r1
 800558e:	4620      	mov	r0, r4
 8005590:	4629      	mov	r1, r5
 8005592:	f04f 0200 	mov.w	r2, #0
 8005596:	f04f 0300 	mov.w	r3, #0
 800559a:	014b      	lsls	r3, r1, #5
 800559c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80055a0:	0142      	lsls	r2, r0, #5
 80055a2:	4610      	mov	r0, r2
 80055a4:	4619      	mov	r1, r3
 80055a6:	1b00      	subs	r0, r0, r4
 80055a8:	eb61 0105 	sbc.w	r1, r1, r5
 80055ac:	f04f 0200 	mov.w	r2, #0
 80055b0:	f04f 0300 	mov.w	r3, #0
 80055b4:	018b      	lsls	r3, r1, #6
 80055b6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80055ba:	0182      	lsls	r2, r0, #6
 80055bc:	1a12      	subs	r2, r2, r0
 80055be:	eb63 0301 	sbc.w	r3, r3, r1
 80055c2:	f04f 0000 	mov.w	r0, #0
 80055c6:	f04f 0100 	mov.w	r1, #0
 80055ca:	00d9      	lsls	r1, r3, #3
 80055cc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80055d0:	00d0      	lsls	r0, r2, #3
 80055d2:	4602      	mov	r2, r0
 80055d4:	460b      	mov	r3, r1
 80055d6:	1912      	adds	r2, r2, r4
 80055d8:	eb45 0303 	adc.w	r3, r5, r3
 80055dc:	f04f 0000 	mov.w	r0, #0
 80055e0:	f04f 0100 	mov.w	r1, #0
 80055e4:	0299      	lsls	r1, r3, #10
 80055e6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80055ea:	0290      	lsls	r0, r2, #10
 80055ec:	4602      	mov	r2, r0
 80055ee:	460b      	mov	r3, r1
 80055f0:	4610      	mov	r0, r2
 80055f2:	4619      	mov	r1, r3
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	461a      	mov	r2, r3
 80055f8:	f04f 0300 	mov.w	r3, #0
 80055fc:	f7fa fe40 	bl	8000280 <__aeabi_uldivmod>
 8005600:	4602      	mov	r2, r0
 8005602:	460b      	mov	r3, r1
 8005604:	4613      	mov	r3, r2
 8005606:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005608:	4b0b      	ldr	r3, [pc, #44]	; (8005638 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	0c1b      	lsrs	r3, r3, #16
 800560e:	f003 0303 	and.w	r3, r3, #3
 8005612:	3301      	adds	r3, #1
 8005614:	005b      	lsls	r3, r3, #1
 8005616:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005618:	68fa      	ldr	r2, [r7, #12]
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005620:	60bb      	str	r3, [r7, #8]
      break;
 8005622:	e002      	b.n	800562a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005624:	4b05      	ldr	r3, [pc, #20]	; (800563c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005626:	60bb      	str	r3, [r7, #8]
      break;
 8005628:	bf00      	nop
    }
  }
  return sysclockfreq;
 800562a:	68bb      	ldr	r3, [r7, #8]
}
 800562c:	4618      	mov	r0, r3
 800562e:	3710      	adds	r7, #16
 8005630:	46bd      	mov	sp, r7
 8005632:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005636:	bf00      	nop
 8005638:	40023800 	.word	0x40023800
 800563c:	00f42400 	.word	0x00f42400
 8005640:	007a1200 	.word	0x007a1200

08005644 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005644:	b480      	push	{r7}
 8005646:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005648:	4b03      	ldr	r3, [pc, #12]	; (8005658 <HAL_RCC_GetHCLKFreq+0x14>)
 800564a:	681b      	ldr	r3, [r3, #0]
}
 800564c:	4618      	mov	r0, r3
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr
 8005656:	bf00      	nop
 8005658:	20000018 	.word	0x20000018

0800565c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005660:	f7ff fff0 	bl	8005644 <HAL_RCC_GetHCLKFreq>
 8005664:	4602      	mov	r2, r0
 8005666:	4b05      	ldr	r3, [pc, #20]	; (800567c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	0a9b      	lsrs	r3, r3, #10
 800566c:	f003 0307 	and.w	r3, r3, #7
 8005670:	4903      	ldr	r1, [pc, #12]	; (8005680 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005672:	5ccb      	ldrb	r3, [r1, r3]
 8005674:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005678:	4618      	mov	r0, r3
 800567a:	bd80      	pop	{r7, pc}
 800567c:	40023800 	.word	0x40023800
 8005680:	08009d08 	.word	0x08009d08

08005684 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005688:	f7ff ffdc 	bl	8005644 <HAL_RCC_GetHCLKFreq>
 800568c:	4602      	mov	r2, r0
 800568e:	4b05      	ldr	r3, [pc, #20]	; (80056a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	0b5b      	lsrs	r3, r3, #13
 8005694:	f003 0307 	and.w	r3, r3, #7
 8005698:	4903      	ldr	r1, [pc, #12]	; (80056a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800569a:	5ccb      	ldrb	r3, [r1, r3]
 800569c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	bd80      	pop	{r7, pc}
 80056a4:	40023800 	.word	0x40023800
 80056a8:	08009d08 	.word	0x08009d08

080056ac <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b086      	sub	sp, #24
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80056b4:	2300      	movs	r3, #0
 80056b6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80056b8:	2300      	movs	r3, #0
 80056ba:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f003 0301 	and.w	r3, r3, #1
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d105      	bne.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d035      	beq.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80056d4:	4b62      	ldr	r3, [pc, #392]	; (8005860 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80056d6:	2200      	movs	r2, #0
 80056d8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80056da:	f7fc f90f 	bl	80018fc <HAL_GetTick>
 80056de:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80056e0:	e008      	b.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80056e2:	f7fc f90b 	bl	80018fc <HAL_GetTick>
 80056e6:	4602      	mov	r2, r0
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	1ad3      	subs	r3, r2, r3
 80056ec:	2b02      	cmp	r3, #2
 80056ee:	d901      	bls.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80056f0:	2303      	movs	r3, #3
 80056f2:	e0b0      	b.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80056f4:	4b5b      	ldr	r3, [pc, #364]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d1f0      	bne.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	019a      	lsls	r2, r3, #6
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	071b      	lsls	r3, r3, #28
 800570c:	4955      	ldr	r1, [pc, #340]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800570e:	4313      	orrs	r3, r2
 8005710:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005714:	4b52      	ldr	r3, [pc, #328]	; (8005860 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005716:	2201      	movs	r2, #1
 8005718:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800571a:	f7fc f8ef 	bl	80018fc <HAL_GetTick>
 800571e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005720:	e008      	b.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005722:	f7fc f8eb 	bl	80018fc <HAL_GetTick>
 8005726:	4602      	mov	r2, r0
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	1ad3      	subs	r3, r2, r3
 800572c:	2b02      	cmp	r3, #2
 800572e:	d901      	bls.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005730:	2303      	movs	r3, #3
 8005732:	e090      	b.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005734:	4b4b      	ldr	r3, [pc, #300]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800573c:	2b00      	cmp	r3, #0
 800573e:	d0f0      	beq.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f003 0302 	and.w	r3, r3, #2
 8005748:	2b00      	cmp	r3, #0
 800574a:	f000 8083 	beq.w	8005854 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800574e:	2300      	movs	r3, #0
 8005750:	60fb      	str	r3, [r7, #12]
 8005752:	4b44      	ldr	r3, [pc, #272]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005756:	4a43      	ldr	r2, [pc, #268]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005758:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800575c:	6413      	str	r3, [r2, #64]	; 0x40
 800575e:	4b41      	ldr	r3, [pc, #260]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005766:	60fb      	str	r3, [r7, #12]
 8005768:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800576a:	4b3f      	ldr	r3, [pc, #252]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a3e      	ldr	r2, [pc, #248]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005770:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005774:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005776:	f7fc f8c1 	bl	80018fc <HAL_GetTick>
 800577a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800577c:	e008      	b.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800577e:	f7fc f8bd 	bl	80018fc <HAL_GetTick>
 8005782:	4602      	mov	r2, r0
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	1ad3      	subs	r3, r2, r3
 8005788:	2b02      	cmp	r3, #2
 800578a:	d901      	bls.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800578c:	2303      	movs	r3, #3
 800578e:	e062      	b.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005790:	4b35      	ldr	r3, [pc, #212]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005798:	2b00      	cmp	r3, #0
 800579a:	d0f0      	beq.n	800577e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800579c:	4b31      	ldr	r3, [pc, #196]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800579e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057a4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d02f      	beq.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x160>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	68db      	ldr	r3, [r3, #12]
 80057b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057b4:	693a      	ldr	r2, [r7, #16]
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d028      	beq.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80057ba:	4b2a      	ldr	r3, [pc, #168]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80057bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057c2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80057c4:	4b29      	ldr	r3, [pc, #164]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80057c6:	2201      	movs	r2, #1
 80057c8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80057ca:	4b28      	ldr	r3, [pc, #160]	; (800586c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80057cc:	2200      	movs	r2, #0
 80057ce:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80057d0:	4a24      	ldr	r2, [pc, #144]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80057d6:	4b23      	ldr	r3, [pc, #140]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80057d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057da:	f003 0301 	and.w	r3, r3, #1
 80057de:	2b01      	cmp	r3, #1
 80057e0:	d114      	bne.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80057e2:	f7fc f88b 	bl	80018fc <HAL_GetTick>
 80057e6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057e8:	e00a      	b.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057ea:	f7fc f887 	bl	80018fc <HAL_GetTick>
 80057ee:	4602      	mov	r2, r0
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	1ad3      	subs	r3, r2, r3
 80057f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d901      	bls.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80057fc:	2303      	movs	r3, #3
 80057fe:	e02a      	b.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005800:	4b18      	ldr	r3, [pc, #96]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005802:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005804:	f003 0302 	and.w	r3, r3, #2
 8005808:	2b00      	cmp	r3, #0
 800580a:	d0ee      	beq.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	68db      	ldr	r3, [r3, #12]
 8005810:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005814:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005818:	d10d      	bne.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800581a:	4b12      	ldr	r3, [pc, #72]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	68db      	ldr	r3, [r3, #12]
 8005826:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800582a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800582e:	490d      	ldr	r1, [pc, #52]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005830:	4313      	orrs	r3, r2
 8005832:	608b      	str	r3, [r1, #8]
 8005834:	e005      	b.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005836:	4b0b      	ldr	r3, [pc, #44]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005838:	689b      	ldr	r3, [r3, #8]
 800583a:	4a0a      	ldr	r2, [pc, #40]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800583c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005840:	6093      	str	r3, [r2, #8]
 8005842:	4b08      	ldr	r3, [pc, #32]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005844:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	68db      	ldr	r3, [r3, #12]
 800584a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800584e:	4905      	ldr	r1, [pc, #20]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005850:	4313      	orrs	r3, r2
 8005852:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005854:	2300      	movs	r3, #0
}
 8005856:	4618      	mov	r0, r3
 8005858:	3718      	adds	r7, #24
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}
 800585e:	bf00      	nop
 8005860:	42470068 	.word	0x42470068
 8005864:	40023800 	.word	0x40023800
 8005868:	40007000 	.word	0x40007000
 800586c:	42470e40 	.word	0x42470e40

08005870 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005870:	b480      	push	{r7}
 8005872:	b087      	sub	sp, #28
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005878:	2300      	movs	r3, #0
 800587a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800587c:	2300      	movs	r3, #0
 800587e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005880:	2300      	movs	r3, #0
 8005882:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005884:	2300      	movs	r3, #0
 8005886:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2b01      	cmp	r3, #1
 800588c:	d13e      	bne.n	800590c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800588e:	4b23      	ldr	r3, [pc, #140]	; (800591c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005890:	689b      	ldr	r3, [r3, #8]
 8005892:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005896:	60fb      	str	r3, [r7, #12]
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d005      	beq.n	80058aa <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	d12f      	bne.n	8005904 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80058a4:	4b1e      	ldr	r3, [pc, #120]	; (8005920 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80058a6:	617b      	str	r3, [r7, #20]
          break;
 80058a8:	e02f      	b.n	800590a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80058aa:	4b1c      	ldr	r3, [pc, #112]	; (800591c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80058b6:	d108      	bne.n	80058ca <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80058b8:	4b18      	ldr	r3, [pc, #96]	; (800591c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80058c0:	4a18      	ldr	r2, [pc, #96]	; (8005924 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80058c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80058c6:	613b      	str	r3, [r7, #16]
 80058c8:	e007      	b.n	80058da <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80058ca:	4b14      	ldr	r3, [pc, #80]	; (800591c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80058d2:	4a15      	ldr	r2, [pc, #84]	; (8005928 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80058d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80058d8:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80058da:	4b10      	ldr	r3, [pc, #64]	; (800591c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80058dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058e0:	099b      	lsrs	r3, r3, #6
 80058e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	fb02 f303 	mul.w	r3, r2, r3
 80058ec:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80058ee:	4b0b      	ldr	r3, [pc, #44]	; (800591c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80058f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058f4:	0f1b      	lsrs	r3, r3, #28
 80058f6:	f003 0307 	and.w	r3, r3, #7
 80058fa:	68ba      	ldr	r2, [r7, #8]
 80058fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005900:	617b      	str	r3, [r7, #20]
          break;
 8005902:	e002      	b.n	800590a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005904:	2300      	movs	r3, #0
 8005906:	617b      	str	r3, [r7, #20]
          break;
 8005908:	bf00      	nop
        }
      }
      break;
 800590a:	bf00      	nop
    }
  }
  return frequency;
 800590c:	697b      	ldr	r3, [r7, #20]
}
 800590e:	4618      	mov	r0, r3
 8005910:	371c      	adds	r7, #28
 8005912:	46bd      	mov	sp, r7
 8005914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005918:	4770      	bx	lr
 800591a:	bf00      	nop
 800591c:	40023800 	.word	0x40023800
 8005920:	00bb8000 	.word	0x00bb8000
 8005924:	007a1200 	.word	0x007a1200
 8005928:	00f42400 	.word	0x00f42400

0800592c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b082      	sub	sp, #8
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d101      	bne.n	800593e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	e07b      	b.n	8005a36 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005942:	2b00      	cmp	r3, #0
 8005944:	d108      	bne.n	8005958 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800594e:	d009      	beq.n	8005964 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2200      	movs	r2, #0
 8005954:	61da      	str	r2, [r3, #28]
 8005956:	e005      	b.n	8005964 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2200      	movs	r2, #0
 800595c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2200      	movs	r2, #0
 8005962:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2200      	movs	r2, #0
 8005968:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005970:	b2db      	uxtb	r3, r3
 8005972:	2b00      	cmp	r3, #0
 8005974:	d106      	bne.n	8005984 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2200      	movs	r2, #0
 800597a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f7fb fdfe 	bl	8001580 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2202      	movs	r2, #2
 8005988:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	681a      	ldr	r2, [r3, #0]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800599a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	689b      	ldr	r3, [r3, #8]
 80059a8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80059ac:	431a      	orrs	r2, r3
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	68db      	ldr	r3, [r3, #12]
 80059b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059b6:	431a      	orrs	r2, r3
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	691b      	ldr	r3, [r3, #16]
 80059bc:	f003 0302 	and.w	r3, r3, #2
 80059c0:	431a      	orrs	r2, r3
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	695b      	ldr	r3, [r3, #20]
 80059c6:	f003 0301 	and.w	r3, r3, #1
 80059ca:	431a      	orrs	r2, r3
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	699b      	ldr	r3, [r3, #24]
 80059d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059d4:	431a      	orrs	r2, r3
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	69db      	ldr	r3, [r3, #28]
 80059da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80059de:	431a      	orrs	r2, r3
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6a1b      	ldr	r3, [r3, #32]
 80059e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059e8:	ea42 0103 	orr.w	r1, r2, r3
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059f0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	430a      	orrs	r2, r1
 80059fa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	699b      	ldr	r3, [r3, #24]
 8005a00:	0c1b      	lsrs	r3, r3, #16
 8005a02:	f003 0104 	and.w	r1, r3, #4
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a0a:	f003 0210 	and.w	r2, r3, #16
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	430a      	orrs	r2, r1
 8005a14:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	69da      	ldr	r2, [r3, #28]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a24:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005a34:	2300      	movs	r3, #0
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3708      	adds	r7, #8
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}

08005a3e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a3e:	b580      	push	{r7, lr}
 8005a40:	b082      	sub	sp, #8
 8005a42:	af00      	add	r7, sp, #0
 8005a44:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d101      	bne.n	8005a50 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	e03f      	b.n	8005ad0 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a56:	b2db      	uxtb	r3, r3
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d106      	bne.n	8005a6a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f7fb fdd3 	bl	8001610 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2224      	movs	r2, #36	; 0x24
 8005a6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	68da      	ldr	r2, [r3, #12]
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a80:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f000 f928 	bl	8005cd8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	691a      	ldr	r2, [r3, #16]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a96:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	695a      	ldr	r2, [r3, #20]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005aa6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	68da      	ldr	r2, [r3, #12]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ab6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2200      	movs	r2, #0
 8005abc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2220      	movs	r2, #32
 8005ac2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2220      	movs	r2, #32
 8005aca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005ace:	2300      	movs	r3, #0
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	3708      	adds	r7, #8
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bd80      	pop	{r7, pc}

08005ad8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b08a      	sub	sp, #40	; 0x28
 8005adc:	af02      	add	r7, sp, #8
 8005ade:	60f8      	str	r0, [r7, #12]
 8005ae0:	60b9      	str	r1, [r7, #8]
 8005ae2:	603b      	str	r3, [r7, #0]
 8005ae4:	4613      	mov	r3, r2
 8005ae6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005af2:	b2db      	uxtb	r3, r3
 8005af4:	2b20      	cmp	r3, #32
 8005af6:	d17c      	bne.n	8005bf2 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d002      	beq.n	8005b04 <HAL_UART_Transmit+0x2c>
 8005afe:	88fb      	ldrh	r3, [r7, #6]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d101      	bne.n	8005b08 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005b04:	2301      	movs	r3, #1
 8005b06:	e075      	b.n	8005bf4 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b0e:	2b01      	cmp	r3, #1
 8005b10:	d101      	bne.n	8005b16 <HAL_UART_Transmit+0x3e>
 8005b12:	2302      	movs	r3, #2
 8005b14:	e06e      	b.n	8005bf4 <HAL_UART_Transmit+0x11c>
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2201      	movs	r2, #1
 8005b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	2200      	movs	r2, #0
 8005b22:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2221      	movs	r2, #33	; 0x21
 8005b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b2c:	f7fb fee6 	bl	80018fc <HAL_GetTick>
 8005b30:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	88fa      	ldrh	r2, [r7, #6]
 8005b36:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	88fa      	ldrh	r2, [r7, #6]
 8005b3c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	689b      	ldr	r3, [r3, #8]
 8005b42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b46:	d108      	bne.n	8005b5a <HAL_UART_Transmit+0x82>
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	691b      	ldr	r3, [r3, #16]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d104      	bne.n	8005b5a <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005b50:	2300      	movs	r3, #0
 8005b52:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	61bb      	str	r3, [r7, #24]
 8005b58:	e003      	b.n	8005b62 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2200      	movs	r2, #0
 8005b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005b6a:	e02a      	b.n	8005bc2 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	9300      	str	r3, [sp, #0]
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	2200      	movs	r2, #0
 8005b74:	2180      	movs	r1, #128	; 0x80
 8005b76:	68f8      	ldr	r0, [r7, #12]
 8005b78:	f000 f840 	bl	8005bfc <UART_WaitOnFlagUntilTimeout>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d001      	beq.n	8005b86 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005b82:	2303      	movs	r3, #3
 8005b84:	e036      	b.n	8005bf4 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005b86:	69fb      	ldr	r3, [r7, #28]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d10b      	bne.n	8005ba4 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b8c:	69bb      	ldr	r3, [r7, #24]
 8005b8e:	881b      	ldrh	r3, [r3, #0]
 8005b90:	461a      	mov	r2, r3
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b9a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005b9c:	69bb      	ldr	r3, [r7, #24]
 8005b9e:	3302      	adds	r3, #2
 8005ba0:	61bb      	str	r3, [r7, #24]
 8005ba2:	e007      	b.n	8005bb4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005ba4:	69fb      	ldr	r3, [r7, #28]
 8005ba6:	781a      	ldrb	r2, [r3, #0]
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005bae:	69fb      	ldr	r3, [r7, #28]
 8005bb0:	3301      	adds	r3, #1
 8005bb2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005bb8:	b29b      	uxth	r3, r3
 8005bba:	3b01      	subs	r3, #1
 8005bbc:	b29a      	uxth	r2, r3
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005bc6:	b29b      	uxth	r3, r3
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d1cf      	bne.n	8005b6c <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	9300      	str	r3, [sp, #0]
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	2140      	movs	r1, #64	; 0x40
 8005bd6:	68f8      	ldr	r0, [r7, #12]
 8005bd8:	f000 f810 	bl	8005bfc <UART_WaitOnFlagUntilTimeout>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d001      	beq.n	8005be6 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005be2:	2303      	movs	r3, #3
 8005be4:	e006      	b.n	8005bf4 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2220      	movs	r2, #32
 8005bea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	e000      	b.n	8005bf4 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005bf2:	2302      	movs	r3, #2
  }
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	3720      	adds	r7, #32
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd80      	pop	{r7, pc}

08005bfc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b090      	sub	sp, #64	; 0x40
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	60f8      	str	r0, [r7, #12]
 8005c04:	60b9      	str	r1, [r7, #8]
 8005c06:	603b      	str	r3, [r7, #0]
 8005c08:	4613      	mov	r3, r2
 8005c0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c0c:	e050      	b.n	8005cb0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c14:	d04c      	beq.n	8005cb0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005c16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d007      	beq.n	8005c2c <UART_WaitOnFlagUntilTimeout+0x30>
 8005c1c:	f7fb fe6e 	bl	80018fc <HAL_GetTick>
 8005c20:	4602      	mov	r2, r0
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	1ad3      	subs	r3, r2, r3
 8005c26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c28:	429a      	cmp	r2, r3
 8005c2a:	d241      	bcs.n	8005cb0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	330c      	adds	r3, #12
 8005c32:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c36:	e853 3f00 	ldrex	r3, [r3]
 8005c3a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c3e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005c42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	330c      	adds	r3, #12
 8005c4a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005c4c:	637a      	str	r2, [r7, #52]	; 0x34
 8005c4e:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c50:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005c52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c54:	e841 2300 	strex	r3, r2, [r1]
 8005c58:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d1e5      	bne.n	8005c2c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	3314      	adds	r3, #20
 8005c66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	e853 3f00 	ldrex	r3, [r3]
 8005c6e:	613b      	str	r3, [r7, #16]
   return(result);
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	f023 0301 	bic.w	r3, r3, #1
 8005c76:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	3314      	adds	r3, #20
 8005c7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c80:	623a      	str	r2, [r7, #32]
 8005c82:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c84:	69f9      	ldr	r1, [r7, #28]
 8005c86:	6a3a      	ldr	r2, [r7, #32]
 8005c88:	e841 2300 	strex	r3, r2, [r1]
 8005c8c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c8e:	69bb      	ldr	r3, [r7, #24]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d1e5      	bne.n	8005c60 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2220      	movs	r2, #32
 8005c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2220      	movs	r2, #32
 8005ca0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005cac:	2303      	movs	r3, #3
 8005cae:	e00f      	b.n	8005cd0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	681a      	ldr	r2, [r3, #0]
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	4013      	ands	r3, r2
 8005cba:	68ba      	ldr	r2, [r7, #8]
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	bf0c      	ite	eq
 8005cc0:	2301      	moveq	r3, #1
 8005cc2:	2300      	movne	r3, #0
 8005cc4:	b2db      	uxtb	r3, r3
 8005cc6:	461a      	mov	r2, r3
 8005cc8:	79fb      	ldrb	r3, [r7, #7]
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	d09f      	beq.n	8005c0e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005cce:	2300      	movs	r3, #0
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	3740      	adds	r7, #64	; 0x40
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bd80      	pop	{r7, pc}

08005cd8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cdc:	b09f      	sub	sp, #124	; 0x7c
 8005cde:	af00      	add	r7, sp, #0
 8005ce0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ce2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	691b      	ldr	r3, [r3, #16]
 8005ce8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005cec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cee:	68d9      	ldr	r1, [r3, #12]
 8005cf0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	ea40 0301 	orr.w	r3, r0, r1
 8005cf8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005cfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cfc:	689a      	ldr	r2, [r3, #8]
 8005cfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d00:	691b      	ldr	r3, [r3, #16]
 8005d02:	431a      	orrs	r2, r3
 8005d04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d06:	695b      	ldr	r3, [r3, #20]
 8005d08:	431a      	orrs	r2, r3
 8005d0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d0c:	69db      	ldr	r3, [r3, #28]
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005d12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	68db      	ldr	r3, [r3, #12]
 8005d18:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005d1c:	f021 010c 	bic.w	r1, r1, #12
 8005d20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d26:	430b      	orrs	r3, r1
 8005d28:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005d2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	695b      	ldr	r3, [r3, #20]
 8005d30:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005d34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d36:	6999      	ldr	r1, [r3, #24]
 8005d38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d3a:	681a      	ldr	r2, [r3, #0]
 8005d3c:	ea40 0301 	orr.w	r3, r0, r1
 8005d40:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005d42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d44:	681a      	ldr	r2, [r3, #0]
 8005d46:	4bc5      	ldr	r3, [pc, #788]	; (800605c <UART_SetConfig+0x384>)
 8005d48:	429a      	cmp	r2, r3
 8005d4a:	d004      	beq.n	8005d56 <UART_SetConfig+0x7e>
 8005d4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d4e:	681a      	ldr	r2, [r3, #0]
 8005d50:	4bc3      	ldr	r3, [pc, #780]	; (8006060 <UART_SetConfig+0x388>)
 8005d52:	429a      	cmp	r2, r3
 8005d54:	d103      	bne.n	8005d5e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005d56:	f7ff fc95 	bl	8005684 <HAL_RCC_GetPCLK2Freq>
 8005d5a:	6778      	str	r0, [r7, #116]	; 0x74
 8005d5c:	e002      	b.n	8005d64 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005d5e:	f7ff fc7d 	bl	800565c <HAL_RCC_GetPCLK1Freq>
 8005d62:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d66:	69db      	ldr	r3, [r3, #28]
 8005d68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d6c:	f040 80b6 	bne.w	8005edc <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005d70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d72:	461c      	mov	r4, r3
 8005d74:	f04f 0500 	mov.w	r5, #0
 8005d78:	4622      	mov	r2, r4
 8005d7a:	462b      	mov	r3, r5
 8005d7c:	1891      	adds	r1, r2, r2
 8005d7e:	6439      	str	r1, [r7, #64]	; 0x40
 8005d80:	415b      	adcs	r3, r3
 8005d82:	647b      	str	r3, [r7, #68]	; 0x44
 8005d84:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005d88:	1912      	adds	r2, r2, r4
 8005d8a:	eb45 0303 	adc.w	r3, r5, r3
 8005d8e:	f04f 0000 	mov.w	r0, #0
 8005d92:	f04f 0100 	mov.w	r1, #0
 8005d96:	00d9      	lsls	r1, r3, #3
 8005d98:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005d9c:	00d0      	lsls	r0, r2, #3
 8005d9e:	4602      	mov	r2, r0
 8005da0:	460b      	mov	r3, r1
 8005da2:	1911      	adds	r1, r2, r4
 8005da4:	6639      	str	r1, [r7, #96]	; 0x60
 8005da6:	416b      	adcs	r3, r5
 8005da8:	667b      	str	r3, [r7, #100]	; 0x64
 8005daa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	461a      	mov	r2, r3
 8005db0:	f04f 0300 	mov.w	r3, #0
 8005db4:	1891      	adds	r1, r2, r2
 8005db6:	63b9      	str	r1, [r7, #56]	; 0x38
 8005db8:	415b      	adcs	r3, r3
 8005dba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005dbc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005dc0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005dc4:	f7fa fa5c 	bl	8000280 <__aeabi_uldivmod>
 8005dc8:	4602      	mov	r2, r0
 8005dca:	460b      	mov	r3, r1
 8005dcc:	4ba5      	ldr	r3, [pc, #660]	; (8006064 <UART_SetConfig+0x38c>)
 8005dce:	fba3 2302 	umull	r2, r3, r3, r2
 8005dd2:	095b      	lsrs	r3, r3, #5
 8005dd4:	011e      	lsls	r6, r3, #4
 8005dd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005dd8:	461c      	mov	r4, r3
 8005dda:	f04f 0500 	mov.w	r5, #0
 8005dde:	4622      	mov	r2, r4
 8005de0:	462b      	mov	r3, r5
 8005de2:	1891      	adds	r1, r2, r2
 8005de4:	6339      	str	r1, [r7, #48]	; 0x30
 8005de6:	415b      	adcs	r3, r3
 8005de8:	637b      	str	r3, [r7, #52]	; 0x34
 8005dea:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005dee:	1912      	adds	r2, r2, r4
 8005df0:	eb45 0303 	adc.w	r3, r5, r3
 8005df4:	f04f 0000 	mov.w	r0, #0
 8005df8:	f04f 0100 	mov.w	r1, #0
 8005dfc:	00d9      	lsls	r1, r3, #3
 8005dfe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005e02:	00d0      	lsls	r0, r2, #3
 8005e04:	4602      	mov	r2, r0
 8005e06:	460b      	mov	r3, r1
 8005e08:	1911      	adds	r1, r2, r4
 8005e0a:	65b9      	str	r1, [r7, #88]	; 0x58
 8005e0c:	416b      	adcs	r3, r5
 8005e0e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	461a      	mov	r2, r3
 8005e16:	f04f 0300 	mov.w	r3, #0
 8005e1a:	1891      	adds	r1, r2, r2
 8005e1c:	62b9      	str	r1, [r7, #40]	; 0x28
 8005e1e:	415b      	adcs	r3, r3
 8005e20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e22:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005e26:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005e2a:	f7fa fa29 	bl	8000280 <__aeabi_uldivmod>
 8005e2e:	4602      	mov	r2, r0
 8005e30:	460b      	mov	r3, r1
 8005e32:	4b8c      	ldr	r3, [pc, #560]	; (8006064 <UART_SetConfig+0x38c>)
 8005e34:	fba3 1302 	umull	r1, r3, r3, r2
 8005e38:	095b      	lsrs	r3, r3, #5
 8005e3a:	2164      	movs	r1, #100	; 0x64
 8005e3c:	fb01 f303 	mul.w	r3, r1, r3
 8005e40:	1ad3      	subs	r3, r2, r3
 8005e42:	00db      	lsls	r3, r3, #3
 8005e44:	3332      	adds	r3, #50	; 0x32
 8005e46:	4a87      	ldr	r2, [pc, #540]	; (8006064 <UART_SetConfig+0x38c>)
 8005e48:	fba2 2303 	umull	r2, r3, r2, r3
 8005e4c:	095b      	lsrs	r3, r3, #5
 8005e4e:	005b      	lsls	r3, r3, #1
 8005e50:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005e54:	441e      	add	r6, r3
 8005e56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f04f 0100 	mov.w	r1, #0
 8005e5e:	4602      	mov	r2, r0
 8005e60:	460b      	mov	r3, r1
 8005e62:	1894      	adds	r4, r2, r2
 8005e64:	623c      	str	r4, [r7, #32]
 8005e66:	415b      	adcs	r3, r3
 8005e68:	627b      	str	r3, [r7, #36]	; 0x24
 8005e6a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005e6e:	1812      	adds	r2, r2, r0
 8005e70:	eb41 0303 	adc.w	r3, r1, r3
 8005e74:	f04f 0400 	mov.w	r4, #0
 8005e78:	f04f 0500 	mov.w	r5, #0
 8005e7c:	00dd      	lsls	r5, r3, #3
 8005e7e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005e82:	00d4      	lsls	r4, r2, #3
 8005e84:	4622      	mov	r2, r4
 8005e86:	462b      	mov	r3, r5
 8005e88:	1814      	adds	r4, r2, r0
 8005e8a:	653c      	str	r4, [r7, #80]	; 0x50
 8005e8c:	414b      	adcs	r3, r1
 8005e8e:	657b      	str	r3, [r7, #84]	; 0x54
 8005e90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	461a      	mov	r2, r3
 8005e96:	f04f 0300 	mov.w	r3, #0
 8005e9a:	1891      	adds	r1, r2, r2
 8005e9c:	61b9      	str	r1, [r7, #24]
 8005e9e:	415b      	adcs	r3, r3
 8005ea0:	61fb      	str	r3, [r7, #28]
 8005ea2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ea6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005eaa:	f7fa f9e9 	bl	8000280 <__aeabi_uldivmod>
 8005eae:	4602      	mov	r2, r0
 8005eb0:	460b      	mov	r3, r1
 8005eb2:	4b6c      	ldr	r3, [pc, #432]	; (8006064 <UART_SetConfig+0x38c>)
 8005eb4:	fba3 1302 	umull	r1, r3, r3, r2
 8005eb8:	095b      	lsrs	r3, r3, #5
 8005eba:	2164      	movs	r1, #100	; 0x64
 8005ebc:	fb01 f303 	mul.w	r3, r1, r3
 8005ec0:	1ad3      	subs	r3, r2, r3
 8005ec2:	00db      	lsls	r3, r3, #3
 8005ec4:	3332      	adds	r3, #50	; 0x32
 8005ec6:	4a67      	ldr	r2, [pc, #412]	; (8006064 <UART_SetConfig+0x38c>)
 8005ec8:	fba2 2303 	umull	r2, r3, r2, r3
 8005ecc:	095b      	lsrs	r3, r3, #5
 8005ece:	f003 0207 	and.w	r2, r3, #7
 8005ed2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4432      	add	r2, r6
 8005ed8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005eda:	e0b9      	b.n	8006050 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005edc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ede:	461c      	mov	r4, r3
 8005ee0:	f04f 0500 	mov.w	r5, #0
 8005ee4:	4622      	mov	r2, r4
 8005ee6:	462b      	mov	r3, r5
 8005ee8:	1891      	adds	r1, r2, r2
 8005eea:	6139      	str	r1, [r7, #16]
 8005eec:	415b      	adcs	r3, r3
 8005eee:	617b      	str	r3, [r7, #20]
 8005ef0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005ef4:	1912      	adds	r2, r2, r4
 8005ef6:	eb45 0303 	adc.w	r3, r5, r3
 8005efa:	f04f 0000 	mov.w	r0, #0
 8005efe:	f04f 0100 	mov.w	r1, #0
 8005f02:	00d9      	lsls	r1, r3, #3
 8005f04:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005f08:	00d0      	lsls	r0, r2, #3
 8005f0a:	4602      	mov	r2, r0
 8005f0c:	460b      	mov	r3, r1
 8005f0e:	eb12 0804 	adds.w	r8, r2, r4
 8005f12:	eb43 0905 	adc.w	r9, r3, r5
 8005f16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f04f 0100 	mov.w	r1, #0
 8005f20:	f04f 0200 	mov.w	r2, #0
 8005f24:	f04f 0300 	mov.w	r3, #0
 8005f28:	008b      	lsls	r3, r1, #2
 8005f2a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005f2e:	0082      	lsls	r2, r0, #2
 8005f30:	4640      	mov	r0, r8
 8005f32:	4649      	mov	r1, r9
 8005f34:	f7fa f9a4 	bl	8000280 <__aeabi_uldivmod>
 8005f38:	4602      	mov	r2, r0
 8005f3a:	460b      	mov	r3, r1
 8005f3c:	4b49      	ldr	r3, [pc, #292]	; (8006064 <UART_SetConfig+0x38c>)
 8005f3e:	fba3 2302 	umull	r2, r3, r3, r2
 8005f42:	095b      	lsrs	r3, r3, #5
 8005f44:	011e      	lsls	r6, r3, #4
 8005f46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f48:	4618      	mov	r0, r3
 8005f4a:	f04f 0100 	mov.w	r1, #0
 8005f4e:	4602      	mov	r2, r0
 8005f50:	460b      	mov	r3, r1
 8005f52:	1894      	adds	r4, r2, r2
 8005f54:	60bc      	str	r4, [r7, #8]
 8005f56:	415b      	adcs	r3, r3
 8005f58:	60fb      	str	r3, [r7, #12]
 8005f5a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005f5e:	1812      	adds	r2, r2, r0
 8005f60:	eb41 0303 	adc.w	r3, r1, r3
 8005f64:	f04f 0400 	mov.w	r4, #0
 8005f68:	f04f 0500 	mov.w	r5, #0
 8005f6c:	00dd      	lsls	r5, r3, #3
 8005f6e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005f72:	00d4      	lsls	r4, r2, #3
 8005f74:	4622      	mov	r2, r4
 8005f76:	462b      	mov	r3, r5
 8005f78:	1814      	adds	r4, r2, r0
 8005f7a:	64bc      	str	r4, [r7, #72]	; 0x48
 8005f7c:	414b      	adcs	r3, r1
 8005f7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	4618      	mov	r0, r3
 8005f86:	f04f 0100 	mov.w	r1, #0
 8005f8a:	f04f 0200 	mov.w	r2, #0
 8005f8e:	f04f 0300 	mov.w	r3, #0
 8005f92:	008b      	lsls	r3, r1, #2
 8005f94:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005f98:	0082      	lsls	r2, r0, #2
 8005f9a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005f9e:	f7fa f96f 	bl	8000280 <__aeabi_uldivmod>
 8005fa2:	4602      	mov	r2, r0
 8005fa4:	460b      	mov	r3, r1
 8005fa6:	4b2f      	ldr	r3, [pc, #188]	; (8006064 <UART_SetConfig+0x38c>)
 8005fa8:	fba3 1302 	umull	r1, r3, r3, r2
 8005fac:	095b      	lsrs	r3, r3, #5
 8005fae:	2164      	movs	r1, #100	; 0x64
 8005fb0:	fb01 f303 	mul.w	r3, r1, r3
 8005fb4:	1ad3      	subs	r3, r2, r3
 8005fb6:	011b      	lsls	r3, r3, #4
 8005fb8:	3332      	adds	r3, #50	; 0x32
 8005fba:	4a2a      	ldr	r2, [pc, #168]	; (8006064 <UART_SetConfig+0x38c>)
 8005fbc:	fba2 2303 	umull	r2, r3, r2, r3
 8005fc0:	095b      	lsrs	r3, r3, #5
 8005fc2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005fc6:	441e      	add	r6, r3
 8005fc8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f04f 0100 	mov.w	r1, #0
 8005fd0:	4602      	mov	r2, r0
 8005fd2:	460b      	mov	r3, r1
 8005fd4:	1894      	adds	r4, r2, r2
 8005fd6:	603c      	str	r4, [r7, #0]
 8005fd8:	415b      	adcs	r3, r3
 8005fda:	607b      	str	r3, [r7, #4]
 8005fdc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005fe0:	1812      	adds	r2, r2, r0
 8005fe2:	eb41 0303 	adc.w	r3, r1, r3
 8005fe6:	f04f 0400 	mov.w	r4, #0
 8005fea:	f04f 0500 	mov.w	r5, #0
 8005fee:	00dd      	lsls	r5, r3, #3
 8005ff0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005ff4:	00d4      	lsls	r4, r2, #3
 8005ff6:	4622      	mov	r2, r4
 8005ff8:	462b      	mov	r3, r5
 8005ffa:	eb12 0a00 	adds.w	sl, r2, r0
 8005ffe:	eb43 0b01 	adc.w	fp, r3, r1
 8006002:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	4618      	mov	r0, r3
 8006008:	f04f 0100 	mov.w	r1, #0
 800600c:	f04f 0200 	mov.w	r2, #0
 8006010:	f04f 0300 	mov.w	r3, #0
 8006014:	008b      	lsls	r3, r1, #2
 8006016:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800601a:	0082      	lsls	r2, r0, #2
 800601c:	4650      	mov	r0, sl
 800601e:	4659      	mov	r1, fp
 8006020:	f7fa f92e 	bl	8000280 <__aeabi_uldivmod>
 8006024:	4602      	mov	r2, r0
 8006026:	460b      	mov	r3, r1
 8006028:	4b0e      	ldr	r3, [pc, #56]	; (8006064 <UART_SetConfig+0x38c>)
 800602a:	fba3 1302 	umull	r1, r3, r3, r2
 800602e:	095b      	lsrs	r3, r3, #5
 8006030:	2164      	movs	r1, #100	; 0x64
 8006032:	fb01 f303 	mul.w	r3, r1, r3
 8006036:	1ad3      	subs	r3, r2, r3
 8006038:	011b      	lsls	r3, r3, #4
 800603a:	3332      	adds	r3, #50	; 0x32
 800603c:	4a09      	ldr	r2, [pc, #36]	; (8006064 <UART_SetConfig+0x38c>)
 800603e:	fba2 2303 	umull	r2, r3, r2, r3
 8006042:	095b      	lsrs	r3, r3, #5
 8006044:	f003 020f 	and.w	r2, r3, #15
 8006048:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4432      	add	r2, r6
 800604e:	609a      	str	r2, [r3, #8]
}
 8006050:	bf00      	nop
 8006052:	377c      	adds	r7, #124	; 0x7c
 8006054:	46bd      	mov	sp, r7
 8006056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800605a:	bf00      	nop
 800605c:	40011000 	.word	0x40011000
 8006060:	40011400 	.word	0x40011400
 8006064:	51eb851f 	.word	0x51eb851f

08006068 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006068:	b084      	sub	sp, #16
 800606a:	b580      	push	{r7, lr}
 800606c:	b084      	sub	sp, #16
 800606e:	af00      	add	r7, sp, #0
 8006070:	6078      	str	r0, [r7, #4]
 8006072:	f107 001c 	add.w	r0, r7, #28
 8006076:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800607a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800607c:	2b01      	cmp	r3, #1
 800607e:	d122      	bne.n	80060c6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006084:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	68db      	ldr	r3, [r3, #12]
 8006090:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006094:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006098:	687a      	ldr	r2, [r7, #4]
 800609a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	68db      	ldr	r3, [r3, #12]
 80060a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80060a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060aa:	2b01      	cmp	r3, #1
 80060ac:	d105      	bne.n	80060ba <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	68db      	ldr	r3, [r3, #12]
 80060b2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f000 f9a0 	bl	8006400 <USB_CoreReset>
 80060c0:	4603      	mov	r3, r0
 80060c2:	73fb      	strb	r3, [r7, #15]
 80060c4:	e01a      	b.n	80060fc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	68db      	ldr	r3, [r3, #12]
 80060ca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f000 f994 	bl	8006400 <USB_CoreReset>
 80060d8:	4603      	mov	r3, r0
 80060da:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80060dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d106      	bne.n	80060f0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060e6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	639a      	str	r2, [r3, #56]	; 0x38
 80060ee:	e005      	b.n	80060fc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060f4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80060fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060fe:	2b01      	cmp	r3, #1
 8006100:	d10b      	bne.n	800611a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	689b      	ldr	r3, [r3, #8]
 8006106:	f043 0206 	orr.w	r2, r3, #6
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	689b      	ldr	r3, [r3, #8]
 8006112:	f043 0220 	orr.w	r2, r3, #32
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800611a:	7bfb      	ldrb	r3, [r7, #15]
}
 800611c:	4618      	mov	r0, r3
 800611e:	3710      	adds	r7, #16
 8006120:	46bd      	mov	sp, r7
 8006122:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006126:	b004      	add	sp, #16
 8006128:	4770      	bx	lr

0800612a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800612a:	b480      	push	{r7}
 800612c:	b083      	sub	sp, #12
 800612e:	af00      	add	r7, sp, #0
 8006130:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	689b      	ldr	r3, [r3, #8]
 8006136:	f043 0201 	orr.w	r2, r3, #1
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800613e:	2300      	movs	r3, #0
}
 8006140:	4618      	mov	r0, r3
 8006142:	370c      	adds	r7, #12
 8006144:	46bd      	mov	sp, r7
 8006146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614a:	4770      	bx	lr

0800614c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800614c:	b480      	push	{r7}
 800614e:	b083      	sub	sp, #12
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	689b      	ldr	r3, [r3, #8]
 8006158:	f023 0201 	bic.w	r2, r3, #1
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006160:	2300      	movs	r3, #0
}
 8006162:	4618      	mov	r0, r3
 8006164:	370c      	adds	r7, #12
 8006166:	46bd      	mov	sp, r7
 8006168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616c:	4770      	bx	lr

0800616e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800616e:	b580      	push	{r7, lr}
 8006170:	b084      	sub	sp, #16
 8006172:	af00      	add	r7, sp, #0
 8006174:	6078      	str	r0, [r7, #4]
 8006176:	460b      	mov	r3, r1
 8006178:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800617a:	2300      	movs	r3, #0
 800617c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	68db      	ldr	r3, [r3, #12]
 8006182:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800618a:	78fb      	ldrb	r3, [r7, #3]
 800618c:	2b01      	cmp	r3, #1
 800618e:	d115      	bne.n	80061bc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	68db      	ldr	r3, [r3, #12]
 8006194:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800619c:	2001      	movs	r0, #1
 800619e:	f7fb fbb9 	bl	8001914 <HAL_Delay>
      ms++;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	3301      	adds	r3, #1
 80061a6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	f000 f91a 	bl	80063e2 <USB_GetMode>
 80061ae:	4603      	mov	r3, r0
 80061b0:	2b01      	cmp	r3, #1
 80061b2:	d01e      	beq.n	80061f2 <USB_SetCurrentMode+0x84>
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	2b31      	cmp	r3, #49	; 0x31
 80061b8:	d9f0      	bls.n	800619c <USB_SetCurrentMode+0x2e>
 80061ba:	e01a      	b.n	80061f2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80061bc:	78fb      	ldrb	r3, [r7, #3]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d115      	bne.n	80061ee <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	68db      	ldr	r3, [r3, #12]
 80061c6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80061ce:	2001      	movs	r0, #1
 80061d0:	f7fb fba0 	bl	8001914 <HAL_Delay>
      ms++;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	3301      	adds	r3, #1
 80061d8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f000 f901 	bl	80063e2 <USB_GetMode>
 80061e0:	4603      	mov	r3, r0
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d005      	beq.n	80061f2 <USB_SetCurrentMode+0x84>
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	2b31      	cmp	r3, #49	; 0x31
 80061ea:	d9f0      	bls.n	80061ce <USB_SetCurrentMode+0x60>
 80061ec:	e001      	b.n	80061f2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80061ee:	2301      	movs	r3, #1
 80061f0:	e005      	b.n	80061fe <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2b32      	cmp	r3, #50	; 0x32
 80061f6:	d101      	bne.n	80061fc <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80061f8:	2301      	movs	r3, #1
 80061fa:	e000      	b.n	80061fe <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80061fc:	2300      	movs	r3, #0
}
 80061fe:	4618      	mov	r0, r3
 8006200:	3710      	adds	r7, #16
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}
	...

08006208 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006208:	b480      	push	{r7}
 800620a:	b085      	sub	sp, #20
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
 8006210:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006212:	2300      	movs	r3, #0
 8006214:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	019b      	lsls	r3, r3, #6
 800621a:	f043 0220 	orr.w	r2, r3, #32
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	3301      	adds	r3, #1
 8006226:	60fb      	str	r3, [r7, #12]
 8006228:	4a08      	ldr	r2, [pc, #32]	; (800624c <USB_FlushTxFifo+0x44>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d901      	bls.n	8006232 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800622e:	2303      	movs	r3, #3
 8006230:	e006      	b.n	8006240 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	691b      	ldr	r3, [r3, #16]
 8006236:	f003 0320 	and.w	r3, r3, #32
 800623a:	2b20      	cmp	r3, #32
 800623c:	d0f1      	beq.n	8006222 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800623e:	2300      	movs	r3, #0
}
 8006240:	4618      	mov	r0, r3
 8006242:	3714      	adds	r7, #20
 8006244:	46bd      	mov	sp, r7
 8006246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624a:	4770      	bx	lr
 800624c:	00030d40 	.word	0x00030d40

08006250 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006250:	b480      	push	{r7}
 8006252:	b085      	sub	sp, #20
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006258:	2300      	movs	r3, #0
 800625a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2210      	movs	r2, #16
 8006260:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	3301      	adds	r3, #1
 8006266:	60fb      	str	r3, [r7, #12]
 8006268:	4a08      	ldr	r2, [pc, #32]	; (800628c <USB_FlushRxFifo+0x3c>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d901      	bls.n	8006272 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800626e:	2303      	movs	r3, #3
 8006270:	e006      	b.n	8006280 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	691b      	ldr	r3, [r3, #16]
 8006276:	f003 0310 	and.w	r3, r3, #16
 800627a:	2b10      	cmp	r3, #16
 800627c:	d0f1      	beq.n	8006262 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800627e:	2300      	movs	r3, #0
}
 8006280:	4618      	mov	r0, r3
 8006282:	3714      	adds	r7, #20
 8006284:	46bd      	mov	sp, r7
 8006286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628a:	4770      	bx	lr
 800628c:	00030d40 	.word	0x00030d40

08006290 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006290:	b480      	push	{r7}
 8006292:	b089      	sub	sp, #36	; 0x24
 8006294:	af00      	add	r7, sp, #0
 8006296:	60f8      	str	r0, [r7, #12]
 8006298:	60b9      	str	r1, [r7, #8]
 800629a:	4611      	mov	r1, r2
 800629c:	461a      	mov	r2, r3
 800629e:	460b      	mov	r3, r1
 80062a0:	71fb      	strb	r3, [r7, #7]
 80062a2:	4613      	mov	r3, r2
 80062a4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80062ae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d123      	bne.n	80062fe <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80062b6:	88bb      	ldrh	r3, [r7, #4]
 80062b8:	3303      	adds	r3, #3
 80062ba:	089b      	lsrs	r3, r3, #2
 80062bc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80062be:	2300      	movs	r3, #0
 80062c0:	61bb      	str	r3, [r7, #24]
 80062c2:	e018      	b.n	80062f6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80062c4:	79fb      	ldrb	r3, [r7, #7]
 80062c6:	031a      	lsls	r2, r3, #12
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	4413      	add	r3, r2
 80062cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062d0:	461a      	mov	r2, r3
 80062d2:	69fb      	ldr	r3, [r7, #28]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80062d8:	69fb      	ldr	r3, [r7, #28]
 80062da:	3301      	adds	r3, #1
 80062dc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80062de:	69fb      	ldr	r3, [r7, #28]
 80062e0:	3301      	adds	r3, #1
 80062e2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80062e4:	69fb      	ldr	r3, [r7, #28]
 80062e6:	3301      	adds	r3, #1
 80062e8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80062ea:	69fb      	ldr	r3, [r7, #28]
 80062ec:	3301      	adds	r3, #1
 80062ee:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80062f0:	69bb      	ldr	r3, [r7, #24]
 80062f2:	3301      	adds	r3, #1
 80062f4:	61bb      	str	r3, [r7, #24]
 80062f6:	69ba      	ldr	r2, [r7, #24]
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	429a      	cmp	r2, r3
 80062fc:	d3e2      	bcc.n	80062c4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80062fe:	2300      	movs	r3, #0
}
 8006300:	4618      	mov	r0, r3
 8006302:	3724      	adds	r7, #36	; 0x24
 8006304:	46bd      	mov	sp, r7
 8006306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630a:	4770      	bx	lr

0800630c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800630c:	b480      	push	{r7}
 800630e:	b08b      	sub	sp, #44	; 0x2c
 8006310:	af00      	add	r7, sp, #0
 8006312:	60f8      	str	r0, [r7, #12]
 8006314:	60b9      	str	r1, [r7, #8]
 8006316:	4613      	mov	r3, r2
 8006318:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006322:	88fb      	ldrh	r3, [r7, #6]
 8006324:	089b      	lsrs	r3, r3, #2
 8006326:	b29b      	uxth	r3, r3
 8006328:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800632a:	88fb      	ldrh	r3, [r7, #6]
 800632c:	f003 0303 	and.w	r3, r3, #3
 8006330:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006332:	2300      	movs	r3, #0
 8006334:	623b      	str	r3, [r7, #32]
 8006336:	e014      	b.n	8006362 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006338:	69bb      	ldr	r3, [r7, #24]
 800633a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800633e:	681a      	ldr	r2, [r3, #0]
 8006340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006342:	601a      	str	r2, [r3, #0]
    pDest++;
 8006344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006346:	3301      	adds	r3, #1
 8006348:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800634a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800634c:	3301      	adds	r3, #1
 800634e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006352:	3301      	adds	r3, #1
 8006354:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006358:	3301      	adds	r3, #1
 800635a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800635c:	6a3b      	ldr	r3, [r7, #32]
 800635e:	3301      	adds	r3, #1
 8006360:	623b      	str	r3, [r7, #32]
 8006362:	6a3a      	ldr	r2, [r7, #32]
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	429a      	cmp	r2, r3
 8006368:	d3e6      	bcc.n	8006338 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800636a:	8bfb      	ldrh	r3, [r7, #30]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d01e      	beq.n	80063ae <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006370:	2300      	movs	r3, #0
 8006372:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006374:	69bb      	ldr	r3, [r7, #24]
 8006376:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800637a:	461a      	mov	r2, r3
 800637c:	f107 0310 	add.w	r3, r7, #16
 8006380:	6812      	ldr	r2, [r2, #0]
 8006382:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006384:	693a      	ldr	r2, [r7, #16]
 8006386:	6a3b      	ldr	r3, [r7, #32]
 8006388:	b2db      	uxtb	r3, r3
 800638a:	00db      	lsls	r3, r3, #3
 800638c:	fa22 f303 	lsr.w	r3, r2, r3
 8006390:	b2da      	uxtb	r2, r3
 8006392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006394:	701a      	strb	r2, [r3, #0]
      i++;
 8006396:	6a3b      	ldr	r3, [r7, #32]
 8006398:	3301      	adds	r3, #1
 800639a:	623b      	str	r3, [r7, #32]
      pDest++;
 800639c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800639e:	3301      	adds	r3, #1
 80063a0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80063a2:	8bfb      	ldrh	r3, [r7, #30]
 80063a4:	3b01      	subs	r3, #1
 80063a6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80063a8:	8bfb      	ldrh	r3, [r7, #30]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d1ea      	bne.n	8006384 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80063ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	372c      	adds	r7, #44	; 0x2c
 80063b4:	46bd      	mov	sp, r7
 80063b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ba:	4770      	bx	lr

080063bc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80063bc:	b480      	push	{r7}
 80063be:	b085      	sub	sp, #20
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	695b      	ldr	r3, [r3, #20]
 80063c8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	699b      	ldr	r3, [r3, #24]
 80063ce:	68fa      	ldr	r2, [r7, #12]
 80063d0:	4013      	ands	r3, r2
 80063d2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80063d4:	68fb      	ldr	r3, [r7, #12]
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	3714      	adds	r7, #20
 80063da:	46bd      	mov	sp, r7
 80063dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e0:	4770      	bx	lr

080063e2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80063e2:	b480      	push	{r7}
 80063e4:	b083      	sub	sp, #12
 80063e6:	af00      	add	r7, sp, #0
 80063e8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	695b      	ldr	r3, [r3, #20]
 80063ee:	f003 0301 	and.w	r3, r3, #1
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	370c      	adds	r7, #12
 80063f6:	46bd      	mov	sp, r7
 80063f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fc:	4770      	bx	lr
	...

08006400 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006400:	b480      	push	{r7}
 8006402:	b085      	sub	sp, #20
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006408:	2300      	movs	r3, #0
 800640a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	3301      	adds	r3, #1
 8006410:	60fb      	str	r3, [r7, #12]
 8006412:	4a13      	ldr	r2, [pc, #76]	; (8006460 <USB_CoreReset+0x60>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d901      	bls.n	800641c <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8006418:	2303      	movs	r3, #3
 800641a:	e01a      	b.n	8006452 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	691b      	ldr	r3, [r3, #16]
 8006420:	2b00      	cmp	r3, #0
 8006422:	daf3      	bge.n	800640c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006424:	2300      	movs	r3, #0
 8006426:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	691b      	ldr	r3, [r3, #16]
 800642c:	f043 0201 	orr.w	r2, r3, #1
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	3301      	adds	r3, #1
 8006438:	60fb      	str	r3, [r7, #12]
 800643a:	4a09      	ldr	r2, [pc, #36]	; (8006460 <USB_CoreReset+0x60>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d901      	bls.n	8006444 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8006440:	2303      	movs	r3, #3
 8006442:	e006      	b.n	8006452 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	691b      	ldr	r3, [r3, #16]
 8006448:	f003 0301 	and.w	r3, r3, #1
 800644c:	2b01      	cmp	r3, #1
 800644e:	d0f1      	beq.n	8006434 <USB_CoreReset+0x34>

  return HAL_OK;
 8006450:	2300      	movs	r3, #0
}
 8006452:	4618      	mov	r0, r3
 8006454:	3714      	adds	r7, #20
 8006456:	46bd      	mov	sp, r7
 8006458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645c:	4770      	bx	lr
 800645e:	bf00      	nop
 8006460:	00030d40 	.word	0x00030d40

08006464 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006464:	b084      	sub	sp, #16
 8006466:	b580      	push	{r7, lr}
 8006468:	b084      	sub	sp, #16
 800646a:	af00      	add	r7, sp, #0
 800646c:	6078      	str	r0, [r7, #4]
 800646e:	f107 001c 	add.w	r0, r7, #28
 8006472:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006480:	461a      	mov	r2, r3
 8006482:	2300      	movs	r3, #0
 8006484:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800648a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006496:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064a2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d018      	beq.n	80064e8 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80064b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b8:	2b01      	cmp	r3, #1
 80064ba:	d10a      	bne.n	80064d2 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	68ba      	ldr	r2, [r7, #8]
 80064c6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80064ca:	f043 0304 	orr.w	r3, r3, #4
 80064ce:	6013      	str	r3, [r2, #0]
 80064d0:	e014      	b.n	80064fc <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	68ba      	ldr	r2, [r7, #8]
 80064dc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80064e0:	f023 0304 	bic.w	r3, r3, #4
 80064e4:	6013      	str	r3, [r2, #0]
 80064e6:	e009      	b.n	80064fc <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	68ba      	ldr	r2, [r7, #8]
 80064f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80064f6:	f023 0304 	bic.w	r3, r3, #4
 80064fa:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80064fc:	2110      	movs	r1, #16
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f7ff fe82 	bl	8006208 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	f7ff fea3 	bl	8006250 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800650a:	2300      	movs	r3, #0
 800650c:	60fb      	str	r3, [r7, #12]
 800650e:	e015      	b.n	800653c <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	015a      	lsls	r2, r3, #5
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	4413      	add	r3, r2
 8006518:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800651c:	461a      	mov	r2, r3
 800651e:	f04f 33ff 	mov.w	r3, #4294967295
 8006522:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	015a      	lsls	r2, r3, #5
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	4413      	add	r3, r2
 800652c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006530:	461a      	mov	r2, r3
 8006532:	2300      	movs	r3, #0
 8006534:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	3301      	adds	r3, #1
 800653a:	60fb      	str	r3, [r7, #12]
 800653c:	6a3b      	ldr	r3, [r7, #32]
 800653e:	68fa      	ldr	r2, [r7, #12]
 8006540:	429a      	cmp	r2, r3
 8006542:	d3e5      	bcc.n	8006510 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2200      	movs	r2, #0
 8006548:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	f04f 32ff 	mov.w	r2, #4294967295
 8006550:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006556:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800655a:	2b00      	cmp	r3, #0
 800655c:	d00b      	beq.n	8006576 <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006564:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	4a13      	ldr	r2, [pc, #76]	; (80065b8 <USB_HostInit+0x154>)
 800656a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	4a13      	ldr	r2, [pc, #76]	; (80065bc <USB_HostInit+0x158>)
 8006570:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8006574:	e009      	b.n	800658a <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2280      	movs	r2, #128	; 0x80
 800657a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	4a10      	ldr	r2, [pc, #64]	; (80065c0 <USB_HostInit+0x15c>)
 8006580:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	4a0f      	ldr	r2, [pc, #60]	; (80065c4 <USB_HostInit+0x160>)
 8006586:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800658a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800658c:	2b00      	cmp	r3, #0
 800658e:	d105      	bne.n	800659c <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	699b      	ldr	r3, [r3, #24]
 8006594:	f043 0210 	orr.w	r2, r3, #16
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	699a      	ldr	r2, [r3, #24]
 80065a0:	4b09      	ldr	r3, [pc, #36]	; (80065c8 <USB_HostInit+0x164>)
 80065a2:	4313      	orrs	r3, r2
 80065a4:	687a      	ldr	r2, [r7, #4]
 80065a6:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80065a8:	2300      	movs	r3, #0
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	3710      	adds	r7, #16
 80065ae:	46bd      	mov	sp, r7
 80065b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80065b4:	b004      	add	sp, #16
 80065b6:	4770      	bx	lr
 80065b8:	01000200 	.word	0x01000200
 80065bc:	00e00300 	.word	0x00e00300
 80065c0:	00600080 	.word	0x00600080
 80065c4:	004000e0 	.word	0x004000e0
 80065c8:	a3200008 	.word	0xa3200008

080065cc <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80065cc:	b480      	push	{r7}
 80065ce:	b085      	sub	sp, #20
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
 80065d4:	460b      	mov	r3, r1
 80065d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	68fa      	ldr	r2, [r7, #12]
 80065e6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80065ea:	f023 0303 	bic.w	r3, r3, #3
 80065ee:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065f6:	681a      	ldr	r2, [r3, #0]
 80065f8:	78fb      	ldrb	r3, [r7, #3]
 80065fa:	f003 0303 	and.w	r3, r3, #3
 80065fe:	68f9      	ldr	r1, [r7, #12]
 8006600:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006604:	4313      	orrs	r3, r2
 8006606:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006608:	78fb      	ldrb	r3, [r7, #3]
 800660a:	2b01      	cmp	r3, #1
 800660c:	d107      	bne.n	800661e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006614:	461a      	mov	r2, r3
 8006616:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800661a:	6053      	str	r3, [r2, #4]
 800661c:	e009      	b.n	8006632 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800661e:	78fb      	ldrb	r3, [r7, #3]
 8006620:	2b02      	cmp	r3, #2
 8006622:	d106      	bne.n	8006632 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800662a:	461a      	mov	r2, r3
 800662c:	f241 7370 	movw	r3, #6000	; 0x1770
 8006630:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8006632:	2300      	movs	r3, #0
}
 8006634:	4618      	mov	r0, r3
 8006636:	3714      	adds	r7, #20
 8006638:	46bd      	mov	sp, r7
 800663a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663e:	4770      	bx	lr

08006640 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b084      	sub	sp, #16
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800664c:	2300      	movs	r3, #0
 800664e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006660:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	68fa      	ldr	r2, [r7, #12]
 8006666:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800666a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800666e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006670:	2064      	movs	r0, #100	; 0x64
 8006672:	f7fb f94f 	bl	8001914 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	68fa      	ldr	r2, [r7, #12]
 800667a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800667e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006682:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006684:	200a      	movs	r0, #10
 8006686:	f7fb f945 	bl	8001914 <HAL_Delay>

  return HAL_OK;
 800668a:	2300      	movs	r3, #0
}
 800668c:	4618      	mov	r0, r3
 800668e:	3710      	adds	r7, #16
 8006690:	46bd      	mov	sp, r7
 8006692:	bd80      	pop	{r7, pc}

08006694 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006694:	b480      	push	{r7}
 8006696:	b085      	sub	sp, #20
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
 800669c:	460b      	mov	r3, r1
 800669e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80066a4:	2300      	movs	r3, #0
 80066a6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80066b8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d109      	bne.n	80066d8 <USB_DriveVbus+0x44>
 80066c4:	78fb      	ldrb	r3, [r7, #3]
 80066c6:	2b01      	cmp	r3, #1
 80066c8:	d106      	bne.n	80066d8 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	68fa      	ldr	r2, [r7, #12]
 80066ce:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80066d2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80066d6:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80066de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066e2:	d109      	bne.n	80066f8 <USB_DriveVbus+0x64>
 80066e4:	78fb      	ldrb	r3, [r7, #3]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d106      	bne.n	80066f8 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	68fa      	ldr	r2, [r7, #12]
 80066ee:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80066f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80066f6:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80066f8:	2300      	movs	r3, #0
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3714      	adds	r7, #20
 80066fe:	46bd      	mov	sp, r7
 8006700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006704:	4770      	bx	lr

08006706 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006706:	b480      	push	{r7}
 8006708:	b085      	sub	sp, #20
 800670a:	af00      	add	r7, sp, #0
 800670c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006712:	2300      	movs	r3, #0
 8006714:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	0c5b      	lsrs	r3, r3, #17
 8006724:	f003 0303 	and.w	r3, r3, #3
}
 8006728:	4618      	mov	r0, r3
 800672a:	3714      	adds	r7, #20
 800672c:	46bd      	mov	sp, r7
 800672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006732:	4770      	bx	lr

08006734 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8006734:	b480      	push	{r7}
 8006736:	b085      	sub	sp, #20
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006746:	689b      	ldr	r3, [r3, #8]
 8006748:	b29b      	uxth	r3, r3
}
 800674a:	4618      	mov	r0, r3
 800674c:	3714      	adds	r7, #20
 800674e:	46bd      	mov	sp, r7
 8006750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006754:	4770      	bx	lr
	...

08006758 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b088      	sub	sp, #32
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
 8006760:	4608      	mov	r0, r1
 8006762:	4611      	mov	r1, r2
 8006764:	461a      	mov	r2, r3
 8006766:	4603      	mov	r3, r0
 8006768:	70fb      	strb	r3, [r7, #3]
 800676a:	460b      	mov	r3, r1
 800676c:	70bb      	strb	r3, [r7, #2]
 800676e:	4613      	mov	r3, r2
 8006770:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006772:	2300      	movs	r3, #0
 8006774:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800677a:	78fb      	ldrb	r3, [r7, #3]
 800677c:	015a      	lsls	r2, r3, #5
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	4413      	add	r3, r2
 8006782:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006786:	461a      	mov	r2, r3
 8006788:	f04f 33ff 	mov.w	r3, #4294967295
 800678c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800678e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006792:	2b03      	cmp	r3, #3
 8006794:	d87e      	bhi.n	8006894 <USB_HC_Init+0x13c>
 8006796:	a201      	add	r2, pc, #4	; (adr r2, 800679c <USB_HC_Init+0x44>)
 8006798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800679c:	080067ad 	.word	0x080067ad
 80067a0:	08006857 	.word	0x08006857
 80067a4:	080067ad 	.word	0x080067ad
 80067a8:	08006819 	.word	0x08006819
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80067ac:	78fb      	ldrb	r3, [r7, #3]
 80067ae:	015a      	lsls	r2, r3, #5
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	4413      	add	r3, r2
 80067b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067b8:	461a      	mov	r2, r3
 80067ba:	f240 439d 	movw	r3, #1181	; 0x49d
 80067be:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80067c0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	da10      	bge.n	80067ea <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80067c8:	78fb      	ldrb	r3, [r7, #3]
 80067ca:	015a      	lsls	r2, r3, #5
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	4413      	add	r3, r2
 80067d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067d4:	68db      	ldr	r3, [r3, #12]
 80067d6:	78fa      	ldrb	r2, [r7, #3]
 80067d8:	0151      	lsls	r1, r2, #5
 80067da:	693a      	ldr	r2, [r7, #16]
 80067dc:	440a      	add	r2, r1
 80067de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067e6:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80067e8:	e057      	b.n	800689a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d051      	beq.n	800689a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80067f6:	78fb      	ldrb	r3, [r7, #3]
 80067f8:	015a      	lsls	r2, r3, #5
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	4413      	add	r3, r2
 80067fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006802:	68db      	ldr	r3, [r3, #12]
 8006804:	78fa      	ldrb	r2, [r7, #3]
 8006806:	0151      	lsls	r1, r2, #5
 8006808:	693a      	ldr	r2, [r7, #16]
 800680a:	440a      	add	r2, r1
 800680c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006810:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006814:	60d3      	str	r3, [r2, #12]
      break;
 8006816:	e040      	b.n	800689a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006818:	78fb      	ldrb	r3, [r7, #3]
 800681a:	015a      	lsls	r2, r3, #5
 800681c:	693b      	ldr	r3, [r7, #16]
 800681e:	4413      	add	r3, r2
 8006820:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006824:	461a      	mov	r2, r3
 8006826:	f240 639d 	movw	r3, #1693	; 0x69d
 800682a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800682c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006830:	2b00      	cmp	r3, #0
 8006832:	da34      	bge.n	800689e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006834:	78fb      	ldrb	r3, [r7, #3]
 8006836:	015a      	lsls	r2, r3, #5
 8006838:	693b      	ldr	r3, [r7, #16]
 800683a:	4413      	add	r3, r2
 800683c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006840:	68db      	ldr	r3, [r3, #12]
 8006842:	78fa      	ldrb	r2, [r7, #3]
 8006844:	0151      	lsls	r1, r2, #5
 8006846:	693a      	ldr	r2, [r7, #16]
 8006848:	440a      	add	r2, r1
 800684a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800684e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006852:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006854:	e023      	b.n	800689e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006856:	78fb      	ldrb	r3, [r7, #3]
 8006858:	015a      	lsls	r2, r3, #5
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	4413      	add	r3, r2
 800685e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006862:	461a      	mov	r2, r3
 8006864:	f240 2325 	movw	r3, #549	; 0x225
 8006868:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800686a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800686e:	2b00      	cmp	r3, #0
 8006870:	da17      	bge.n	80068a2 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006872:	78fb      	ldrb	r3, [r7, #3]
 8006874:	015a      	lsls	r2, r3, #5
 8006876:	693b      	ldr	r3, [r7, #16]
 8006878:	4413      	add	r3, r2
 800687a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800687e:	68db      	ldr	r3, [r3, #12]
 8006880:	78fa      	ldrb	r2, [r7, #3]
 8006882:	0151      	lsls	r1, r2, #5
 8006884:	693a      	ldr	r2, [r7, #16]
 8006886:	440a      	add	r2, r1
 8006888:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800688c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006890:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006892:	e006      	b.n	80068a2 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8006894:	2301      	movs	r3, #1
 8006896:	77fb      	strb	r3, [r7, #31]
      break;
 8006898:	e004      	b.n	80068a4 <USB_HC_Init+0x14c>
      break;
 800689a:	bf00      	nop
 800689c:	e002      	b.n	80068a4 <USB_HC_Init+0x14c>
      break;
 800689e:	bf00      	nop
 80068a0:	e000      	b.n	80068a4 <USB_HC_Init+0x14c>
      break;
 80068a2:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80068aa:	699a      	ldr	r2, [r3, #24]
 80068ac:	78fb      	ldrb	r3, [r7, #3]
 80068ae:	f003 030f 	and.w	r3, r3, #15
 80068b2:	2101      	movs	r1, #1
 80068b4:	fa01 f303 	lsl.w	r3, r1, r3
 80068b8:	6939      	ldr	r1, [r7, #16]
 80068ba:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80068be:	4313      	orrs	r3, r2
 80068c0:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	699b      	ldr	r3, [r3, #24]
 80068c6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80068ce:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	da03      	bge.n	80068de <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80068d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068da:	61bb      	str	r3, [r7, #24]
 80068dc:	e001      	b.n	80068e2 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 80068de:	2300      	movs	r3, #0
 80068e0:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f7ff ff0f 	bl	8006706 <USB_GetHostSpeed>
 80068e8:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80068ea:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80068ee:	2b02      	cmp	r3, #2
 80068f0:	d106      	bne.n	8006900 <USB_HC_Init+0x1a8>
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	2b02      	cmp	r3, #2
 80068f6:	d003      	beq.n	8006900 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80068f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80068fc:	617b      	str	r3, [r7, #20]
 80068fe:	e001      	b.n	8006904 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006900:	2300      	movs	r3, #0
 8006902:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006904:	787b      	ldrb	r3, [r7, #1]
 8006906:	059b      	lsls	r3, r3, #22
 8006908:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800690c:	78bb      	ldrb	r3, [r7, #2]
 800690e:	02db      	lsls	r3, r3, #11
 8006910:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006914:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006916:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800691a:	049b      	lsls	r3, r3, #18
 800691c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006920:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006922:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006924:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006928:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800692a:	69bb      	ldr	r3, [r7, #24]
 800692c:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800692e:	78fb      	ldrb	r3, [r7, #3]
 8006930:	0159      	lsls	r1, r3, #5
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	440b      	add	r3, r1
 8006936:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800693a:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006940:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8006942:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006946:	2b03      	cmp	r3, #3
 8006948:	d10f      	bne.n	800696a <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800694a:	78fb      	ldrb	r3, [r7, #3]
 800694c:	015a      	lsls	r2, r3, #5
 800694e:	693b      	ldr	r3, [r7, #16]
 8006950:	4413      	add	r3, r2
 8006952:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	78fa      	ldrb	r2, [r7, #3]
 800695a:	0151      	lsls	r1, r2, #5
 800695c:	693a      	ldr	r2, [r7, #16]
 800695e:	440a      	add	r2, r1
 8006960:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006964:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006968:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800696a:	7ffb      	ldrb	r3, [r7, #31]
}
 800696c:	4618      	mov	r0, r3
 800696e:	3720      	adds	r7, #32
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}

08006974 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b08c      	sub	sp, #48	; 0x30
 8006978:	af02      	add	r7, sp, #8
 800697a:	60f8      	str	r0, [r7, #12]
 800697c:	60b9      	str	r1, [r7, #8]
 800697e:	4613      	mov	r3, r2
 8006980:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	785b      	ldrb	r3, [r3, #1]
 800698a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800698c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006990:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006996:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800699a:	2b00      	cmp	r3, #0
 800699c:	d02d      	beq.n	80069fa <USB_HC_StartXfer+0x86>
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	791b      	ldrb	r3, [r3, #4]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d129      	bne.n	80069fa <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80069a6:	79fb      	ldrb	r3, [r7, #7]
 80069a8:	2b01      	cmp	r3, #1
 80069aa:	d117      	bne.n	80069dc <USB_HC_StartXfer+0x68>
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	79db      	ldrb	r3, [r3, #7]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d003      	beq.n	80069bc <USB_HC_StartXfer+0x48>
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	79db      	ldrb	r3, [r3, #7]
 80069b8:	2b02      	cmp	r3, #2
 80069ba:	d10f      	bne.n	80069dc <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80069bc:	69fb      	ldr	r3, [r7, #28]
 80069be:	015a      	lsls	r2, r3, #5
 80069c0:	6a3b      	ldr	r3, [r7, #32]
 80069c2:	4413      	add	r3, r2
 80069c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069c8:	68db      	ldr	r3, [r3, #12]
 80069ca:	69fa      	ldr	r2, [r7, #28]
 80069cc:	0151      	lsls	r1, r2, #5
 80069ce:	6a3a      	ldr	r2, [r7, #32]
 80069d0:	440a      	add	r2, r1
 80069d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80069d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069da:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80069dc:	79fb      	ldrb	r3, [r7, #7]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d10b      	bne.n	80069fa <USB_HC_StartXfer+0x86>
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	795b      	ldrb	r3, [r3, #5]
 80069e6:	2b01      	cmp	r3, #1
 80069e8:	d107      	bne.n	80069fa <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	785b      	ldrb	r3, [r3, #1]
 80069ee:	4619      	mov	r1, r3
 80069f0:	68f8      	ldr	r0, [r7, #12]
 80069f2:	f000 fa2f 	bl	8006e54 <USB_DoPing>
      return HAL_OK;
 80069f6:	2300      	movs	r3, #0
 80069f8:	e0f8      	b.n	8006bec <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	695b      	ldr	r3, [r3, #20]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d018      	beq.n	8006a34 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	695b      	ldr	r3, [r3, #20]
 8006a06:	68ba      	ldr	r2, [r7, #8]
 8006a08:	8912      	ldrh	r2, [r2, #8]
 8006a0a:	4413      	add	r3, r2
 8006a0c:	3b01      	subs	r3, #1
 8006a0e:	68ba      	ldr	r2, [r7, #8]
 8006a10:	8912      	ldrh	r2, [r2, #8]
 8006a12:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a16:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8006a18:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006a1a:	8b7b      	ldrh	r3, [r7, #26]
 8006a1c:	429a      	cmp	r2, r3
 8006a1e:	d90b      	bls.n	8006a38 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8006a20:	8b7b      	ldrh	r3, [r7, #26]
 8006a22:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006a24:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006a26:	68ba      	ldr	r2, [r7, #8]
 8006a28:	8912      	ldrh	r2, [r2, #8]
 8006a2a:	fb02 f203 	mul.w	r2, r2, r3
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	611a      	str	r2, [r3, #16]
 8006a32:	e001      	b.n	8006a38 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8006a34:	2301      	movs	r3, #1
 8006a36:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	78db      	ldrb	r3, [r3, #3]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d007      	beq.n	8006a50 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006a40:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006a42:	68ba      	ldr	r2, [r7, #8]
 8006a44:	8912      	ldrh	r2, [r2, #8]
 8006a46:	fb02 f203 	mul.w	r2, r2, r3
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	611a      	str	r2, [r3, #16]
 8006a4e:	e003      	b.n	8006a58 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	695a      	ldr	r2, [r3, #20]
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	691b      	ldr	r3, [r3, #16]
 8006a5c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006a60:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006a62:	04d9      	lsls	r1, r3, #19
 8006a64:	4b63      	ldr	r3, [pc, #396]	; (8006bf4 <USB_HC_StartXfer+0x280>)
 8006a66:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006a68:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	7a9b      	ldrb	r3, [r3, #10]
 8006a6e:	075b      	lsls	r3, r3, #29
 8006a70:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006a74:	69f9      	ldr	r1, [r7, #28]
 8006a76:	0148      	lsls	r0, r1, #5
 8006a78:	6a39      	ldr	r1, [r7, #32]
 8006a7a:	4401      	add	r1, r0
 8006a7c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006a80:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006a82:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006a84:	79fb      	ldrb	r3, [r7, #7]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d009      	beq.n	8006a9e <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	68d9      	ldr	r1, [r3, #12]
 8006a8e:	69fb      	ldr	r3, [r7, #28]
 8006a90:	015a      	lsls	r2, r3, #5
 8006a92:	6a3b      	ldr	r3, [r7, #32]
 8006a94:	4413      	add	r3, r2
 8006a96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a9a:	460a      	mov	r2, r1
 8006a9c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006a9e:	6a3b      	ldr	r3, [r7, #32]
 8006aa0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006aa4:	689b      	ldr	r3, [r3, #8]
 8006aa6:	f003 0301 	and.w	r3, r3, #1
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	bf0c      	ite	eq
 8006aae:	2301      	moveq	r3, #1
 8006ab0:	2300      	movne	r3, #0
 8006ab2:	b2db      	uxtb	r3, r3
 8006ab4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006ab6:	69fb      	ldr	r3, [r7, #28]
 8006ab8:	015a      	lsls	r2, r3, #5
 8006aba:	6a3b      	ldr	r3, [r7, #32]
 8006abc:	4413      	add	r3, r2
 8006abe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	69fa      	ldr	r2, [r7, #28]
 8006ac6:	0151      	lsls	r1, r2, #5
 8006ac8:	6a3a      	ldr	r2, [r7, #32]
 8006aca:	440a      	add	r2, r1
 8006acc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ad0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006ad4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006ad6:	69fb      	ldr	r3, [r7, #28]
 8006ad8:	015a      	lsls	r2, r3, #5
 8006ada:	6a3b      	ldr	r3, [r7, #32]
 8006adc:	4413      	add	r3, r2
 8006ade:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ae2:	681a      	ldr	r2, [r3, #0]
 8006ae4:	7e7b      	ldrb	r3, [r7, #25]
 8006ae6:	075b      	lsls	r3, r3, #29
 8006ae8:	69f9      	ldr	r1, [r7, #28]
 8006aea:	0148      	lsls	r0, r1, #5
 8006aec:	6a39      	ldr	r1, [r7, #32]
 8006aee:	4401      	add	r1, r0
 8006af0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006af4:	4313      	orrs	r3, r2
 8006af6:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006af8:	69fb      	ldr	r3, [r7, #28]
 8006afa:	015a      	lsls	r2, r3, #5
 8006afc:	6a3b      	ldr	r3, [r7, #32]
 8006afe:	4413      	add	r3, r2
 8006b00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006b0e:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	78db      	ldrb	r3, [r3, #3]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d004      	beq.n	8006b22 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b1e:	613b      	str	r3, [r7, #16]
 8006b20:	e003      	b.n	8006b2a <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006b22:	693b      	ldr	r3, [r7, #16]
 8006b24:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006b28:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006b2a:	693b      	ldr	r3, [r7, #16]
 8006b2c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006b30:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006b32:	69fb      	ldr	r3, [r7, #28]
 8006b34:	015a      	lsls	r2, r3, #5
 8006b36:	6a3b      	ldr	r3, [r7, #32]
 8006b38:	4413      	add	r3, r2
 8006b3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b3e:	461a      	mov	r2, r3
 8006b40:	693b      	ldr	r3, [r7, #16]
 8006b42:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006b44:	79fb      	ldrb	r3, [r7, #7]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d001      	beq.n	8006b4e <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	e04e      	b.n	8006bec <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	78db      	ldrb	r3, [r3, #3]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d149      	bne.n	8006bea <USB_HC_StartXfer+0x276>
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	695b      	ldr	r3, [r3, #20]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d045      	beq.n	8006bea <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	79db      	ldrb	r3, [r3, #7]
 8006b62:	2b03      	cmp	r3, #3
 8006b64:	d830      	bhi.n	8006bc8 <USB_HC_StartXfer+0x254>
 8006b66:	a201      	add	r2, pc, #4	; (adr r2, 8006b6c <USB_HC_StartXfer+0x1f8>)
 8006b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b6c:	08006b7d 	.word	0x08006b7d
 8006b70:	08006ba1 	.word	0x08006ba1
 8006b74:	08006b7d 	.word	0x08006b7d
 8006b78:	08006ba1 	.word	0x08006ba1
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	695b      	ldr	r3, [r3, #20]
 8006b80:	3303      	adds	r3, #3
 8006b82:	089b      	lsrs	r3, r3, #2
 8006b84:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006b86:	8afa      	ldrh	r2, [r7, #22]
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b8c:	b29b      	uxth	r3, r3
 8006b8e:	429a      	cmp	r2, r3
 8006b90:	d91c      	bls.n	8006bcc <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	699b      	ldr	r3, [r3, #24]
 8006b96:	f043 0220 	orr.w	r2, r3, #32
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	619a      	str	r2, [r3, #24]
        }
        break;
 8006b9e:	e015      	b.n	8006bcc <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	695b      	ldr	r3, [r3, #20]
 8006ba4:	3303      	adds	r3, #3
 8006ba6:	089b      	lsrs	r3, r3, #2
 8006ba8:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006baa:	8afa      	ldrh	r2, [r7, #22]
 8006bac:	6a3b      	ldr	r3, [r7, #32]
 8006bae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006bb2:	691b      	ldr	r3, [r3, #16]
 8006bb4:	b29b      	uxth	r3, r3
 8006bb6:	429a      	cmp	r2, r3
 8006bb8:	d90a      	bls.n	8006bd0 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	699b      	ldr	r3, [r3, #24]
 8006bbe:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	619a      	str	r2, [r3, #24]
        }
        break;
 8006bc6:	e003      	b.n	8006bd0 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006bc8:	bf00      	nop
 8006bca:	e002      	b.n	8006bd2 <USB_HC_StartXfer+0x25e>
        break;
 8006bcc:	bf00      	nop
 8006bce:	e000      	b.n	8006bd2 <USB_HC_StartXfer+0x25e>
        break;
 8006bd0:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	68d9      	ldr	r1, [r3, #12]
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	785a      	ldrb	r2, [r3, #1]
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	695b      	ldr	r3, [r3, #20]
 8006bde:	b29b      	uxth	r3, r3
 8006be0:	2000      	movs	r0, #0
 8006be2:	9000      	str	r0, [sp, #0]
 8006be4:	68f8      	ldr	r0, [r7, #12]
 8006be6:	f7ff fb53 	bl	8006290 <USB_WritePacket>
  }

  return HAL_OK;
 8006bea:	2300      	movs	r3, #0
}
 8006bec:	4618      	mov	r0, r3
 8006bee:	3728      	adds	r7, #40	; 0x28
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	bd80      	pop	{r7, pc}
 8006bf4:	1ff80000 	.word	0x1ff80000

08006bf8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	b085      	sub	sp, #20
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c0a:	695b      	ldr	r3, [r3, #20]
 8006c0c:	b29b      	uxth	r3, r3
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	3714      	adds	r7, #20
 8006c12:	46bd      	mov	sp, r7
 8006c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c18:	4770      	bx	lr

08006c1a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006c1a:	b480      	push	{r7}
 8006c1c:	b089      	sub	sp, #36	; 0x24
 8006c1e:	af00      	add	r7, sp, #0
 8006c20:	6078      	str	r0, [r7, #4]
 8006c22:	460b      	mov	r3, r1
 8006c24:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8006c2a:	78fb      	ldrb	r3, [r7, #3]
 8006c2c:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8006c2e:	2300      	movs	r3, #0
 8006c30:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	015a      	lsls	r2, r3, #5
 8006c36:	69bb      	ldr	r3, [r7, #24]
 8006c38:	4413      	add	r3, r2
 8006c3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	0c9b      	lsrs	r3, r3, #18
 8006c42:	f003 0303 	and.w	r3, r3, #3
 8006c46:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006c48:	697b      	ldr	r3, [r7, #20]
 8006c4a:	015a      	lsls	r2, r3, #5
 8006c4c:	69bb      	ldr	r3, [r7, #24]
 8006c4e:	4413      	add	r3, r2
 8006c50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	0fdb      	lsrs	r3, r3, #31
 8006c58:	f003 0301 	and.w	r3, r3, #1
 8006c5c:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	689b      	ldr	r3, [r3, #8]
 8006c62:	f003 0320 	and.w	r3, r3, #32
 8006c66:	2b20      	cmp	r3, #32
 8006c68:	d104      	bne.n	8006c74 <USB_HC_Halt+0x5a>
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d101      	bne.n	8006c74 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8006c70:	2300      	movs	r3, #0
 8006c72:	e0e8      	b.n	8006e46 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d002      	beq.n	8006c80 <USB_HC_Halt+0x66>
 8006c7a:	693b      	ldr	r3, [r7, #16]
 8006c7c:	2b02      	cmp	r3, #2
 8006c7e:	d173      	bne.n	8006d68 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	015a      	lsls	r2, r3, #5
 8006c84:	69bb      	ldr	r3, [r7, #24]
 8006c86:	4413      	add	r3, r2
 8006c88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	697a      	ldr	r2, [r7, #20]
 8006c90:	0151      	lsls	r1, r2, #5
 8006c92:	69ba      	ldr	r2, [r7, #24]
 8006c94:	440a      	add	r2, r1
 8006c96:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c9a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006c9e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	689b      	ldr	r3, [r3, #8]
 8006ca4:	f003 0320 	and.w	r3, r3, #32
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	f040 80cb 	bne.w	8006e44 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cb2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d143      	bne.n	8006d42 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	015a      	lsls	r2, r3, #5
 8006cbe:	69bb      	ldr	r3, [r7, #24]
 8006cc0:	4413      	add	r3, r2
 8006cc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	697a      	ldr	r2, [r7, #20]
 8006cca:	0151      	lsls	r1, r2, #5
 8006ccc:	69ba      	ldr	r2, [r7, #24]
 8006cce:	440a      	add	r2, r1
 8006cd0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006cd4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006cd8:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	015a      	lsls	r2, r3, #5
 8006cde:	69bb      	ldr	r3, [r7, #24]
 8006ce0:	4413      	add	r3, r2
 8006ce2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	697a      	ldr	r2, [r7, #20]
 8006cea:	0151      	lsls	r1, r2, #5
 8006cec:	69ba      	ldr	r2, [r7, #24]
 8006cee:	440a      	add	r2, r1
 8006cf0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006cf4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006cf8:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	015a      	lsls	r2, r3, #5
 8006cfe:	69bb      	ldr	r3, [r7, #24]
 8006d00:	4413      	add	r3, r2
 8006d02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	697a      	ldr	r2, [r7, #20]
 8006d0a:	0151      	lsls	r1, r2, #5
 8006d0c:	69ba      	ldr	r2, [r7, #24]
 8006d0e:	440a      	add	r2, r1
 8006d10:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d14:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006d18:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8006d1a:	69fb      	ldr	r3, [r7, #28]
 8006d1c:	3301      	adds	r3, #1
 8006d1e:	61fb      	str	r3, [r7, #28]
 8006d20:	69fb      	ldr	r3, [r7, #28]
 8006d22:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006d26:	d81d      	bhi.n	8006d64 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006d28:	697b      	ldr	r3, [r7, #20]
 8006d2a:	015a      	lsls	r2, r3, #5
 8006d2c:	69bb      	ldr	r3, [r7, #24]
 8006d2e:	4413      	add	r3, r2
 8006d30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d3e:	d0ec      	beq.n	8006d1a <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006d40:	e080      	b.n	8006e44 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006d42:	697b      	ldr	r3, [r7, #20]
 8006d44:	015a      	lsls	r2, r3, #5
 8006d46:	69bb      	ldr	r3, [r7, #24]
 8006d48:	4413      	add	r3, r2
 8006d4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	697a      	ldr	r2, [r7, #20]
 8006d52:	0151      	lsls	r1, r2, #5
 8006d54:	69ba      	ldr	r2, [r7, #24]
 8006d56:	440a      	add	r2, r1
 8006d58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006d60:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006d62:	e06f      	b.n	8006e44 <USB_HC_Halt+0x22a>
            break;
 8006d64:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006d66:	e06d      	b.n	8006e44 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006d68:	697b      	ldr	r3, [r7, #20]
 8006d6a:	015a      	lsls	r2, r3, #5
 8006d6c:	69bb      	ldr	r3, [r7, #24]
 8006d6e:	4413      	add	r3, r2
 8006d70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	697a      	ldr	r2, [r7, #20]
 8006d78:	0151      	lsls	r1, r2, #5
 8006d7a:	69ba      	ldr	r2, [r7, #24]
 8006d7c:	440a      	add	r2, r1
 8006d7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d82:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006d86:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006d88:	69bb      	ldr	r3, [r7, #24]
 8006d8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d8e:	691b      	ldr	r3, [r3, #16]
 8006d90:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d143      	bne.n	8006e20 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006d98:	697b      	ldr	r3, [r7, #20]
 8006d9a:	015a      	lsls	r2, r3, #5
 8006d9c:	69bb      	ldr	r3, [r7, #24]
 8006d9e:	4413      	add	r3, r2
 8006da0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	697a      	ldr	r2, [r7, #20]
 8006da8:	0151      	lsls	r1, r2, #5
 8006daa:	69ba      	ldr	r2, [r7, #24]
 8006dac:	440a      	add	r2, r1
 8006dae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006db2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006db6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	015a      	lsls	r2, r3, #5
 8006dbc:	69bb      	ldr	r3, [r7, #24]
 8006dbe:	4413      	add	r3, r2
 8006dc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	697a      	ldr	r2, [r7, #20]
 8006dc8:	0151      	lsls	r1, r2, #5
 8006dca:	69ba      	ldr	r2, [r7, #24]
 8006dcc:	440a      	add	r2, r1
 8006dce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006dd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006dd6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006dd8:	697b      	ldr	r3, [r7, #20]
 8006dda:	015a      	lsls	r2, r3, #5
 8006ddc:	69bb      	ldr	r3, [r7, #24]
 8006dde:	4413      	add	r3, r2
 8006de0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	697a      	ldr	r2, [r7, #20]
 8006de8:	0151      	lsls	r1, r2, #5
 8006dea:	69ba      	ldr	r2, [r7, #24]
 8006dec:	440a      	add	r2, r1
 8006dee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006df2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006df6:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8006df8:	69fb      	ldr	r3, [r7, #28]
 8006dfa:	3301      	adds	r3, #1
 8006dfc:	61fb      	str	r3, [r7, #28]
 8006dfe:	69fb      	ldr	r3, [r7, #28]
 8006e00:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006e04:	d81d      	bhi.n	8006e42 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006e06:	697b      	ldr	r3, [r7, #20]
 8006e08:	015a      	lsls	r2, r3, #5
 8006e0a:	69bb      	ldr	r3, [r7, #24]
 8006e0c:	4413      	add	r3, r2
 8006e0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e18:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e1c:	d0ec      	beq.n	8006df8 <USB_HC_Halt+0x1de>
 8006e1e:	e011      	b.n	8006e44 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006e20:	697b      	ldr	r3, [r7, #20]
 8006e22:	015a      	lsls	r2, r3, #5
 8006e24:	69bb      	ldr	r3, [r7, #24]
 8006e26:	4413      	add	r3, r2
 8006e28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	697a      	ldr	r2, [r7, #20]
 8006e30:	0151      	lsls	r1, r2, #5
 8006e32:	69ba      	ldr	r2, [r7, #24]
 8006e34:	440a      	add	r2, r1
 8006e36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e3a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006e3e:	6013      	str	r3, [r2, #0]
 8006e40:	e000      	b.n	8006e44 <USB_HC_Halt+0x22a>
          break;
 8006e42:	bf00      	nop
    }
  }

  return HAL_OK;
 8006e44:	2300      	movs	r3, #0
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	3724      	adds	r7, #36	; 0x24
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e50:	4770      	bx	lr
	...

08006e54 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b087      	sub	sp, #28
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
 8006e5c:	460b      	mov	r3, r1
 8006e5e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006e64:	78fb      	ldrb	r3, [r7, #3]
 8006e66:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006e68:	2301      	movs	r3, #1
 8006e6a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	04da      	lsls	r2, r3, #19
 8006e70:	4b15      	ldr	r3, [pc, #84]	; (8006ec8 <USB_DoPing+0x74>)
 8006e72:	4013      	ands	r3, r2
 8006e74:	693a      	ldr	r2, [r7, #16]
 8006e76:	0151      	lsls	r1, r2, #5
 8006e78:	697a      	ldr	r2, [r7, #20]
 8006e7a:	440a      	add	r2, r1
 8006e7c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e80:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006e84:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006e86:	693b      	ldr	r3, [r7, #16]
 8006e88:	015a      	lsls	r2, r3, #5
 8006e8a:	697b      	ldr	r3, [r7, #20]
 8006e8c:	4413      	add	r3, r2
 8006e8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006e9c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006ea4:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	015a      	lsls	r2, r3, #5
 8006eaa:	697b      	ldr	r3, [r7, #20]
 8006eac:	4413      	add	r3, r2
 8006eae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006eb2:	461a      	mov	r2, r3
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006eb8:	2300      	movs	r3, #0
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	371c      	adds	r7, #28
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec4:	4770      	bx	lr
 8006ec6:	bf00      	nop
 8006ec8:	1ff80000 	.word	0x1ff80000

08006ecc <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b086      	sub	sp, #24
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006ed8:	2300      	movs	r3, #0
 8006eda:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f7ff f935 	bl	800614c <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8006ee2:	2110      	movs	r1, #16
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	f7ff f98f 	bl	8006208 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f7ff f9b0 	bl	8006250 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	613b      	str	r3, [r7, #16]
 8006ef4:	e01f      	b.n	8006f36 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8006ef6:	693b      	ldr	r3, [r7, #16]
 8006ef8:	015a      	lsls	r2, r3, #5
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	4413      	add	r3, r2
 8006efe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006f0c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006f14:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006f1c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006f1e:	693b      	ldr	r3, [r7, #16]
 8006f20:	015a      	lsls	r2, r3, #5
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	4413      	add	r3, r2
 8006f26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f2a:	461a      	mov	r2, r3
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006f30:	693b      	ldr	r3, [r7, #16]
 8006f32:	3301      	adds	r3, #1
 8006f34:	613b      	str	r3, [r7, #16]
 8006f36:	693b      	ldr	r3, [r7, #16]
 8006f38:	2b0f      	cmp	r3, #15
 8006f3a:	d9dc      	bls.n	8006ef6 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	613b      	str	r3, [r7, #16]
 8006f40:	e034      	b.n	8006fac <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	015a      	lsls	r2, r3, #5
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	4413      	add	r3, r2
 8006f4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006f58:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006f60:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006f68:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	015a      	lsls	r2, r3, #5
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	4413      	add	r3, r2
 8006f72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f76:	461a      	mov	r2, r3
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	3301      	adds	r3, #1
 8006f80:	617b      	str	r3, [r7, #20]
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006f88:	d80c      	bhi.n	8006fa4 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006f8a:	693b      	ldr	r3, [r7, #16]
 8006f8c:	015a      	lsls	r2, r3, #5
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	4413      	add	r3, r2
 8006f92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006fa0:	d0ec      	beq.n	8006f7c <USB_StopHost+0xb0>
 8006fa2:	e000      	b.n	8006fa6 <USB_StopHost+0xda>
        break;
 8006fa4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	3301      	adds	r3, #1
 8006faa:	613b      	str	r3, [r7, #16]
 8006fac:	693b      	ldr	r3, [r7, #16]
 8006fae:	2b0f      	cmp	r3, #15
 8006fb0:	d9c7      	bls.n	8006f42 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006fb8:	461a      	mov	r2, r3
 8006fba:	f04f 33ff 	mov.w	r3, #4294967295
 8006fbe:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f04f 32ff 	mov.w	r2, #4294967295
 8006fc6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f7ff f8ae 	bl	800612a <USB_EnableGlobalInt>

  return HAL_OK;
 8006fce:	2300      	movs	r3, #0
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	3718      	adds	r7, #24
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd80      	pop	{r7, pc}

08006fd8 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006fd8:	b590      	push	{r4, r7, lr}
 8006fda:	b089      	sub	sp, #36	; 0x24
 8006fdc:	af04      	add	r7, sp, #16
 8006fde:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	2202      	movs	r2, #2
 8006fe4:	2102      	movs	r1, #2
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f000 fc66 	bl	80078b8 <USBH_FindInterface>
 8006fec:	4603      	mov	r3, r0
 8006fee:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006ff0:	7bfb      	ldrb	r3, [r7, #15]
 8006ff2:	2bff      	cmp	r3, #255	; 0xff
 8006ff4:	d002      	beq.n	8006ffc <USBH_CDC_InterfaceInit+0x24>
 8006ff6:	7bfb      	ldrb	r3, [r7, #15]
 8006ff8:	2b01      	cmp	r3, #1
 8006ffa:	d901      	bls.n	8007000 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006ffc:	2302      	movs	r3, #2
 8006ffe:	e13d      	b.n	800727c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8007000:	7bfb      	ldrb	r3, [r7, #15]
 8007002:	4619      	mov	r1, r3
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f000 fc3b 	bl	8007880 <USBH_SelectInterface>
 800700a:	4603      	mov	r3, r0
 800700c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800700e:	7bbb      	ldrb	r3, [r7, #14]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d001      	beq.n	8007018 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8007014:	2302      	movs	r3, #2
 8007016:	e131      	b.n	800727c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800701e:	2050      	movs	r0, #80	; 0x50
 8007020:	f002 fa00 	bl	8009424 <malloc>
 8007024:	4603      	mov	r3, r0
 8007026:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800702e:	69db      	ldr	r3, [r3, #28]
 8007030:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d101      	bne.n	800703c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8007038:	2302      	movs	r3, #2
 800703a:	e11f      	b.n	800727c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800703c:	2250      	movs	r2, #80	; 0x50
 800703e:	2100      	movs	r1, #0
 8007040:	68b8      	ldr	r0, [r7, #8]
 8007042:	f002 f9ff 	bl	8009444 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8007046:	7bfb      	ldrb	r3, [r7, #15]
 8007048:	687a      	ldr	r2, [r7, #4]
 800704a:	211a      	movs	r1, #26
 800704c:	fb01 f303 	mul.w	r3, r1, r3
 8007050:	4413      	add	r3, r2
 8007052:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007056:	781b      	ldrb	r3, [r3, #0]
 8007058:	b25b      	sxtb	r3, r3
 800705a:	2b00      	cmp	r3, #0
 800705c:	da15      	bge.n	800708a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800705e:	7bfb      	ldrb	r3, [r7, #15]
 8007060:	687a      	ldr	r2, [r7, #4]
 8007062:	211a      	movs	r1, #26
 8007064:	fb01 f303 	mul.w	r3, r1, r3
 8007068:	4413      	add	r3, r2
 800706a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800706e:	781a      	ldrb	r2, [r3, #0]
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007074:	7bfb      	ldrb	r3, [r7, #15]
 8007076:	687a      	ldr	r2, [r7, #4]
 8007078:	211a      	movs	r1, #26
 800707a:	fb01 f303 	mul.w	r3, r1, r3
 800707e:	4413      	add	r3, r2
 8007080:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007084:	881a      	ldrh	r2, [r3, #0]
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	785b      	ldrb	r3, [r3, #1]
 800708e:	4619      	mov	r1, r3
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	f001 fe32 	bl	8008cfa <USBH_AllocPipe>
 8007096:	4603      	mov	r3, r0
 8007098:	461a      	mov	r2, r3
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	7819      	ldrb	r1, [r3, #0]
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	7858      	ldrb	r0, [r3, #1]
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80070b2:	68ba      	ldr	r2, [r7, #8]
 80070b4:	8952      	ldrh	r2, [r2, #10]
 80070b6:	9202      	str	r2, [sp, #8]
 80070b8:	2203      	movs	r2, #3
 80070ba:	9201      	str	r2, [sp, #4]
 80070bc:	9300      	str	r3, [sp, #0]
 80070be:	4623      	mov	r3, r4
 80070c0:	4602      	mov	r2, r0
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f001 fdea 	bl	8008c9c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	781b      	ldrb	r3, [r3, #0]
 80070cc:	2200      	movs	r2, #0
 80070ce:	4619      	mov	r1, r3
 80070d0:	6878      	ldr	r0, [r7, #4]
 80070d2:	f002 f8f9 	bl	80092c8 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80070d6:	2300      	movs	r3, #0
 80070d8:	2200      	movs	r2, #0
 80070da:	210a      	movs	r1, #10
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f000 fbeb 	bl	80078b8 <USBH_FindInterface>
 80070e2:	4603      	mov	r3, r0
 80070e4:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80070e6:	7bfb      	ldrb	r3, [r7, #15]
 80070e8:	2bff      	cmp	r3, #255	; 0xff
 80070ea:	d002      	beq.n	80070f2 <USBH_CDC_InterfaceInit+0x11a>
 80070ec:	7bfb      	ldrb	r3, [r7, #15]
 80070ee:	2b01      	cmp	r3, #1
 80070f0:	d901      	bls.n	80070f6 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80070f2:	2302      	movs	r3, #2
 80070f4:	e0c2      	b.n	800727c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80070f6:	7bfb      	ldrb	r3, [r7, #15]
 80070f8:	687a      	ldr	r2, [r7, #4]
 80070fa:	211a      	movs	r1, #26
 80070fc:	fb01 f303 	mul.w	r3, r1, r3
 8007100:	4413      	add	r3, r2
 8007102:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007106:	781b      	ldrb	r3, [r3, #0]
 8007108:	b25b      	sxtb	r3, r3
 800710a:	2b00      	cmp	r3, #0
 800710c:	da16      	bge.n	800713c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800710e:	7bfb      	ldrb	r3, [r7, #15]
 8007110:	687a      	ldr	r2, [r7, #4]
 8007112:	211a      	movs	r1, #26
 8007114:	fb01 f303 	mul.w	r3, r1, r3
 8007118:	4413      	add	r3, r2
 800711a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800711e:	781a      	ldrb	r2, [r3, #0]
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007124:	7bfb      	ldrb	r3, [r7, #15]
 8007126:	687a      	ldr	r2, [r7, #4]
 8007128:	211a      	movs	r1, #26
 800712a:	fb01 f303 	mul.w	r3, r1, r3
 800712e:	4413      	add	r3, r2
 8007130:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007134:	881a      	ldrh	r2, [r3, #0]
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	835a      	strh	r2, [r3, #26]
 800713a:	e015      	b.n	8007168 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800713c:	7bfb      	ldrb	r3, [r7, #15]
 800713e:	687a      	ldr	r2, [r7, #4]
 8007140:	211a      	movs	r1, #26
 8007142:	fb01 f303 	mul.w	r3, r1, r3
 8007146:	4413      	add	r3, r2
 8007148:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800714c:	781a      	ldrb	r2, [r3, #0]
 800714e:	68bb      	ldr	r3, [r7, #8]
 8007150:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007152:	7bfb      	ldrb	r3, [r7, #15]
 8007154:	687a      	ldr	r2, [r7, #4]
 8007156:	211a      	movs	r1, #26
 8007158:	fb01 f303 	mul.w	r3, r1, r3
 800715c:	4413      	add	r3, r2
 800715e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007162:	881a      	ldrh	r2, [r3, #0]
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8007168:	7bfb      	ldrb	r3, [r7, #15]
 800716a:	687a      	ldr	r2, [r7, #4]
 800716c:	211a      	movs	r1, #26
 800716e:	fb01 f303 	mul.w	r3, r1, r3
 8007172:	4413      	add	r3, r2
 8007174:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007178:	781b      	ldrb	r3, [r3, #0]
 800717a:	b25b      	sxtb	r3, r3
 800717c:	2b00      	cmp	r3, #0
 800717e:	da16      	bge.n	80071ae <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007180:	7bfb      	ldrb	r3, [r7, #15]
 8007182:	687a      	ldr	r2, [r7, #4]
 8007184:	211a      	movs	r1, #26
 8007186:	fb01 f303 	mul.w	r3, r1, r3
 800718a:	4413      	add	r3, r2
 800718c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007190:	781a      	ldrb	r2, [r3, #0]
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007196:	7bfb      	ldrb	r3, [r7, #15]
 8007198:	687a      	ldr	r2, [r7, #4]
 800719a:	211a      	movs	r1, #26
 800719c:	fb01 f303 	mul.w	r3, r1, r3
 80071a0:	4413      	add	r3, r2
 80071a2:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80071a6:	881a      	ldrh	r2, [r3, #0]
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	835a      	strh	r2, [r3, #26]
 80071ac:	e015      	b.n	80071da <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80071ae:	7bfb      	ldrb	r3, [r7, #15]
 80071b0:	687a      	ldr	r2, [r7, #4]
 80071b2:	211a      	movs	r1, #26
 80071b4:	fb01 f303 	mul.w	r3, r1, r3
 80071b8:	4413      	add	r3, r2
 80071ba:	f203 3356 	addw	r3, r3, #854	; 0x356
 80071be:	781a      	ldrb	r2, [r3, #0]
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80071c4:	7bfb      	ldrb	r3, [r7, #15]
 80071c6:	687a      	ldr	r2, [r7, #4]
 80071c8:	211a      	movs	r1, #26
 80071ca:	fb01 f303 	mul.w	r3, r1, r3
 80071ce:	4413      	add	r3, r2
 80071d0:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80071d4:	881a      	ldrh	r2, [r3, #0]
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	7b9b      	ldrb	r3, [r3, #14]
 80071de:	4619      	mov	r1, r3
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f001 fd8a 	bl	8008cfa <USBH_AllocPipe>
 80071e6:	4603      	mov	r3, r0
 80071e8:	461a      	mov	r2, r3
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	7bdb      	ldrb	r3, [r3, #15]
 80071f2:	4619      	mov	r1, r3
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f001 fd80 	bl	8008cfa <USBH_AllocPipe>
 80071fa:	4603      	mov	r3, r0
 80071fc:	461a      	mov	r2, r3
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8007202:	68bb      	ldr	r3, [r7, #8]
 8007204:	7b59      	ldrb	r1, [r3, #13]
 8007206:	68bb      	ldr	r3, [r7, #8]
 8007208:	7b98      	ldrb	r0, [r3, #14]
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007216:	68ba      	ldr	r2, [r7, #8]
 8007218:	8b12      	ldrh	r2, [r2, #24]
 800721a:	9202      	str	r2, [sp, #8]
 800721c:	2202      	movs	r2, #2
 800721e:	9201      	str	r2, [sp, #4]
 8007220:	9300      	str	r3, [sp, #0]
 8007222:	4623      	mov	r3, r4
 8007224:	4602      	mov	r2, r0
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f001 fd38 	bl	8008c9c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	7b19      	ldrb	r1, [r3, #12]
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	7bd8      	ldrb	r0, [r3, #15]
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007240:	68ba      	ldr	r2, [r7, #8]
 8007242:	8b52      	ldrh	r2, [r2, #26]
 8007244:	9202      	str	r2, [sp, #8]
 8007246:	2202      	movs	r2, #2
 8007248:	9201      	str	r2, [sp, #4]
 800724a:	9300      	str	r3, [sp, #0]
 800724c:	4623      	mov	r3, r4
 800724e:	4602      	mov	r2, r0
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	f001 fd23 	bl	8008c9c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	2200      	movs	r2, #0
 800725a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	7b5b      	ldrb	r3, [r3, #13]
 8007262:	2200      	movs	r2, #0
 8007264:	4619      	mov	r1, r3
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f002 f82e 	bl	80092c8 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	7b1b      	ldrb	r3, [r3, #12]
 8007270:	2200      	movs	r2, #0
 8007272:	4619      	mov	r1, r3
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f002 f827 	bl	80092c8 <USBH_LL_SetToggle>

  return USBH_OK;
 800727a:	2300      	movs	r3, #0
}
 800727c:	4618      	mov	r0, r3
 800727e:	3714      	adds	r7, #20
 8007280:	46bd      	mov	sp, r7
 8007282:	bd90      	pop	{r4, r7, pc}

08007284 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b084      	sub	sp, #16
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007292:	69db      	ldr	r3, [r3, #28]
 8007294:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	781b      	ldrb	r3, [r3, #0]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d00e      	beq.n	80072bc <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	781b      	ldrb	r3, [r3, #0]
 80072a2:	4619      	mov	r1, r3
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	f001 fd18 	bl	8008cda <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	781b      	ldrb	r3, [r3, #0]
 80072ae:	4619      	mov	r1, r3
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f001 fd43 	bl	8008d3c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	2200      	movs	r2, #0
 80072ba:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	7b1b      	ldrb	r3, [r3, #12]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d00e      	beq.n	80072e2 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	7b1b      	ldrb	r3, [r3, #12]
 80072c8:	4619      	mov	r1, r3
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f001 fd05 	bl	8008cda <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	7b1b      	ldrb	r3, [r3, #12]
 80072d4:	4619      	mov	r1, r3
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f001 fd30 	bl	8008d3c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	2200      	movs	r2, #0
 80072e0:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	7b5b      	ldrb	r3, [r3, #13]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d00e      	beq.n	8007308 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	7b5b      	ldrb	r3, [r3, #13]
 80072ee:	4619      	mov	r1, r3
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f001 fcf2 	bl	8008cda <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	7b5b      	ldrb	r3, [r3, #13]
 80072fa:	4619      	mov	r1, r3
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	f001 fd1d 	bl	8008d3c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	2200      	movs	r2, #0
 8007306:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800730e:	69db      	ldr	r3, [r3, #28]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d00b      	beq.n	800732c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800731a:	69db      	ldr	r3, [r3, #28]
 800731c:	4618      	mov	r0, r3
 800731e:	f002 f889 	bl	8009434 <free>
    phost->pActiveClass->pData = 0U;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007328:	2200      	movs	r2, #0
 800732a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800732c:	2300      	movs	r3, #0
}
 800732e:	4618      	mov	r0, r3
 8007330:	3710      	adds	r7, #16
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}

08007336 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8007336:	b580      	push	{r7, lr}
 8007338:	b084      	sub	sp, #16
 800733a:	af00      	add	r7, sp, #0
 800733c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007344:	69db      	ldr	r3, [r3, #28]
 8007346:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	3340      	adds	r3, #64	; 0x40
 800734c:	4619      	mov	r1, r3
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f000 f8b1 	bl	80074b6 <GetLineCoding>
 8007354:	4603      	mov	r3, r0
 8007356:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8007358:	7afb      	ldrb	r3, [r7, #11]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d105      	bne.n	800736a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007364:	2102      	movs	r1, #2
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800736a:	7afb      	ldrb	r3, [r7, #11]
}
 800736c:	4618      	mov	r0, r3
 800736e:	3710      	adds	r7, #16
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}

08007374 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b084      	sub	sp, #16
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800737c:	2301      	movs	r3, #1
 800737e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007380:	2300      	movs	r3, #0
 8007382:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800738a:	69db      	ldr	r3, [r3, #28]
 800738c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007394:	2b04      	cmp	r3, #4
 8007396:	d877      	bhi.n	8007488 <USBH_CDC_Process+0x114>
 8007398:	a201      	add	r2, pc, #4	; (adr r2, 80073a0 <USBH_CDC_Process+0x2c>)
 800739a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800739e:	bf00      	nop
 80073a0:	080073b5 	.word	0x080073b5
 80073a4:	080073bb 	.word	0x080073bb
 80073a8:	080073eb 	.word	0x080073eb
 80073ac:	0800745f 	.word	0x0800745f
 80073b0:	0800746d 	.word	0x0800746d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80073b4:	2300      	movs	r3, #0
 80073b6:	73fb      	strb	r3, [r7, #15]
      break;
 80073b8:	e06d      	b.n	8007496 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073be:	4619      	mov	r1, r3
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	f000 f897 	bl	80074f4 <SetLineCoding>
 80073c6:	4603      	mov	r3, r0
 80073c8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80073ca:	7bbb      	ldrb	r3, [r7, #14]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d104      	bne.n	80073da <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	2202      	movs	r2, #2
 80073d4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80073d8:	e058      	b.n	800748c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80073da:	7bbb      	ldrb	r3, [r7, #14]
 80073dc:	2b01      	cmp	r3, #1
 80073de:	d055      	beq.n	800748c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	2204      	movs	r2, #4
 80073e4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80073e8:	e050      	b.n	800748c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	3340      	adds	r3, #64	; 0x40
 80073ee:	4619      	mov	r1, r3
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f000 f860 	bl	80074b6 <GetLineCoding>
 80073f6:	4603      	mov	r3, r0
 80073f8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80073fa:	7bbb      	ldrb	r3, [r7, #14]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d126      	bne.n	800744e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	2200      	movs	r2, #0
 8007404:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007412:	791b      	ldrb	r3, [r3, #4]
 8007414:	429a      	cmp	r2, r3
 8007416:	d13b      	bne.n	8007490 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800741e:	68bb      	ldr	r3, [r7, #8]
 8007420:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007422:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007424:	429a      	cmp	r2, r3
 8007426:	d133      	bne.n	8007490 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007432:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007434:	429a      	cmp	r2, r3
 8007436:	d12b      	bne.n	8007490 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007440:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007442:	429a      	cmp	r2, r3
 8007444:	d124      	bne.n	8007490 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f000 f958 	bl	80076fc <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800744c:	e020      	b.n	8007490 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800744e:	7bbb      	ldrb	r3, [r7, #14]
 8007450:	2b01      	cmp	r3, #1
 8007452:	d01d      	beq.n	8007490 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	2204      	movs	r2, #4
 8007458:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800745c:	e018      	b.n	8007490 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f000 f867 	bl	8007532 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f000 f8da 	bl	800761e <CDC_ProcessReception>
      break;
 800746a:	e014      	b.n	8007496 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800746c:	2100      	movs	r1, #0
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f000 ffe3 	bl	800843a <USBH_ClrFeature>
 8007474:	4603      	mov	r3, r0
 8007476:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007478:	7bbb      	ldrb	r3, [r7, #14]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d10a      	bne.n	8007494 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	2200      	movs	r2, #0
 8007482:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8007486:	e005      	b.n	8007494 <USBH_CDC_Process+0x120>

    default:
      break;
 8007488:	bf00      	nop
 800748a:	e004      	b.n	8007496 <USBH_CDC_Process+0x122>
      break;
 800748c:	bf00      	nop
 800748e:	e002      	b.n	8007496 <USBH_CDC_Process+0x122>
      break;
 8007490:	bf00      	nop
 8007492:	e000      	b.n	8007496 <USBH_CDC_Process+0x122>
      break;
 8007494:	bf00      	nop

  }

  return status;
 8007496:	7bfb      	ldrb	r3, [r7, #15]
}
 8007498:	4618      	mov	r0, r3
 800749a:	3710      	adds	r7, #16
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}

080074a0 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80074a0:	b480      	push	{r7}
 80074a2:	b083      	sub	sp, #12
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80074a8:	2300      	movs	r3, #0
}
 80074aa:	4618      	mov	r0, r3
 80074ac:	370c      	adds	r7, #12
 80074ae:	46bd      	mov	sp, r7
 80074b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b4:	4770      	bx	lr

080074b6 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80074b6:	b580      	push	{r7, lr}
 80074b8:	b082      	sub	sp, #8
 80074ba:	af00      	add	r7, sp, #0
 80074bc:	6078      	str	r0, [r7, #4]
 80074be:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	22a1      	movs	r2, #161	; 0xa1
 80074c4:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2221      	movs	r2, #33	; 0x21
 80074ca:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2200      	movs	r2, #0
 80074d0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2200      	movs	r2, #0
 80074d6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2207      	movs	r2, #7
 80074dc:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	2207      	movs	r2, #7
 80074e2:	4619      	mov	r1, r3
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f001 f988 	bl	80087fa <USBH_CtlReq>
 80074ea:	4603      	mov	r3, r0
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	3708      	adds	r7, #8
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bd80      	pop	{r7, pc}

080074f4 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b082      	sub	sp, #8
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
 80074fc:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2221      	movs	r2, #33	; 0x21
 8007502:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2220      	movs	r2, #32
 8007508:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2200      	movs	r2, #0
 800750e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2200      	movs	r2, #0
 8007514:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2207      	movs	r2, #7
 800751a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	2207      	movs	r2, #7
 8007520:	4619      	mov	r1, r3
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f001 f969 	bl	80087fa <USBH_CtlReq>
 8007528:	4603      	mov	r3, r0
}
 800752a:	4618      	mov	r0, r3
 800752c:	3708      	adds	r7, #8
 800752e:	46bd      	mov	sp, r7
 8007530:	bd80      	pop	{r7, pc}

08007532 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8007532:	b580      	push	{r7, lr}
 8007534:	b086      	sub	sp, #24
 8007536:	af02      	add	r7, sp, #8
 8007538:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007540:	69db      	ldr	r3, [r3, #28]
 8007542:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007544:	2300      	movs	r3, #0
 8007546:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800754e:	2b01      	cmp	r3, #1
 8007550:	d002      	beq.n	8007558 <CDC_ProcessTransmission+0x26>
 8007552:	2b02      	cmp	r3, #2
 8007554:	d023      	beq.n	800759e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8007556:	e05e      	b.n	8007616 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800755c:	68fa      	ldr	r2, [r7, #12]
 800755e:	8b12      	ldrh	r2, [r2, #24]
 8007560:	4293      	cmp	r3, r2
 8007562:	d90b      	bls.n	800757c <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	69d9      	ldr	r1, [r3, #28]
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	8b1a      	ldrh	r2, [r3, #24]
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	7b5b      	ldrb	r3, [r3, #13]
 8007570:	2001      	movs	r0, #1
 8007572:	9000      	str	r0, [sp, #0]
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f001 fb4e 	bl	8008c16 <USBH_BulkSendData>
 800757a:	e00b      	b.n	8007594 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8007584:	b29a      	uxth	r2, r3
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	7b5b      	ldrb	r3, [r3, #13]
 800758a:	2001      	movs	r0, #1
 800758c:	9000      	str	r0, [sp, #0]
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	f001 fb41 	bl	8008c16 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	2202      	movs	r2, #2
 8007598:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800759c:	e03b      	b.n	8007616 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	7b5b      	ldrb	r3, [r3, #13]
 80075a2:	4619      	mov	r1, r3
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	f001 fe65 	bl	8009274 <USBH_LL_GetURBState>
 80075aa:	4603      	mov	r3, r0
 80075ac:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80075ae:	7afb      	ldrb	r3, [r7, #11]
 80075b0:	2b01      	cmp	r3, #1
 80075b2:	d128      	bne.n	8007606 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b8:	68fa      	ldr	r2, [r7, #12]
 80075ba:	8b12      	ldrh	r2, [r2, #24]
 80075bc:	4293      	cmp	r3, r2
 80075be:	d90e      	bls.n	80075de <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075c4:	68fa      	ldr	r2, [r7, #12]
 80075c6:	8b12      	ldrh	r2, [r2, #24]
 80075c8:	1a9a      	subs	r2, r3, r2
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	69db      	ldr	r3, [r3, #28]
 80075d2:	68fa      	ldr	r2, [r7, #12]
 80075d4:	8b12      	ldrh	r2, [r2, #24]
 80075d6:	441a      	add	r2, r3
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	61da      	str	r2, [r3, #28]
 80075dc:	e002      	b.n	80075e4 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	2200      	movs	r2, #0
 80075e2:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d004      	beq.n	80075f6 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	2201      	movs	r2, #1
 80075f0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80075f4:	e00e      	b.n	8007614 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	2200      	movs	r2, #0
 80075fa:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f000 f868 	bl	80076d4 <USBH_CDC_TransmitCallback>
      break;
 8007604:	e006      	b.n	8007614 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8007606:	7afb      	ldrb	r3, [r7, #11]
 8007608:	2b02      	cmp	r3, #2
 800760a:	d103      	bne.n	8007614 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	2201      	movs	r2, #1
 8007610:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007614:	bf00      	nop
  }
}
 8007616:	bf00      	nop
 8007618:	3710      	adds	r7, #16
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}

0800761e <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800761e:	b580      	push	{r7, lr}
 8007620:	b086      	sub	sp, #24
 8007622:	af00      	add	r7, sp, #0
 8007624:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800762c:	69db      	ldr	r3, [r3, #28]
 800762e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007630:	2300      	movs	r3, #0
 8007632:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007634:	697b      	ldr	r3, [r7, #20]
 8007636:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800763a:	2b03      	cmp	r3, #3
 800763c:	d002      	beq.n	8007644 <CDC_ProcessReception+0x26>
 800763e:	2b04      	cmp	r3, #4
 8007640:	d00e      	beq.n	8007660 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007642:	e043      	b.n	80076cc <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8007644:	697b      	ldr	r3, [r7, #20]
 8007646:	6a19      	ldr	r1, [r3, #32]
 8007648:	697b      	ldr	r3, [r7, #20]
 800764a:	8b5a      	ldrh	r2, [r3, #26]
 800764c:	697b      	ldr	r3, [r7, #20]
 800764e:	7b1b      	ldrb	r3, [r3, #12]
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	f001 fb05 	bl	8008c60 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8007656:	697b      	ldr	r3, [r7, #20]
 8007658:	2204      	movs	r2, #4
 800765a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800765e:	e035      	b.n	80076cc <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007660:	697b      	ldr	r3, [r7, #20]
 8007662:	7b1b      	ldrb	r3, [r3, #12]
 8007664:	4619      	mov	r1, r3
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f001 fe04 	bl	8009274 <USBH_LL_GetURBState>
 800766c:	4603      	mov	r3, r0
 800766e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007670:	7cfb      	ldrb	r3, [r7, #19]
 8007672:	2b01      	cmp	r3, #1
 8007674:	d129      	bne.n	80076ca <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	7b1b      	ldrb	r3, [r3, #12]
 800767a:	4619      	mov	r1, r3
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	f001 fd67 	bl	8009150 <USBH_LL_GetLastXferSize>
 8007682:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8007684:	697b      	ldr	r3, [r7, #20]
 8007686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007688:	68fa      	ldr	r2, [r7, #12]
 800768a:	429a      	cmp	r2, r3
 800768c:	d016      	beq.n	80076bc <CDC_ProcessReception+0x9e>
 800768e:	697b      	ldr	r3, [r7, #20]
 8007690:	8b5b      	ldrh	r3, [r3, #26]
 8007692:	461a      	mov	r2, r3
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	4293      	cmp	r3, r2
 8007698:	d910      	bls.n	80076bc <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800769a:	697b      	ldr	r3, [r7, #20]
 800769c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	1ad2      	subs	r2, r2, r3
 80076a2:	697b      	ldr	r3, [r7, #20]
 80076a4:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80076a6:	697b      	ldr	r3, [r7, #20]
 80076a8:	6a1a      	ldr	r2, [r3, #32]
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	441a      	add	r2, r3
 80076ae:	697b      	ldr	r3, [r7, #20]
 80076b0:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80076b2:	697b      	ldr	r3, [r7, #20]
 80076b4:	2203      	movs	r2, #3
 80076b6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80076ba:	e006      	b.n	80076ca <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80076bc:	697b      	ldr	r3, [r7, #20]
 80076be:	2200      	movs	r2, #0
 80076c0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	f000 f80f 	bl	80076e8 <USBH_CDC_ReceiveCallback>
      break;
 80076ca:	bf00      	nop
  }
}
 80076cc:	bf00      	nop
 80076ce:	3718      	adds	r7, #24
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd80      	pop	{r7, pc}

080076d4 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b083      	sub	sp, #12
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80076dc:	bf00      	nop
 80076de:	370c      	adds	r7, #12
 80076e0:	46bd      	mov	sp, r7
 80076e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e6:	4770      	bx	lr

080076e8 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80076e8:	b480      	push	{r7}
 80076ea:	b083      	sub	sp, #12
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80076f0:	bf00      	nop
 80076f2:	370c      	adds	r7, #12
 80076f4:	46bd      	mov	sp, r7
 80076f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fa:	4770      	bx	lr

080076fc <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80076fc:	b480      	push	{r7}
 80076fe:	b083      	sub	sp, #12
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007704:	bf00      	nop
 8007706:	370c      	adds	r7, #12
 8007708:	46bd      	mov	sp, r7
 800770a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770e:	4770      	bx	lr

08007710 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b084      	sub	sp, #16
 8007714:	af00      	add	r7, sp, #0
 8007716:	60f8      	str	r0, [r7, #12]
 8007718:	60b9      	str	r1, [r7, #8]
 800771a:	4613      	mov	r3, r2
 800771c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d101      	bne.n	8007728 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007724:	2302      	movs	r3, #2
 8007726:	e029      	b.n	800777c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	79fa      	ldrb	r2, [r7, #7]
 800772c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	2200      	movs	r2, #0
 8007734:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	2200      	movs	r2, #0
 800773c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8007740:	68f8      	ldr	r0, [r7, #12]
 8007742:	f000 f81f 	bl	8007784 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	2200      	movs	r2, #0
 800774a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	2200      	movs	r2, #0
 8007752:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	2200      	movs	r2, #0
 800775a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	2200      	movs	r2, #0
 8007762:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d003      	beq.n	8007774 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	68ba      	ldr	r2, [r7, #8]
 8007770:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8007774:	68f8      	ldr	r0, [r7, #12]
 8007776:	f001 fc37 	bl	8008fe8 <USBH_LL_Init>

  return USBH_OK;
 800777a:	2300      	movs	r3, #0
}
 800777c:	4618      	mov	r0, r3
 800777e:	3710      	adds	r7, #16
 8007780:	46bd      	mov	sp, r7
 8007782:	bd80      	pop	{r7, pc}

08007784 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007784:	b480      	push	{r7}
 8007786:	b085      	sub	sp, #20
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800778c:	2300      	movs	r3, #0
 800778e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007790:	2300      	movs	r3, #0
 8007792:	60fb      	str	r3, [r7, #12]
 8007794:	e009      	b.n	80077aa <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007796:	687a      	ldr	r2, [r7, #4]
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	33e0      	adds	r3, #224	; 0xe0
 800779c:	009b      	lsls	r3, r3, #2
 800779e:	4413      	add	r3, r2
 80077a0:	2200      	movs	r2, #0
 80077a2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	3301      	adds	r3, #1
 80077a8:	60fb      	str	r3, [r7, #12]
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	2b0e      	cmp	r3, #14
 80077ae:	d9f2      	bls.n	8007796 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80077b0:	2300      	movs	r3, #0
 80077b2:	60fb      	str	r3, [r7, #12]
 80077b4:	e009      	b.n	80077ca <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80077b6:	687a      	ldr	r2, [r7, #4]
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	4413      	add	r3, r2
 80077bc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80077c0:	2200      	movs	r2, #0
 80077c2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	3301      	adds	r3, #1
 80077c8:	60fb      	str	r3, [r7, #12]
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80077d0:	d3f1      	bcc.n	80077b6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2200      	movs	r2, #0
 80077d6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2200      	movs	r2, #0
 80077dc:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2201      	movs	r2, #1
 80077e2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2200      	movs	r2, #0
 80077e8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2201      	movs	r2, #1
 80077f0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2240      	movs	r2, #64	; 0x40
 80077f6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2200      	movs	r2, #0
 80077fc:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2200      	movs	r2, #0
 8007802:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2201      	movs	r2, #1
 800780a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2200      	movs	r2, #0
 8007812:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2200      	movs	r2, #0
 800781a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800781e:	2300      	movs	r3, #0
}
 8007820:	4618      	mov	r0, r3
 8007822:	3714      	adds	r7, #20
 8007824:	46bd      	mov	sp, r7
 8007826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782a:	4770      	bx	lr

0800782c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800782c:	b480      	push	{r7}
 800782e:	b085      	sub	sp, #20
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
 8007834:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007836:	2300      	movs	r3, #0
 8007838:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d016      	beq.n	800786e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007846:	2b00      	cmp	r3, #0
 8007848:	d10e      	bne.n	8007868 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007850:	1c59      	adds	r1, r3, #1
 8007852:	687a      	ldr	r2, [r7, #4]
 8007854:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007858:	687a      	ldr	r2, [r7, #4]
 800785a:	33de      	adds	r3, #222	; 0xde
 800785c:	6839      	ldr	r1, [r7, #0]
 800785e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007862:	2300      	movs	r3, #0
 8007864:	73fb      	strb	r3, [r7, #15]
 8007866:	e004      	b.n	8007872 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007868:	2302      	movs	r3, #2
 800786a:	73fb      	strb	r3, [r7, #15]
 800786c:	e001      	b.n	8007872 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800786e:	2302      	movs	r3, #2
 8007870:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007872:	7bfb      	ldrb	r3, [r7, #15]
}
 8007874:	4618      	mov	r0, r3
 8007876:	3714      	adds	r7, #20
 8007878:	46bd      	mov	sp, r7
 800787a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787e:	4770      	bx	lr

08007880 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007880:	b480      	push	{r7}
 8007882:	b085      	sub	sp, #20
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
 8007888:	460b      	mov	r3, r1
 800788a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800788c:	2300      	movs	r3, #0
 800788e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8007896:	78fa      	ldrb	r2, [r7, #3]
 8007898:	429a      	cmp	r2, r3
 800789a:	d204      	bcs.n	80078a6 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	78fa      	ldrb	r2, [r7, #3]
 80078a0:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80078a4:	e001      	b.n	80078aa <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80078a6:	2302      	movs	r3, #2
 80078a8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80078aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80078ac:	4618      	mov	r0, r3
 80078ae:	3714      	adds	r7, #20
 80078b0:	46bd      	mov	sp, r7
 80078b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b6:	4770      	bx	lr

080078b8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80078b8:	b480      	push	{r7}
 80078ba:	b087      	sub	sp, #28
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
 80078c0:	4608      	mov	r0, r1
 80078c2:	4611      	mov	r1, r2
 80078c4:	461a      	mov	r2, r3
 80078c6:	4603      	mov	r3, r0
 80078c8:	70fb      	strb	r3, [r7, #3]
 80078ca:	460b      	mov	r3, r1
 80078cc:	70bb      	strb	r3, [r7, #2]
 80078ce:	4613      	mov	r3, r2
 80078d0:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80078d2:	2300      	movs	r3, #0
 80078d4:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 80078d6:	2300      	movs	r3, #0
 80078d8:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80078e0:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80078e2:	e025      	b.n	8007930 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80078e4:	7dfb      	ldrb	r3, [r7, #23]
 80078e6:	221a      	movs	r2, #26
 80078e8:	fb02 f303 	mul.w	r3, r2, r3
 80078ec:	3308      	adds	r3, #8
 80078ee:	68fa      	ldr	r2, [r7, #12]
 80078f0:	4413      	add	r3, r2
 80078f2:	3302      	adds	r3, #2
 80078f4:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80078f6:	693b      	ldr	r3, [r7, #16]
 80078f8:	795b      	ldrb	r3, [r3, #5]
 80078fa:	78fa      	ldrb	r2, [r7, #3]
 80078fc:	429a      	cmp	r2, r3
 80078fe:	d002      	beq.n	8007906 <USBH_FindInterface+0x4e>
 8007900:	78fb      	ldrb	r3, [r7, #3]
 8007902:	2bff      	cmp	r3, #255	; 0xff
 8007904:	d111      	bne.n	800792a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007906:	693b      	ldr	r3, [r7, #16]
 8007908:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800790a:	78ba      	ldrb	r2, [r7, #2]
 800790c:	429a      	cmp	r2, r3
 800790e:	d002      	beq.n	8007916 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007910:	78bb      	ldrb	r3, [r7, #2]
 8007912:	2bff      	cmp	r3, #255	; 0xff
 8007914:	d109      	bne.n	800792a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007916:	693b      	ldr	r3, [r7, #16]
 8007918:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800791a:	787a      	ldrb	r2, [r7, #1]
 800791c:	429a      	cmp	r2, r3
 800791e:	d002      	beq.n	8007926 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007920:	787b      	ldrb	r3, [r7, #1]
 8007922:	2bff      	cmp	r3, #255	; 0xff
 8007924:	d101      	bne.n	800792a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007926:	7dfb      	ldrb	r3, [r7, #23]
 8007928:	e006      	b.n	8007938 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800792a:	7dfb      	ldrb	r3, [r7, #23]
 800792c:	3301      	adds	r3, #1
 800792e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007930:	7dfb      	ldrb	r3, [r7, #23]
 8007932:	2b01      	cmp	r3, #1
 8007934:	d9d6      	bls.n	80078e4 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007936:	23ff      	movs	r3, #255	; 0xff
}
 8007938:	4618      	mov	r0, r3
 800793a:	371c      	adds	r7, #28
 800793c:	46bd      	mov	sp, r7
 800793e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007942:	4770      	bx	lr

08007944 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b082      	sub	sp, #8
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	f001 fb87 	bl	8009060 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8007952:	2101      	movs	r1, #1
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f001 fca0 	bl	800929a <USBH_LL_DriverVBUS>

  return USBH_OK;
 800795a:	2300      	movs	r3, #0
}
 800795c:	4618      	mov	r0, r3
 800795e:	3708      	adds	r7, #8
 8007960:	46bd      	mov	sp, r7
 8007962:	bd80      	pop	{r7, pc}

08007964 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b088      	sub	sp, #32
 8007968:	af04      	add	r7, sp, #16
 800796a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800796c:	2302      	movs	r3, #2
 800796e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007970:	2300      	movs	r3, #0
 8007972:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800797a:	b2db      	uxtb	r3, r3
 800797c:	2b01      	cmp	r3, #1
 800797e:	d102      	bne.n	8007986 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2203      	movs	r2, #3
 8007984:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	781b      	ldrb	r3, [r3, #0]
 800798a:	b2db      	uxtb	r3, r3
 800798c:	2b0b      	cmp	r3, #11
 800798e:	f200 81b3 	bhi.w	8007cf8 <USBH_Process+0x394>
 8007992:	a201      	add	r2, pc, #4	; (adr r2, 8007998 <USBH_Process+0x34>)
 8007994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007998:	080079c9 	.word	0x080079c9
 800799c:	080079fb 	.word	0x080079fb
 80079a0:	08007a63 	.word	0x08007a63
 80079a4:	08007c93 	.word	0x08007c93
 80079a8:	08007cf9 	.word	0x08007cf9
 80079ac:	08007b07 	.word	0x08007b07
 80079b0:	08007c39 	.word	0x08007c39
 80079b4:	08007b3d 	.word	0x08007b3d
 80079b8:	08007b5d 	.word	0x08007b5d
 80079bc:	08007b7d 	.word	0x08007b7d
 80079c0:	08007bab 	.word	0x08007bab
 80079c4:	08007c7b 	.word	0x08007c7b
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80079ce:	b2db      	uxtb	r3, r3
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	f000 8193 	beq.w	8007cfc <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2201      	movs	r2, #1
 80079da:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80079dc:	20c8      	movs	r0, #200	; 0xc8
 80079de:	f001 fca3 	bl	8009328 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	f001 fb99 	bl	800911a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2200      	movs	r2, #0
 80079ec:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2200      	movs	r2, #0
 80079f4:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80079f8:	e180      	b.n	8007cfc <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007a00:	2b01      	cmp	r3, #1
 8007a02:	d107      	bne.n	8007a14 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2200      	movs	r2, #0
 8007a08:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2202      	movs	r2, #2
 8007a10:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007a12:	e182      	b.n	8007d1a <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007a1a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007a1e:	d914      	bls.n	8007a4a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007a26:	3301      	adds	r3, #1
 8007a28:	b2da      	uxtb	r2, r3
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007a36:	2b03      	cmp	r3, #3
 8007a38:	d903      	bls.n	8007a42 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	220d      	movs	r2, #13
 8007a3e:	701a      	strb	r2, [r3, #0]
      break;
 8007a40:	e16b      	b.n	8007d1a <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2200      	movs	r2, #0
 8007a46:	701a      	strb	r2, [r3, #0]
      break;
 8007a48:	e167      	b.n	8007d1a <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007a50:	f103 020a 	add.w	r2, r3, #10
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8007a5a:	200a      	movs	r0, #10
 8007a5c:	f001 fc64 	bl	8009328 <USBH_Delay>
      break;
 8007a60:	e15b      	b.n	8007d1a <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d005      	beq.n	8007a78 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007a72:	2104      	movs	r1, #4
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007a78:	2064      	movs	r0, #100	; 0x64
 8007a7a:	f001 fc55 	bl	8009328 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f001 fb24 	bl	80090cc <USBH_LL_GetSpeed>
 8007a84:	4603      	mov	r3, r0
 8007a86:	461a      	mov	r2, r3
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2205      	movs	r2, #5
 8007a92:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007a94:	2100      	movs	r1, #0
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	f001 f92f 	bl	8008cfa <USBH_AllocPipe>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	461a      	mov	r2, r3
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007aa4:	2180      	movs	r1, #128	; 0x80
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f001 f927 	bl	8008cfa <USBH_AllocPipe>
 8007aac:	4603      	mov	r3, r0
 8007aae:	461a      	mov	r2, r3
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	7919      	ldrb	r1, [r3, #4]
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007ac4:	687a      	ldr	r2, [r7, #4]
 8007ac6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007ac8:	b292      	uxth	r2, r2
 8007aca:	9202      	str	r2, [sp, #8]
 8007acc:	2200      	movs	r2, #0
 8007ace:	9201      	str	r2, [sp, #4]
 8007ad0:	9300      	str	r3, [sp, #0]
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	2280      	movs	r2, #128	; 0x80
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f001 f8e0 	bl	8008c9c <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	7959      	ldrb	r1, [r3, #5]
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007aec:	687a      	ldr	r2, [r7, #4]
 8007aee:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007af0:	b292      	uxth	r2, r2
 8007af2:	9202      	str	r2, [sp, #8]
 8007af4:	2200      	movs	r2, #0
 8007af6:	9201      	str	r2, [sp, #4]
 8007af8:	9300      	str	r3, [sp, #0]
 8007afa:	4603      	mov	r3, r0
 8007afc:	2200      	movs	r2, #0
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f001 f8cc 	bl	8008c9c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007b04:	e109      	b.n	8007d1a <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f000 f90c 	bl	8007d24 <USBH_HandleEnum>
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007b10:	7bbb      	ldrb	r3, [r7, #14]
 8007b12:	b2db      	uxtb	r3, r3
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	f040 80f3 	bne.w	8007d00 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8007b28:	2b01      	cmp	r3, #1
 8007b2a:	d103      	bne.n	8007b34 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2208      	movs	r2, #8
 8007b30:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007b32:	e0e5      	b.n	8007d00 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2207      	movs	r2, #7
 8007b38:	701a      	strb	r2, [r3, #0]
      break;
 8007b3a:	e0e1      	b.n	8007d00 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	f000 80de 	beq.w	8007d04 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007b4e:	2101      	movs	r1, #1
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2208      	movs	r2, #8
 8007b58:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007b5a:	e0d3      	b.n	8007d04 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8007b62:	b29b      	uxth	r3, r3
 8007b64:	4619      	mov	r1, r3
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f000 fc20 	bl	80083ac <USBH_SetCfg>
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	f040 80ca 	bne.w	8007d08 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2209      	movs	r2, #9
 8007b78:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007b7a:	e0c5      	b.n	8007d08 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8007b82:	f003 0320 	and.w	r3, r3, #32
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d00b      	beq.n	8007ba2 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8007b8a:	2101      	movs	r1, #1
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f000 fc30 	bl	80083f2 <USBH_SetFeature>
 8007b92:	4603      	mov	r3, r0
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	f040 80b9 	bne.w	8007d0c <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	220a      	movs	r2, #10
 8007b9e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007ba0:	e0b4      	b.n	8007d0c <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	220a      	movs	r2, #10
 8007ba6:	701a      	strb	r2, [r3, #0]
      break;
 8007ba8:	e0b0      	b.n	8007d0c <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	f000 80ad 	beq.w	8007d10 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2200      	movs	r2, #0
 8007bba:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	73fb      	strb	r3, [r7, #15]
 8007bc2:	e016      	b.n	8007bf2 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007bc4:	7bfa      	ldrb	r2, [r7, #15]
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	32de      	adds	r2, #222	; 0xde
 8007bca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bce:	791a      	ldrb	r2, [r3, #4]
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8007bd6:	429a      	cmp	r2, r3
 8007bd8:	d108      	bne.n	8007bec <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007bda:	7bfa      	ldrb	r2, [r7, #15]
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	32de      	adds	r2, #222	; 0xde
 8007be0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8007bea:	e005      	b.n	8007bf8 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007bec:	7bfb      	ldrb	r3, [r7, #15]
 8007bee:	3301      	adds	r3, #1
 8007bf0:	73fb      	strb	r3, [r7, #15]
 8007bf2:	7bfb      	ldrb	r3, [r7, #15]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d0e5      	beq.n	8007bc4 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d016      	beq.n	8007c30 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007c08:	689b      	ldr	r3, [r3, #8]
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	4798      	blx	r3
 8007c0e:	4603      	mov	r3, r0
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d109      	bne.n	8007c28 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2206      	movs	r2, #6
 8007c18:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007c20:	2103      	movs	r1, #3
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007c26:	e073      	b.n	8007d10 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	220d      	movs	r2, #13
 8007c2c:	701a      	strb	r2, [r3, #0]
      break;
 8007c2e:	e06f      	b.n	8007d10 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	220d      	movs	r2, #13
 8007c34:	701a      	strb	r2, [r3, #0]
      break;
 8007c36:	e06b      	b.n	8007d10 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d017      	beq.n	8007c72 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007c48:	691b      	ldr	r3, [r3, #16]
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	4798      	blx	r3
 8007c4e:	4603      	mov	r3, r0
 8007c50:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007c52:	7bbb      	ldrb	r3, [r7, #14]
 8007c54:	b2db      	uxtb	r3, r3
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d103      	bne.n	8007c62 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	220b      	movs	r2, #11
 8007c5e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007c60:	e058      	b.n	8007d14 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8007c62:	7bbb      	ldrb	r3, [r7, #14]
 8007c64:	b2db      	uxtb	r3, r3
 8007c66:	2b02      	cmp	r3, #2
 8007c68:	d154      	bne.n	8007d14 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	220d      	movs	r2, #13
 8007c6e:	701a      	strb	r2, [r3, #0]
      break;
 8007c70:	e050      	b.n	8007d14 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	220d      	movs	r2, #13
 8007c76:	701a      	strb	r2, [r3, #0]
      break;
 8007c78:	e04c      	b.n	8007d14 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d049      	beq.n	8007d18 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007c8a:	695b      	ldr	r3, [r3, #20]
 8007c8c:	6878      	ldr	r0, [r7, #4]
 8007c8e:	4798      	blx	r3
      }
      break;
 8007c90:	e042      	b.n	8007d18 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2200      	movs	r2, #0
 8007c96:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f7ff fd72 	bl	8007784 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d009      	beq.n	8007cbe <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007cb0:	68db      	ldr	r3, [r3, #12]
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2200      	movs	r2, #0
 8007cba:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d005      	beq.n	8007cd4 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007cce:	2105      	movs	r1, #5
 8007cd0:	6878      	ldr	r0, [r7, #4]
 8007cd2:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8007cda:	b2db      	uxtb	r3, r3
 8007cdc:	2b01      	cmp	r3, #1
 8007cde:	d107      	bne.n	8007cf0 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8007ce8:	6878      	ldr	r0, [r7, #4]
 8007cea:	f7ff fe2b 	bl	8007944 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007cee:	e014      	b.n	8007d1a <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f001 f9b5 	bl	8009060 <USBH_LL_Start>
      break;
 8007cf6:	e010      	b.n	8007d1a <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8007cf8:	bf00      	nop
 8007cfa:	e00e      	b.n	8007d1a <USBH_Process+0x3b6>
      break;
 8007cfc:	bf00      	nop
 8007cfe:	e00c      	b.n	8007d1a <USBH_Process+0x3b6>
      break;
 8007d00:	bf00      	nop
 8007d02:	e00a      	b.n	8007d1a <USBH_Process+0x3b6>
    break;
 8007d04:	bf00      	nop
 8007d06:	e008      	b.n	8007d1a <USBH_Process+0x3b6>
      break;
 8007d08:	bf00      	nop
 8007d0a:	e006      	b.n	8007d1a <USBH_Process+0x3b6>
      break;
 8007d0c:	bf00      	nop
 8007d0e:	e004      	b.n	8007d1a <USBH_Process+0x3b6>
      break;
 8007d10:	bf00      	nop
 8007d12:	e002      	b.n	8007d1a <USBH_Process+0x3b6>
      break;
 8007d14:	bf00      	nop
 8007d16:	e000      	b.n	8007d1a <USBH_Process+0x3b6>
      break;
 8007d18:	bf00      	nop
  }
  return USBH_OK;
 8007d1a:	2300      	movs	r3, #0
}
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	3710      	adds	r7, #16
 8007d20:	46bd      	mov	sp, r7
 8007d22:	bd80      	pop	{r7, pc}

08007d24 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b088      	sub	sp, #32
 8007d28:	af04      	add	r7, sp, #16
 8007d2a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007d30:	2301      	movs	r3, #1
 8007d32:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	785b      	ldrb	r3, [r3, #1]
 8007d38:	2b07      	cmp	r3, #7
 8007d3a:	f200 81c1 	bhi.w	80080c0 <USBH_HandleEnum+0x39c>
 8007d3e:	a201      	add	r2, pc, #4	; (adr r2, 8007d44 <USBH_HandleEnum+0x20>)
 8007d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d44:	08007d65 	.word	0x08007d65
 8007d48:	08007e23 	.word	0x08007e23
 8007d4c:	08007e8d 	.word	0x08007e8d
 8007d50:	08007f1b 	.word	0x08007f1b
 8007d54:	08007f85 	.word	0x08007f85
 8007d58:	08007ff5 	.word	0x08007ff5
 8007d5c:	0800803b 	.word	0x0800803b
 8007d60:	08008081 	.word	0x08008081
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007d64:	2108      	movs	r1, #8
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f000 fa50 	bl	800820c <USBH_Get_DevDesc>
 8007d6c:	4603      	mov	r3, r0
 8007d6e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007d70:	7bbb      	ldrb	r3, [r7, #14]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d130      	bne.n	8007dd8 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2201      	movs	r2, #1
 8007d84:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	7919      	ldrb	r1, [r3, #4]
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007d96:	687a      	ldr	r2, [r7, #4]
 8007d98:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007d9a:	b292      	uxth	r2, r2
 8007d9c:	9202      	str	r2, [sp, #8]
 8007d9e:	2200      	movs	r2, #0
 8007da0:	9201      	str	r2, [sp, #4]
 8007da2:	9300      	str	r3, [sp, #0]
 8007da4:	4603      	mov	r3, r0
 8007da6:	2280      	movs	r2, #128	; 0x80
 8007da8:	6878      	ldr	r0, [r7, #4]
 8007daa:	f000 ff77 	bl	8008c9c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	7959      	ldrb	r1, [r3, #5]
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007dbe:	687a      	ldr	r2, [r7, #4]
 8007dc0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007dc2:	b292      	uxth	r2, r2
 8007dc4:	9202      	str	r2, [sp, #8]
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	9201      	str	r2, [sp, #4]
 8007dca:	9300      	str	r3, [sp, #0]
 8007dcc:	4603      	mov	r3, r0
 8007dce:	2200      	movs	r2, #0
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f000 ff63 	bl	8008c9c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007dd6:	e175      	b.n	80080c4 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007dd8:	7bbb      	ldrb	r3, [r7, #14]
 8007dda:	2b03      	cmp	r3, #3
 8007ddc:	f040 8172 	bne.w	80080c4 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007de6:	3301      	adds	r3, #1
 8007de8:	b2da      	uxtb	r2, r3
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007df6:	2b03      	cmp	r3, #3
 8007df8:	d903      	bls.n	8007e02 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	220d      	movs	r2, #13
 8007dfe:	701a      	strb	r2, [r3, #0]
      break;
 8007e00:	e160      	b.n	80080c4 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	795b      	ldrb	r3, [r3, #5]
 8007e06:	4619      	mov	r1, r3
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	f000 ff97 	bl	8008d3c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	791b      	ldrb	r3, [r3, #4]
 8007e12:	4619      	mov	r1, r3
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	f000 ff91 	bl	8008d3c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	701a      	strb	r2, [r3, #0]
      break;
 8007e20:	e150      	b.n	80080c4 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007e22:	2112      	movs	r1, #18
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f000 f9f1 	bl	800820c <USBH_Get_DevDesc>
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007e2e:	7bbb      	ldrb	r3, [r7, #14]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d103      	bne.n	8007e3c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2202      	movs	r2, #2
 8007e38:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007e3a:	e145      	b.n	80080c8 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007e3c:	7bbb      	ldrb	r3, [r7, #14]
 8007e3e:	2b03      	cmp	r3, #3
 8007e40:	f040 8142 	bne.w	80080c8 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007e4a:	3301      	adds	r3, #1
 8007e4c:	b2da      	uxtb	r2, r3
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007e5a:	2b03      	cmp	r3, #3
 8007e5c:	d903      	bls.n	8007e66 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	220d      	movs	r2, #13
 8007e62:	701a      	strb	r2, [r3, #0]
      break;
 8007e64:	e130      	b.n	80080c8 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	795b      	ldrb	r3, [r3, #5]
 8007e6a:	4619      	mov	r1, r3
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	f000 ff65 	bl	8008d3c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	791b      	ldrb	r3, [r3, #4]
 8007e76:	4619      	mov	r1, r3
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	f000 ff5f 	bl	8008d3c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2200      	movs	r2, #0
 8007e82:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2200      	movs	r2, #0
 8007e88:	701a      	strb	r2, [r3, #0]
      break;
 8007e8a:	e11d      	b.n	80080c8 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007e8c:	2101      	movs	r1, #1
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f000 fa68 	bl	8008364 <USBH_SetAddress>
 8007e94:	4603      	mov	r3, r0
 8007e96:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007e98:	7bbb      	ldrb	r3, [r7, #14]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d132      	bne.n	8007f04 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8007e9e:	2002      	movs	r0, #2
 8007ea0:	f001 fa42 	bl	8009328 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2201      	movs	r2, #1
 8007ea8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2203      	movs	r2, #3
 8007eb0:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	7919      	ldrb	r1, [r3, #4]
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007ec2:	687a      	ldr	r2, [r7, #4]
 8007ec4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007ec6:	b292      	uxth	r2, r2
 8007ec8:	9202      	str	r2, [sp, #8]
 8007eca:	2200      	movs	r2, #0
 8007ecc:	9201      	str	r2, [sp, #4]
 8007ece:	9300      	str	r3, [sp, #0]
 8007ed0:	4603      	mov	r3, r0
 8007ed2:	2280      	movs	r2, #128	; 0x80
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f000 fee1 	bl	8008c9c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	7959      	ldrb	r1, [r3, #5]
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007eea:	687a      	ldr	r2, [r7, #4]
 8007eec:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007eee:	b292      	uxth	r2, r2
 8007ef0:	9202      	str	r2, [sp, #8]
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	9201      	str	r2, [sp, #4]
 8007ef6:	9300      	str	r3, [sp, #0]
 8007ef8:	4603      	mov	r3, r0
 8007efa:	2200      	movs	r2, #0
 8007efc:	6878      	ldr	r0, [r7, #4]
 8007efe:	f000 fecd 	bl	8008c9c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007f02:	e0e3      	b.n	80080cc <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007f04:	7bbb      	ldrb	r3, [r7, #14]
 8007f06:	2b03      	cmp	r3, #3
 8007f08:	f040 80e0 	bne.w	80080cc <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	220d      	movs	r2, #13
 8007f10:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2200      	movs	r2, #0
 8007f16:	705a      	strb	r2, [r3, #1]
      break;
 8007f18:	e0d8      	b.n	80080cc <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007f1a:	2109      	movs	r1, #9
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f000 f99d 	bl	800825c <USBH_Get_CfgDesc>
 8007f22:	4603      	mov	r3, r0
 8007f24:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007f26:	7bbb      	ldrb	r3, [r7, #14]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d103      	bne.n	8007f34 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2204      	movs	r2, #4
 8007f30:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007f32:	e0cd      	b.n	80080d0 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007f34:	7bbb      	ldrb	r3, [r7, #14]
 8007f36:	2b03      	cmp	r3, #3
 8007f38:	f040 80ca 	bne.w	80080d0 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007f42:	3301      	adds	r3, #1
 8007f44:	b2da      	uxtb	r2, r3
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007f52:	2b03      	cmp	r3, #3
 8007f54:	d903      	bls.n	8007f5e <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	220d      	movs	r2, #13
 8007f5a:	701a      	strb	r2, [r3, #0]
      break;
 8007f5c:	e0b8      	b.n	80080d0 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	795b      	ldrb	r3, [r3, #5]
 8007f62:	4619      	mov	r1, r3
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	f000 fee9 	bl	8008d3c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	791b      	ldrb	r3, [r3, #4]
 8007f6e:	4619      	mov	r1, r3
 8007f70:	6878      	ldr	r0, [r7, #4]
 8007f72:	f000 fee3 	bl	8008d3c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2200      	movs	r2, #0
 8007f7a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2200      	movs	r2, #0
 8007f80:	701a      	strb	r2, [r3, #0]
      break;
 8007f82:	e0a5      	b.n	80080d0 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8007f8a:	4619      	mov	r1, r3
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f000 f965 	bl	800825c <USBH_Get_CfgDesc>
 8007f92:	4603      	mov	r3, r0
 8007f94:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007f96:	7bbb      	ldrb	r3, [r7, #14]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d103      	bne.n	8007fa4 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2205      	movs	r2, #5
 8007fa0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007fa2:	e097      	b.n	80080d4 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007fa4:	7bbb      	ldrb	r3, [r7, #14]
 8007fa6:	2b03      	cmp	r3, #3
 8007fa8:	f040 8094 	bne.w	80080d4 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007fb2:	3301      	adds	r3, #1
 8007fb4:	b2da      	uxtb	r2, r3
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007fc2:	2b03      	cmp	r3, #3
 8007fc4:	d903      	bls.n	8007fce <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	220d      	movs	r2, #13
 8007fca:	701a      	strb	r2, [r3, #0]
      break;
 8007fcc:	e082      	b.n	80080d4 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	795b      	ldrb	r3, [r3, #5]
 8007fd2:	4619      	mov	r1, r3
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	f000 feb1 	bl	8008d3c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	791b      	ldrb	r3, [r3, #4]
 8007fde:	4619      	mov	r1, r3
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	f000 feab 	bl	8008d3c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2200      	movs	r2, #0
 8007fea:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2200      	movs	r2, #0
 8007ff0:	701a      	strb	r2, [r3, #0]
      break;
 8007ff2:	e06f      	b.n	80080d4 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d019      	beq.n	8008032 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800800a:	23ff      	movs	r3, #255	; 0xff
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f000 f949 	bl	80082a4 <USBH_Get_StringDesc>
 8008012:	4603      	mov	r3, r0
 8008014:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008016:	7bbb      	ldrb	r3, [r7, #14]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d103      	bne.n	8008024 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2206      	movs	r2, #6
 8008020:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008022:	e059      	b.n	80080d8 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008024:	7bbb      	ldrb	r3, [r7, #14]
 8008026:	2b03      	cmp	r3, #3
 8008028:	d156      	bne.n	80080d8 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2206      	movs	r2, #6
 800802e:	705a      	strb	r2, [r3, #1]
      break;
 8008030:	e052      	b.n	80080d8 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2206      	movs	r2, #6
 8008036:	705a      	strb	r2, [r3, #1]
      break;
 8008038:	e04e      	b.n	80080d8 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8008040:	2b00      	cmp	r3, #0
 8008042:	d019      	beq.n	8008078 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008050:	23ff      	movs	r3, #255	; 0xff
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	f000 f926 	bl	80082a4 <USBH_Get_StringDesc>
 8008058:	4603      	mov	r3, r0
 800805a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800805c:	7bbb      	ldrb	r3, [r7, #14]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d103      	bne.n	800806a <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2207      	movs	r2, #7
 8008066:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008068:	e038      	b.n	80080dc <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800806a:	7bbb      	ldrb	r3, [r7, #14]
 800806c:	2b03      	cmp	r3, #3
 800806e:	d135      	bne.n	80080dc <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2207      	movs	r2, #7
 8008074:	705a      	strb	r2, [r3, #1]
      break;
 8008076:	e031      	b.n	80080dc <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2207      	movs	r2, #7
 800807c:	705a      	strb	r2, [r3, #1]
      break;
 800807e:	e02d      	b.n	80080dc <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8008086:	2b00      	cmp	r3, #0
 8008088:	d017      	beq.n	80080ba <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008096:	23ff      	movs	r3, #255	; 0xff
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f000 f903 	bl	80082a4 <USBH_Get_StringDesc>
 800809e:	4603      	mov	r3, r0
 80080a0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80080a2:	7bbb      	ldrb	r3, [r7, #14]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d102      	bne.n	80080ae <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80080a8:	2300      	movs	r3, #0
 80080aa:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80080ac:	e018      	b.n	80080e0 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80080ae:	7bbb      	ldrb	r3, [r7, #14]
 80080b0:	2b03      	cmp	r3, #3
 80080b2:	d115      	bne.n	80080e0 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 80080b4:	2300      	movs	r3, #0
 80080b6:	73fb      	strb	r3, [r7, #15]
      break;
 80080b8:	e012      	b.n	80080e0 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 80080ba:	2300      	movs	r3, #0
 80080bc:	73fb      	strb	r3, [r7, #15]
      break;
 80080be:	e00f      	b.n	80080e0 <USBH_HandleEnum+0x3bc>

    default:
      break;
 80080c0:	bf00      	nop
 80080c2:	e00e      	b.n	80080e2 <USBH_HandleEnum+0x3be>
      break;
 80080c4:	bf00      	nop
 80080c6:	e00c      	b.n	80080e2 <USBH_HandleEnum+0x3be>
      break;
 80080c8:	bf00      	nop
 80080ca:	e00a      	b.n	80080e2 <USBH_HandleEnum+0x3be>
      break;
 80080cc:	bf00      	nop
 80080ce:	e008      	b.n	80080e2 <USBH_HandleEnum+0x3be>
      break;
 80080d0:	bf00      	nop
 80080d2:	e006      	b.n	80080e2 <USBH_HandleEnum+0x3be>
      break;
 80080d4:	bf00      	nop
 80080d6:	e004      	b.n	80080e2 <USBH_HandleEnum+0x3be>
      break;
 80080d8:	bf00      	nop
 80080da:	e002      	b.n	80080e2 <USBH_HandleEnum+0x3be>
      break;
 80080dc:	bf00      	nop
 80080de:	e000      	b.n	80080e2 <USBH_HandleEnum+0x3be>
      break;
 80080e0:	bf00      	nop
  }
  return Status;
 80080e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	3710      	adds	r7, #16
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bd80      	pop	{r7, pc}

080080ec <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80080ec:	b480      	push	{r7}
 80080ee:	b083      	sub	sp, #12
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
 80080f4:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	683a      	ldr	r2, [r7, #0]
 80080fa:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80080fe:	bf00      	nop
 8008100:	370c      	adds	r7, #12
 8008102:	46bd      	mov	sp, r7
 8008104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008108:	4770      	bx	lr

0800810a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800810a:	b580      	push	{r7, lr}
 800810c:	b082      	sub	sp, #8
 800810e:	af00      	add	r7, sp, #0
 8008110:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008118:	1c5a      	adds	r2, r3, #1
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	f000 f804 	bl	800812e <USBH_HandleSof>
}
 8008126:	bf00      	nop
 8008128:	3708      	adds	r7, #8
 800812a:	46bd      	mov	sp, r7
 800812c:	bd80      	pop	{r7, pc}

0800812e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800812e:	b580      	push	{r7, lr}
 8008130:	b082      	sub	sp, #8
 8008132:	af00      	add	r7, sp, #0
 8008134:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	781b      	ldrb	r3, [r3, #0]
 800813a:	b2db      	uxtb	r3, r3
 800813c:	2b0b      	cmp	r3, #11
 800813e:	d10a      	bne.n	8008156 <USBH_HandleSof+0x28>
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008146:	2b00      	cmp	r3, #0
 8008148:	d005      	beq.n	8008156 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008150:	699b      	ldr	r3, [r3, #24]
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	4798      	blx	r3
  }
}
 8008156:	bf00      	nop
 8008158:	3708      	adds	r7, #8
 800815a:	46bd      	mov	sp, r7
 800815c:	bd80      	pop	{r7, pc}

0800815e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800815e:	b480      	push	{r7}
 8008160:	b083      	sub	sp, #12
 8008162:	af00      	add	r7, sp, #0
 8008164:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2201      	movs	r2, #1
 800816a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800816e:	bf00      	nop
}
 8008170:	370c      	adds	r7, #12
 8008172:	46bd      	mov	sp, r7
 8008174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008178:	4770      	bx	lr

0800817a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800817a:	b480      	push	{r7}
 800817c:	b083      	sub	sp, #12
 800817e:	af00      	add	r7, sp, #0
 8008180:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2200      	movs	r2, #0
 8008186:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800818a:	bf00      	nop
}
 800818c:	370c      	adds	r7, #12
 800818e:	46bd      	mov	sp, r7
 8008190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008194:	4770      	bx	lr

08008196 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008196:	b480      	push	{r7}
 8008198:	b083      	sub	sp, #12
 800819a:	af00      	add	r7, sp, #0
 800819c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2201      	movs	r2, #1
 80081a2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2200      	movs	r2, #0
 80081aa:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2200      	movs	r2, #0
 80081b2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80081b6:	2300      	movs	r3, #0
}
 80081b8:	4618      	mov	r0, r3
 80081ba:	370c      	adds	r7, #12
 80081bc:	46bd      	mov	sp, r7
 80081be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c2:	4770      	bx	lr

080081c4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b082      	sub	sp, #8
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2201      	movs	r2, #1
 80081d0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2200      	movs	r2, #0
 80081d8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2200      	movs	r2, #0
 80081e0:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 80081e4:	6878      	ldr	r0, [r7, #4]
 80081e6:	f000 ff56 	bl	8009096 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	791b      	ldrb	r3, [r3, #4]
 80081ee:	4619      	mov	r1, r3
 80081f0:	6878      	ldr	r0, [r7, #4]
 80081f2:	f000 fda3 	bl	8008d3c <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	795b      	ldrb	r3, [r3, #5]
 80081fa:	4619      	mov	r1, r3
 80081fc:	6878      	ldr	r0, [r7, #4]
 80081fe:	f000 fd9d 	bl	8008d3c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8008202:	2300      	movs	r3, #0
}
 8008204:	4618      	mov	r0, r3
 8008206:	3708      	adds	r7, #8
 8008208:	46bd      	mov	sp, r7
 800820a:	bd80      	pop	{r7, pc}

0800820c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b086      	sub	sp, #24
 8008210:	af02      	add	r7, sp, #8
 8008212:	6078      	str	r0, [r7, #4]
 8008214:	460b      	mov	r3, r1
 8008216:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800821e:	78fb      	ldrb	r3, [r7, #3]
 8008220:	b29b      	uxth	r3, r3
 8008222:	9300      	str	r3, [sp, #0]
 8008224:	4613      	mov	r3, r2
 8008226:	f44f 7280 	mov.w	r2, #256	; 0x100
 800822a:	2100      	movs	r1, #0
 800822c:	6878      	ldr	r0, [r7, #4]
 800822e:	f000 f864 	bl	80082fa <USBH_GetDescriptor>
 8008232:	4603      	mov	r3, r0
 8008234:	73fb      	strb	r3, [r7, #15]
 8008236:	7bfb      	ldrb	r3, [r7, #15]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d10a      	bne.n	8008252 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	f203 3026 	addw	r0, r3, #806	; 0x326
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008248:	78fa      	ldrb	r2, [r7, #3]
 800824a:	b292      	uxth	r2, r2
 800824c:	4619      	mov	r1, r3
 800824e:	f000 f918 	bl	8008482 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8008252:	7bfb      	ldrb	r3, [r7, #15]
}
 8008254:	4618      	mov	r0, r3
 8008256:	3710      	adds	r7, #16
 8008258:	46bd      	mov	sp, r7
 800825a:	bd80      	pop	{r7, pc}

0800825c <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800825c:	b580      	push	{r7, lr}
 800825e:	b086      	sub	sp, #24
 8008260:	af02      	add	r7, sp, #8
 8008262:	6078      	str	r0, [r7, #4]
 8008264:	460b      	mov	r3, r1
 8008266:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	331c      	adds	r3, #28
 800826c:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800826e:	887b      	ldrh	r3, [r7, #2]
 8008270:	9300      	str	r3, [sp, #0]
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008278:	2100      	movs	r1, #0
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f000 f83d 	bl	80082fa <USBH_GetDescriptor>
 8008280:	4603      	mov	r3, r0
 8008282:	72fb      	strb	r3, [r7, #11]
 8008284:	7afb      	ldrb	r3, [r7, #11]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d107      	bne.n	800829a <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008290:	887a      	ldrh	r2, [r7, #2]
 8008292:	68f9      	ldr	r1, [r7, #12]
 8008294:	4618      	mov	r0, r3
 8008296:	f000 f964 	bl	8008562 <USBH_ParseCfgDesc>
  }

  return status;
 800829a:	7afb      	ldrb	r3, [r7, #11]
}
 800829c:	4618      	mov	r0, r3
 800829e:	3710      	adds	r7, #16
 80082a0:	46bd      	mov	sp, r7
 80082a2:	bd80      	pop	{r7, pc}

080082a4 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b088      	sub	sp, #32
 80082a8:	af02      	add	r7, sp, #8
 80082aa:	60f8      	str	r0, [r7, #12]
 80082ac:	607a      	str	r2, [r7, #4]
 80082ae:	461a      	mov	r2, r3
 80082b0:	460b      	mov	r3, r1
 80082b2:	72fb      	strb	r3, [r7, #11]
 80082b4:	4613      	mov	r3, r2
 80082b6:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 80082b8:	7afb      	ldrb	r3, [r7, #11]
 80082ba:	b29b      	uxth	r3, r3
 80082bc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80082c0:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80082c8:	893b      	ldrh	r3, [r7, #8]
 80082ca:	9300      	str	r3, [sp, #0]
 80082cc:	460b      	mov	r3, r1
 80082ce:	2100      	movs	r1, #0
 80082d0:	68f8      	ldr	r0, [r7, #12]
 80082d2:	f000 f812 	bl	80082fa <USBH_GetDescriptor>
 80082d6:	4603      	mov	r3, r0
 80082d8:	75fb      	strb	r3, [r7, #23]
 80082da:	7dfb      	ldrb	r3, [r7, #23]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d107      	bne.n	80082f0 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80082e6:	893a      	ldrh	r2, [r7, #8]
 80082e8:	6879      	ldr	r1, [r7, #4]
 80082ea:	4618      	mov	r0, r3
 80082ec:	f000 fa37 	bl	800875e <USBH_ParseStringDesc>
  }

  return status;
 80082f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80082f2:	4618      	mov	r0, r3
 80082f4:	3718      	adds	r7, #24
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bd80      	pop	{r7, pc}

080082fa <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 80082fa:	b580      	push	{r7, lr}
 80082fc:	b084      	sub	sp, #16
 80082fe:	af00      	add	r7, sp, #0
 8008300:	60f8      	str	r0, [r7, #12]
 8008302:	607b      	str	r3, [r7, #4]
 8008304:	460b      	mov	r3, r1
 8008306:	72fb      	strb	r3, [r7, #11]
 8008308:	4613      	mov	r3, r2
 800830a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	789b      	ldrb	r3, [r3, #2]
 8008310:	2b01      	cmp	r3, #1
 8008312:	d11c      	bne.n	800834e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008314:	7afb      	ldrb	r3, [r7, #11]
 8008316:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800831a:	b2da      	uxtb	r2, r3
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	2206      	movs	r2, #6
 8008324:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	893a      	ldrh	r2, [r7, #8]
 800832a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800832c:	893b      	ldrh	r3, [r7, #8]
 800832e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008332:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008336:	d104      	bne.n	8008342 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	f240 4209 	movw	r2, #1033	; 0x409
 800833e:	829a      	strh	r2, [r3, #20]
 8008340:	e002      	b.n	8008348 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	2200      	movs	r2, #0
 8008346:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	8b3a      	ldrh	r2, [r7, #24]
 800834c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800834e:	8b3b      	ldrh	r3, [r7, #24]
 8008350:	461a      	mov	r2, r3
 8008352:	6879      	ldr	r1, [r7, #4]
 8008354:	68f8      	ldr	r0, [r7, #12]
 8008356:	f000 fa50 	bl	80087fa <USBH_CtlReq>
 800835a:	4603      	mov	r3, r0
}
 800835c:	4618      	mov	r0, r3
 800835e:	3710      	adds	r7, #16
 8008360:	46bd      	mov	sp, r7
 8008362:	bd80      	pop	{r7, pc}

08008364 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b082      	sub	sp, #8
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
 800836c:	460b      	mov	r3, r1
 800836e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	789b      	ldrb	r3, [r3, #2]
 8008374:	2b01      	cmp	r3, #1
 8008376:	d10f      	bne.n	8008398 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2200      	movs	r2, #0
 800837c:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2205      	movs	r2, #5
 8008382:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008384:	78fb      	ldrb	r3, [r7, #3]
 8008386:	b29a      	uxth	r2, r3
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2200      	movs	r2, #0
 8008390:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2200      	movs	r2, #0
 8008396:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008398:	2200      	movs	r2, #0
 800839a:	2100      	movs	r1, #0
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	f000 fa2c 	bl	80087fa <USBH_CtlReq>
 80083a2:	4603      	mov	r3, r0
}
 80083a4:	4618      	mov	r0, r3
 80083a6:	3708      	adds	r7, #8
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bd80      	pop	{r7, pc}

080083ac <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b082      	sub	sp, #8
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
 80083b4:	460b      	mov	r3, r1
 80083b6:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	789b      	ldrb	r3, [r3, #2]
 80083bc:	2b01      	cmp	r3, #1
 80083be:	d10e      	bne.n	80083de <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2200      	movs	r2, #0
 80083c4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2209      	movs	r2, #9
 80083ca:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	887a      	ldrh	r2, [r7, #2]
 80083d0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2200      	movs	r2, #0
 80083d6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2200      	movs	r2, #0
 80083dc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80083de:	2200      	movs	r2, #0
 80083e0:	2100      	movs	r1, #0
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f000 fa09 	bl	80087fa <USBH_CtlReq>
 80083e8:	4603      	mov	r3, r0
}
 80083ea:	4618      	mov	r0, r3
 80083ec:	3708      	adds	r7, #8
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bd80      	pop	{r7, pc}

080083f2 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80083f2:	b580      	push	{r7, lr}
 80083f4:	b082      	sub	sp, #8
 80083f6:	af00      	add	r7, sp, #0
 80083f8:	6078      	str	r0, [r7, #4]
 80083fa:	460b      	mov	r3, r1
 80083fc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	789b      	ldrb	r3, [r3, #2]
 8008402:	2b01      	cmp	r3, #1
 8008404:	d10f      	bne.n	8008426 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2200      	movs	r2, #0
 800840a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2203      	movs	r2, #3
 8008410:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008412:	78fb      	ldrb	r3, [r7, #3]
 8008414:	b29a      	uxth	r2, r3
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2200      	movs	r2, #0
 800841e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2200      	movs	r2, #0
 8008424:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008426:	2200      	movs	r2, #0
 8008428:	2100      	movs	r1, #0
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f000 f9e5 	bl	80087fa <USBH_CtlReq>
 8008430:	4603      	mov	r3, r0
}
 8008432:	4618      	mov	r0, r3
 8008434:	3708      	adds	r7, #8
 8008436:	46bd      	mov	sp, r7
 8008438:	bd80      	pop	{r7, pc}

0800843a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800843a:	b580      	push	{r7, lr}
 800843c:	b082      	sub	sp, #8
 800843e:	af00      	add	r7, sp, #0
 8008440:	6078      	str	r0, [r7, #4]
 8008442:	460b      	mov	r3, r1
 8008444:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	789b      	ldrb	r3, [r3, #2]
 800844a:	2b01      	cmp	r3, #1
 800844c:	d10f      	bne.n	800846e <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2202      	movs	r2, #2
 8008452:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2201      	movs	r2, #1
 8008458:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2200      	movs	r2, #0
 800845e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008460:	78fb      	ldrb	r3, [r7, #3]
 8008462:	b29a      	uxth	r2, r3
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2200      	movs	r2, #0
 800846c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800846e:	2200      	movs	r2, #0
 8008470:	2100      	movs	r1, #0
 8008472:	6878      	ldr	r0, [r7, #4]
 8008474:	f000 f9c1 	bl	80087fa <USBH_CtlReq>
 8008478:	4603      	mov	r3, r0
}
 800847a:	4618      	mov	r0, r3
 800847c:	3708      	adds	r7, #8
 800847e:	46bd      	mov	sp, r7
 8008480:	bd80      	pop	{r7, pc}

08008482 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8008482:	b480      	push	{r7}
 8008484:	b085      	sub	sp, #20
 8008486:	af00      	add	r7, sp, #0
 8008488:	60f8      	str	r0, [r7, #12]
 800848a:	60b9      	str	r1, [r7, #8]
 800848c:	4613      	mov	r3, r2
 800848e:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	781a      	ldrb	r2, [r3, #0]
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	785a      	ldrb	r2, [r3, #1]
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	3302      	adds	r3, #2
 80084a4:	781b      	ldrb	r3, [r3, #0]
 80084a6:	b29a      	uxth	r2, r3
 80084a8:	68bb      	ldr	r3, [r7, #8]
 80084aa:	3303      	adds	r3, #3
 80084ac:	781b      	ldrb	r3, [r3, #0]
 80084ae:	b29b      	uxth	r3, r3
 80084b0:	021b      	lsls	r3, r3, #8
 80084b2:	b29b      	uxth	r3, r3
 80084b4:	4313      	orrs	r3, r2
 80084b6:	b29a      	uxth	r2, r3
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	791a      	ldrb	r2, [r3, #4]
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80084c4:	68bb      	ldr	r3, [r7, #8]
 80084c6:	795a      	ldrb	r2, [r3, #5]
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80084cc:	68bb      	ldr	r3, [r7, #8]
 80084ce:	799a      	ldrb	r2, [r3, #6]
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80084d4:	68bb      	ldr	r3, [r7, #8]
 80084d6:	79da      	ldrb	r2, [r3, #7]
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 80084dc:	88fb      	ldrh	r3, [r7, #6]
 80084de:	2b08      	cmp	r3, #8
 80084e0:	d939      	bls.n	8008556 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 80084e2:	68bb      	ldr	r3, [r7, #8]
 80084e4:	3308      	adds	r3, #8
 80084e6:	781b      	ldrb	r3, [r3, #0]
 80084e8:	b29a      	uxth	r2, r3
 80084ea:	68bb      	ldr	r3, [r7, #8]
 80084ec:	3309      	adds	r3, #9
 80084ee:	781b      	ldrb	r3, [r3, #0]
 80084f0:	b29b      	uxth	r3, r3
 80084f2:	021b      	lsls	r3, r3, #8
 80084f4:	b29b      	uxth	r3, r3
 80084f6:	4313      	orrs	r3, r2
 80084f8:	b29a      	uxth	r2, r3
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	330a      	adds	r3, #10
 8008502:	781b      	ldrb	r3, [r3, #0]
 8008504:	b29a      	uxth	r2, r3
 8008506:	68bb      	ldr	r3, [r7, #8]
 8008508:	330b      	adds	r3, #11
 800850a:	781b      	ldrb	r3, [r3, #0]
 800850c:	b29b      	uxth	r3, r3
 800850e:	021b      	lsls	r3, r3, #8
 8008510:	b29b      	uxth	r3, r3
 8008512:	4313      	orrs	r3, r2
 8008514:	b29a      	uxth	r2, r3
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800851a:	68bb      	ldr	r3, [r7, #8]
 800851c:	330c      	adds	r3, #12
 800851e:	781b      	ldrb	r3, [r3, #0]
 8008520:	b29a      	uxth	r2, r3
 8008522:	68bb      	ldr	r3, [r7, #8]
 8008524:	330d      	adds	r3, #13
 8008526:	781b      	ldrb	r3, [r3, #0]
 8008528:	b29b      	uxth	r3, r3
 800852a:	021b      	lsls	r3, r3, #8
 800852c:	b29b      	uxth	r3, r3
 800852e:	4313      	orrs	r3, r2
 8008530:	b29a      	uxth	r2, r3
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8008536:	68bb      	ldr	r3, [r7, #8]
 8008538:	7b9a      	ldrb	r2, [r3, #14]
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800853e:	68bb      	ldr	r3, [r7, #8]
 8008540:	7bda      	ldrb	r2, [r3, #15]
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8008546:	68bb      	ldr	r3, [r7, #8]
 8008548:	7c1a      	ldrb	r2, [r3, #16]
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800854e:	68bb      	ldr	r3, [r7, #8]
 8008550:	7c5a      	ldrb	r2, [r3, #17]
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	745a      	strb	r2, [r3, #17]
  }
}
 8008556:	bf00      	nop
 8008558:	3714      	adds	r7, #20
 800855a:	46bd      	mov	sp, r7
 800855c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008560:	4770      	bx	lr

08008562 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8008562:	b580      	push	{r7, lr}
 8008564:	b08a      	sub	sp, #40	; 0x28
 8008566:	af00      	add	r7, sp, #0
 8008568:	60f8      	str	r0, [r7, #12]
 800856a:	60b9      	str	r1, [r7, #8]
 800856c:	4613      	mov	r3, r2
 800856e:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008570:	68bb      	ldr	r3, [r7, #8]
 8008572:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008574:	2300      	movs	r3, #0
 8008576:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800857a:	2300      	movs	r3, #0
 800857c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	781a      	ldrb	r2, [r3, #0]
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800858c:	68bb      	ldr	r3, [r7, #8]
 800858e:	785a      	ldrb	r2, [r3, #1]
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8008594:	68bb      	ldr	r3, [r7, #8]
 8008596:	3302      	adds	r3, #2
 8008598:	781b      	ldrb	r3, [r3, #0]
 800859a:	b29a      	uxth	r2, r3
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	3303      	adds	r3, #3
 80085a0:	781b      	ldrb	r3, [r3, #0]
 80085a2:	b29b      	uxth	r3, r3
 80085a4:	021b      	lsls	r3, r3, #8
 80085a6:	b29b      	uxth	r3, r3
 80085a8:	4313      	orrs	r3, r2
 80085aa:	b29a      	uxth	r2, r3
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80085b0:	68bb      	ldr	r3, [r7, #8]
 80085b2:	791a      	ldrb	r2, [r3, #4]
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80085b8:	68bb      	ldr	r3, [r7, #8]
 80085ba:	795a      	ldrb	r2, [r3, #5]
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80085c0:	68bb      	ldr	r3, [r7, #8]
 80085c2:	799a      	ldrb	r2, [r3, #6]
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	79da      	ldrb	r2, [r3, #7]
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80085d0:	68bb      	ldr	r3, [r7, #8]
 80085d2:	7a1a      	ldrb	r2, [r3, #8]
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80085d8:	88fb      	ldrh	r3, [r7, #6]
 80085da:	2b09      	cmp	r3, #9
 80085dc:	d95f      	bls.n	800869e <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 80085de:	2309      	movs	r3, #9
 80085e0:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 80085e2:	2300      	movs	r3, #0
 80085e4:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80085e6:	e051      	b.n	800868c <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80085e8:	f107 0316 	add.w	r3, r7, #22
 80085ec:	4619      	mov	r1, r3
 80085ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80085f0:	f000 f8e8 	bl	80087c4 <USBH_GetNextDesc>
 80085f4:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 80085f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f8:	785b      	ldrb	r3, [r3, #1]
 80085fa:	2b04      	cmp	r3, #4
 80085fc:	d146      	bne.n	800868c <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 80085fe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008602:	221a      	movs	r2, #26
 8008604:	fb02 f303 	mul.w	r3, r2, r3
 8008608:	3308      	adds	r3, #8
 800860a:	68fa      	ldr	r2, [r7, #12]
 800860c:	4413      	add	r3, r2
 800860e:	3302      	adds	r3, #2
 8008610:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008612:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008614:	69f8      	ldr	r0, [r7, #28]
 8008616:	f000 f846 	bl	80086a6 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800861a:	2300      	movs	r3, #0
 800861c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8008620:	2300      	movs	r3, #0
 8008622:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008624:	e022      	b.n	800866c <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008626:	f107 0316 	add.w	r3, r7, #22
 800862a:	4619      	mov	r1, r3
 800862c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800862e:	f000 f8c9 	bl	80087c4 <USBH_GetNextDesc>
 8008632:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8008634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008636:	785b      	ldrb	r3, [r3, #1]
 8008638:	2b05      	cmp	r3, #5
 800863a:	d117      	bne.n	800866c <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800863c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008640:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008644:	3201      	adds	r2, #1
 8008646:	00d2      	lsls	r2, r2, #3
 8008648:	211a      	movs	r1, #26
 800864a:	fb01 f303 	mul.w	r3, r1, r3
 800864e:	4413      	add	r3, r2
 8008650:	3308      	adds	r3, #8
 8008652:	68fa      	ldr	r2, [r7, #12]
 8008654:	4413      	add	r3, r2
 8008656:	3304      	adds	r3, #4
 8008658:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800865a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800865c:	69b8      	ldr	r0, [r7, #24]
 800865e:	f000 f851 	bl	8008704 <USBH_ParseEPDesc>
            ep_ix++;
 8008662:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8008666:	3301      	adds	r3, #1
 8008668:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800866c:	69fb      	ldr	r3, [r7, #28]
 800866e:	791b      	ldrb	r3, [r3, #4]
 8008670:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008674:	429a      	cmp	r2, r3
 8008676:	d204      	bcs.n	8008682 <USBH_ParseCfgDesc+0x120>
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	885a      	ldrh	r2, [r3, #2]
 800867c:	8afb      	ldrh	r3, [r7, #22]
 800867e:	429a      	cmp	r2, r3
 8008680:	d8d1      	bhi.n	8008626 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8008682:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008686:	3301      	adds	r3, #1
 8008688:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800868c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008690:	2b01      	cmp	r3, #1
 8008692:	d804      	bhi.n	800869e <USBH_ParseCfgDesc+0x13c>
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	885a      	ldrh	r2, [r3, #2]
 8008698:	8afb      	ldrh	r3, [r7, #22]
 800869a:	429a      	cmp	r2, r3
 800869c:	d8a4      	bhi.n	80085e8 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800869e:	bf00      	nop
 80086a0:	3728      	adds	r7, #40	; 0x28
 80086a2:	46bd      	mov	sp, r7
 80086a4:	bd80      	pop	{r7, pc}

080086a6 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80086a6:	b480      	push	{r7}
 80086a8:	b083      	sub	sp, #12
 80086aa:	af00      	add	r7, sp, #0
 80086ac:	6078      	str	r0, [r7, #4]
 80086ae:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	781a      	ldrb	r2, [r3, #0]
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	785a      	ldrb	r2, [r3, #1]
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	789a      	ldrb	r2, [r3, #2]
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	78da      	ldrb	r2, [r3, #3]
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	791a      	ldrb	r2, [r3, #4]
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	795a      	ldrb	r2, [r3, #5]
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	799a      	ldrb	r2, [r3, #6]
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	79da      	ldrb	r2, [r3, #7]
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	7a1a      	ldrb	r2, [r3, #8]
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	721a      	strb	r2, [r3, #8]
}
 80086f8:	bf00      	nop
 80086fa:	370c      	adds	r7, #12
 80086fc:	46bd      	mov	sp, r7
 80086fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008702:	4770      	bx	lr

08008704 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8008704:	b480      	push	{r7}
 8008706:	b083      	sub	sp, #12
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
 800870c:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	781a      	ldrb	r2, [r3, #0]
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	785a      	ldrb	r2, [r3, #1]
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	789a      	ldrb	r2, [r3, #2]
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	78da      	ldrb	r2, [r3, #3]
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	3304      	adds	r3, #4
 8008732:	781b      	ldrb	r3, [r3, #0]
 8008734:	b29a      	uxth	r2, r3
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	3305      	adds	r3, #5
 800873a:	781b      	ldrb	r3, [r3, #0]
 800873c:	b29b      	uxth	r3, r3
 800873e:	021b      	lsls	r3, r3, #8
 8008740:	b29b      	uxth	r3, r3
 8008742:	4313      	orrs	r3, r2
 8008744:	b29a      	uxth	r2, r3
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	799a      	ldrb	r2, [r3, #6]
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	719a      	strb	r2, [r3, #6]
}
 8008752:	bf00      	nop
 8008754:	370c      	adds	r7, #12
 8008756:	46bd      	mov	sp, r7
 8008758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875c:	4770      	bx	lr

0800875e <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800875e:	b480      	push	{r7}
 8008760:	b087      	sub	sp, #28
 8008762:	af00      	add	r7, sp, #0
 8008764:	60f8      	str	r0, [r7, #12]
 8008766:	60b9      	str	r1, [r7, #8]
 8008768:	4613      	mov	r3, r2
 800876a:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	3301      	adds	r3, #1
 8008770:	781b      	ldrb	r3, [r3, #0]
 8008772:	2b03      	cmp	r3, #3
 8008774:	d120      	bne.n	80087b8 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	781b      	ldrb	r3, [r3, #0]
 800877a:	1e9a      	subs	r2, r3, #2
 800877c:	88fb      	ldrh	r3, [r7, #6]
 800877e:	4293      	cmp	r3, r2
 8008780:	bf28      	it	cs
 8008782:	4613      	movcs	r3, r2
 8008784:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	3302      	adds	r3, #2
 800878a:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800878c:	2300      	movs	r3, #0
 800878e:	82fb      	strh	r3, [r7, #22]
 8008790:	e00b      	b.n	80087aa <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008792:	8afb      	ldrh	r3, [r7, #22]
 8008794:	68fa      	ldr	r2, [r7, #12]
 8008796:	4413      	add	r3, r2
 8008798:	781a      	ldrb	r2, [r3, #0]
 800879a:	68bb      	ldr	r3, [r7, #8]
 800879c:	701a      	strb	r2, [r3, #0]
      pdest++;
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	3301      	adds	r3, #1
 80087a2:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80087a4:	8afb      	ldrh	r3, [r7, #22]
 80087a6:	3302      	adds	r3, #2
 80087a8:	82fb      	strh	r3, [r7, #22]
 80087aa:	8afa      	ldrh	r2, [r7, #22]
 80087ac:	8abb      	ldrh	r3, [r7, #20]
 80087ae:	429a      	cmp	r2, r3
 80087b0:	d3ef      	bcc.n	8008792 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80087b2:	68bb      	ldr	r3, [r7, #8]
 80087b4:	2200      	movs	r2, #0
 80087b6:	701a      	strb	r2, [r3, #0]
  }
}
 80087b8:	bf00      	nop
 80087ba:	371c      	adds	r7, #28
 80087bc:	46bd      	mov	sp, r7
 80087be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c2:	4770      	bx	lr

080087c4 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 80087c4:	b480      	push	{r7}
 80087c6:	b085      	sub	sp, #20
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
 80087cc:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	881a      	ldrh	r2, [r3, #0]
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	781b      	ldrb	r3, [r3, #0]
 80087d6:	b29b      	uxth	r3, r3
 80087d8:	4413      	add	r3, r2
 80087da:	b29a      	uxth	r2, r3
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	781b      	ldrb	r3, [r3, #0]
 80087e4:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	4413      	add	r3, r2
 80087ea:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80087ec:	68fb      	ldr	r3, [r7, #12]
}
 80087ee:	4618      	mov	r0, r3
 80087f0:	3714      	adds	r7, #20
 80087f2:	46bd      	mov	sp, r7
 80087f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f8:	4770      	bx	lr

080087fa <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80087fa:	b580      	push	{r7, lr}
 80087fc:	b086      	sub	sp, #24
 80087fe:	af00      	add	r7, sp, #0
 8008800:	60f8      	str	r0, [r7, #12]
 8008802:	60b9      	str	r1, [r7, #8]
 8008804:	4613      	mov	r3, r2
 8008806:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008808:	2301      	movs	r3, #1
 800880a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	789b      	ldrb	r3, [r3, #2]
 8008810:	2b01      	cmp	r3, #1
 8008812:	d002      	beq.n	800881a <USBH_CtlReq+0x20>
 8008814:	2b02      	cmp	r3, #2
 8008816:	d00f      	beq.n	8008838 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008818:	e027      	b.n	800886a <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	68ba      	ldr	r2, [r7, #8]
 800881e:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	88fa      	ldrh	r2, [r7, #6]
 8008824:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	2201      	movs	r2, #1
 800882a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	2202      	movs	r2, #2
 8008830:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008832:	2301      	movs	r3, #1
 8008834:	75fb      	strb	r3, [r7, #23]
      break;
 8008836:	e018      	b.n	800886a <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008838:	68f8      	ldr	r0, [r7, #12]
 800883a:	f000 f81b 	bl	8008874 <USBH_HandleControl>
 800883e:	4603      	mov	r3, r0
 8008840:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008842:	7dfb      	ldrb	r3, [r7, #23]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d002      	beq.n	800884e <USBH_CtlReq+0x54>
 8008848:	7dfb      	ldrb	r3, [r7, #23]
 800884a:	2b03      	cmp	r3, #3
 800884c:	d106      	bne.n	800885c <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	2201      	movs	r2, #1
 8008852:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	2200      	movs	r2, #0
 8008858:	761a      	strb	r2, [r3, #24]
      break;
 800885a:	e005      	b.n	8008868 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800885c:	7dfb      	ldrb	r3, [r7, #23]
 800885e:	2b02      	cmp	r3, #2
 8008860:	d102      	bne.n	8008868 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	2201      	movs	r2, #1
 8008866:	709a      	strb	r2, [r3, #2]
      break;
 8008868:	bf00      	nop
  }
  return status;
 800886a:	7dfb      	ldrb	r3, [r7, #23]
}
 800886c:	4618      	mov	r0, r3
 800886e:	3718      	adds	r7, #24
 8008870:	46bd      	mov	sp, r7
 8008872:	bd80      	pop	{r7, pc}

08008874 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b086      	sub	sp, #24
 8008878:	af02      	add	r7, sp, #8
 800887a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800887c:	2301      	movs	r3, #1
 800887e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008880:	2300      	movs	r3, #0
 8008882:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	7e1b      	ldrb	r3, [r3, #24]
 8008888:	3b01      	subs	r3, #1
 800888a:	2b0a      	cmp	r3, #10
 800888c:	f200 8156 	bhi.w	8008b3c <USBH_HandleControl+0x2c8>
 8008890:	a201      	add	r2, pc, #4	; (adr r2, 8008898 <USBH_HandleControl+0x24>)
 8008892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008896:	bf00      	nop
 8008898:	080088c5 	.word	0x080088c5
 800889c:	080088df 	.word	0x080088df
 80088a0:	08008949 	.word	0x08008949
 80088a4:	0800896f 	.word	0x0800896f
 80088a8:	080089a7 	.word	0x080089a7
 80088ac:	080089d1 	.word	0x080089d1
 80088b0:	08008a23 	.word	0x08008a23
 80088b4:	08008a45 	.word	0x08008a45
 80088b8:	08008a81 	.word	0x08008a81
 80088bc:	08008aa7 	.word	0x08008aa7
 80088c0:	08008ae5 	.word	0x08008ae5
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	f103 0110 	add.w	r1, r3, #16
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	795b      	ldrb	r3, [r3, #5]
 80088ce:	461a      	mov	r2, r3
 80088d0:	6878      	ldr	r0, [r7, #4]
 80088d2:	f000 f943 	bl	8008b5c <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	2202      	movs	r2, #2
 80088da:	761a      	strb	r2, [r3, #24]
      break;
 80088dc:	e139      	b.n	8008b52 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	795b      	ldrb	r3, [r3, #5]
 80088e2:	4619      	mov	r1, r3
 80088e4:	6878      	ldr	r0, [r7, #4]
 80088e6:	f000 fcc5 	bl	8009274 <USBH_LL_GetURBState>
 80088ea:	4603      	mov	r3, r0
 80088ec:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80088ee:	7bbb      	ldrb	r3, [r7, #14]
 80088f0:	2b01      	cmp	r3, #1
 80088f2:	d11e      	bne.n	8008932 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	7c1b      	ldrb	r3, [r3, #16]
 80088f8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80088fc:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	8adb      	ldrh	r3, [r3, #22]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d00a      	beq.n	800891c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008906:	7b7b      	ldrb	r3, [r7, #13]
 8008908:	2b80      	cmp	r3, #128	; 0x80
 800890a:	d103      	bne.n	8008914 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2203      	movs	r2, #3
 8008910:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008912:	e115      	b.n	8008b40 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2205      	movs	r2, #5
 8008918:	761a      	strb	r2, [r3, #24]
      break;
 800891a:	e111      	b.n	8008b40 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800891c:	7b7b      	ldrb	r3, [r7, #13]
 800891e:	2b80      	cmp	r3, #128	; 0x80
 8008920:	d103      	bne.n	800892a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2209      	movs	r2, #9
 8008926:	761a      	strb	r2, [r3, #24]
      break;
 8008928:	e10a      	b.n	8008b40 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2207      	movs	r2, #7
 800892e:	761a      	strb	r2, [r3, #24]
      break;
 8008930:	e106      	b.n	8008b40 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008932:	7bbb      	ldrb	r3, [r7, #14]
 8008934:	2b04      	cmp	r3, #4
 8008936:	d003      	beq.n	8008940 <USBH_HandleControl+0xcc>
 8008938:	7bbb      	ldrb	r3, [r7, #14]
 800893a:	2b02      	cmp	r3, #2
 800893c:	f040 8100 	bne.w	8008b40 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	220b      	movs	r2, #11
 8008944:	761a      	strb	r2, [r3, #24]
      break;
 8008946:	e0fb      	b.n	8008b40 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800894e:	b29a      	uxth	r2, r3
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	6899      	ldr	r1, [r3, #8]
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	899a      	ldrh	r2, [r3, #12]
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	791b      	ldrb	r3, [r3, #4]
 8008960:	6878      	ldr	r0, [r7, #4]
 8008962:	f000 f93a 	bl	8008bda <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2204      	movs	r2, #4
 800896a:	761a      	strb	r2, [r3, #24]
      break;
 800896c:	e0f1      	b.n	8008b52 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	791b      	ldrb	r3, [r3, #4]
 8008972:	4619      	mov	r1, r3
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	f000 fc7d 	bl	8009274 <USBH_LL_GetURBState>
 800897a:	4603      	mov	r3, r0
 800897c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800897e:	7bbb      	ldrb	r3, [r7, #14]
 8008980:	2b01      	cmp	r3, #1
 8008982:	d102      	bne.n	800898a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2209      	movs	r2, #9
 8008988:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800898a:	7bbb      	ldrb	r3, [r7, #14]
 800898c:	2b05      	cmp	r3, #5
 800898e:	d102      	bne.n	8008996 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008990:	2303      	movs	r3, #3
 8008992:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008994:	e0d6      	b.n	8008b44 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8008996:	7bbb      	ldrb	r3, [r7, #14]
 8008998:	2b04      	cmp	r3, #4
 800899a:	f040 80d3 	bne.w	8008b44 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	220b      	movs	r2, #11
 80089a2:	761a      	strb	r2, [r3, #24]
      break;
 80089a4:	e0ce      	b.n	8008b44 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6899      	ldr	r1, [r3, #8]
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	899a      	ldrh	r2, [r3, #12]
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	795b      	ldrb	r3, [r3, #5]
 80089b2:	2001      	movs	r0, #1
 80089b4:	9000      	str	r0, [sp, #0]
 80089b6:	6878      	ldr	r0, [r7, #4]
 80089b8:	f000 f8ea 	bl	8008b90 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80089c2:	b29a      	uxth	r2, r3
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2206      	movs	r2, #6
 80089cc:	761a      	strb	r2, [r3, #24]
      break;
 80089ce:	e0c0      	b.n	8008b52 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	795b      	ldrb	r3, [r3, #5]
 80089d4:	4619      	mov	r1, r3
 80089d6:	6878      	ldr	r0, [r7, #4]
 80089d8:	f000 fc4c 	bl	8009274 <USBH_LL_GetURBState>
 80089dc:	4603      	mov	r3, r0
 80089de:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80089e0:	7bbb      	ldrb	r3, [r7, #14]
 80089e2:	2b01      	cmp	r3, #1
 80089e4:	d103      	bne.n	80089ee <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	2207      	movs	r2, #7
 80089ea:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80089ec:	e0ac      	b.n	8008b48 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80089ee:	7bbb      	ldrb	r3, [r7, #14]
 80089f0:	2b05      	cmp	r3, #5
 80089f2:	d105      	bne.n	8008a00 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	220c      	movs	r2, #12
 80089f8:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80089fa:	2303      	movs	r3, #3
 80089fc:	73fb      	strb	r3, [r7, #15]
      break;
 80089fe:	e0a3      	b.n	8008b48 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008a00:	7bbb      	ldrb	r3, [r7, #14]
 8008a02:	2b02      	cmp	r3, #2
 8008a04:	d103      	bne.n	8008a0e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2205      	movs	r2, #5
 8008a0a:	761a      	strb	r2, [r3, #24]
      break;
 8008a0c:	e09c      	b.n	8008b48 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8008a0e:	7bbb      	ldrb	r3, [r7, #14]
 8008a10:	2b04      	cmp	r3, #4
 8008a12:	f040 8099 	bne.w	8008b48 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	220b      	movs	r2, #11
 8008a1a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008a1c:	2302      	movs	r3, #2
 8008a1e:	73fb      	strb	r3, [r7, #15]
      break;
 8008a20:	e092      	b.n	8008b48 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	791b      	ldrb	r3, [r3, #4]
 8008a26:	2200      	movs	r2, #0
 8008a28:	2100      	movs	r1, #0
 8008a2a:	6878      	ldr	r0, [r7, #4]
 8008a2c:	f000 f8d5 	bl	8008bda <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008a36:	b29a      	uxth	r2, r3
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2208      	movs	r2, #8
 8008a40:	761a      	strb	r2, [r3, #24]

      break;
 8008a42:	e086      	b.n	8008b52 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	791b      	ldrb	r3, [r3, #4]
 8008a48:	4619      	mov	r1, r3
 8008a4a:	6878      	ldr	r0, [r7, #4]
 8008a4c:	f000 fc12 	bl	8009274 <USBH_LL_GetURBState>
 8008a50:	4603      	mov	r3, r0
 8008a52:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008a54:	7bbb      	ldrb	r3, [r7, #14]
 8008a56:	2b01      	cmp	r3, #1
 8008a58:	d105      	bne.n	8008a66 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	220d      	movs	r2, #13
 8008a5e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008a60:	2300      	movs	r3, #0
 8008a62:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008a64:	e072      	b.n	8008b4c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8008a66:	7bbb      	ldrb	r3, [r7, #14]
 8008a68:	2b04      	cmp	r3, #4
 8008a6a:	d103      	bne.n	8008a74 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	220b      	movs	r2, #11
 8008a70:	761a      	strb	r2, [r3, #24]
      break;
 8008a72:	e06b      	b.n	8008b4c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8008a74:	7bbb      	ldrb	r3, [r7, #14]
 8008a76:	2b05      	cmp	r3, #5
 8008a78:	d168      	bne.n	8008b4c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8008a7a:	2303      	movs	r3, #3
 8008a7c:	73fb      	strb	r3, [r7, #15]
      break;
 8008a7e:	e065      	b.n	8008b4c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	795b      	ldrb	r3, [r3, #5]
 8008a84:	2201      	movs	r2, #1
 8008a86:	9200      	str	r2, [sp, #0]
 8008a88:	2200      	movs	r2, #0
 8008a8a:	2100      	movs	r1, #0
 8008a8c:	6878      	ldr	r0, [r7, #4]
 8008a8e:	f000 f87f 	bl	8008b90 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008a98:	b29a      	uxth	r2, r3
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	220a      	movs	r2, #10
 8008aa2:	761a      	strb	r2, [r3, #24]
      break;
 8008aa4:	e055      	b.n	8008b52 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	795b      	ldrb	r3, [r3, #5]
 8008aaa:	4619      	mov	r1, r3
 8008aac:	6878      	ldr	r0, [r7, #4]
 8008aae:	f000 fbe1 	bl	8009274 <USBH_LL_GetURBState>
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008ab6:	7bbb      	ldrb	r3, [r7, #14]
 8008ab8:	2b01      	cmp	r3, #1
 8008aba:	d105      	bne.n	8008ac8 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008abc:	2300      	movs	r3, #0
 8008abe:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	220d      	movs	r2, #13
 8008ac4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008ac6:	e043      	b.n	8008b50 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008ac8:	7bbb      	ldrb	r3, [r7, #14]
 8008aca:	2b02      	cmp	r3, #2
 8008acc:	d103      	bne.n	8008ad6 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2209      	movs	r2, #9
 8008ad2:	761a      	strb	r2, [r3, #24]
      break;
 8008ad4:	e03c      	b.n	8008b50 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8008ad6:	7bbb      	ldrb	r3, [r7, #14]
 8008ad8:	2b04      	cmp	r3, #4
 8008ada:	d139      	bne.n	8008b50 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	220b      	movs	r2, #11
 8008ae0:	761a      	strb	r2, [r3, #24]
      break;
 8008ae2:	e035      	b.n	8008b50 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	7e5b      	ldrb	r3, [r3, #25]
 8008ae8:	3301      	adds	r3, #1
 8008aea:	b2da      	uxtb	r2, r3
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	765a      	strb	r2, [r3, #25]
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	7e5b      	ldrb	r3, [r3, #25]
 8008af4:	2b02      	cmp	r3, #2
 8008af6:	d806      	bhi.n	8008b06 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2201      	movs	r2, #1
 8008afc:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2201      	movs	r2, #1
 8008b02:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008b04:	e025      	b.n	8008b52 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008b0c:	2106      	movs	r1, #6
 8008b0e:	6878      	ldr	r0, [r7, #4]
 8008b10:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	2200      	movs	r2, #0
 8008b16:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	795b      	ldrb	r3, [r3, #5]
 8008b1c:	4619      	mov	r1, r3
 8008b1e:	6878      	ldr	r0, [r7, #4]
 8008b20:	f000 f90c 	bl	8008d3c <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	791b      	ldrb	r3, [r3, #4]
 8008b28:	4619      	mov	r1, r3
 8008b2a:	6878      	ldr	r0, [r7, #4]
 8008b2c:	f000 f906 	bl	8008d3c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2200      	movs	r2, #0
 8008b34:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008b36:	2302      	movs	r3, #2
 8008b38:	73fb      	strb	r3, [r7, #15]
      break;
 8008b3a:	e00a      	b.n	8008b52 <USBH_HandleControl+0x2de>

    default:
      break;
 8008b3c:	bf00      	nop
 8008b3e:	e008      	b.n	8008b52 <USBH_HandleControl+0x2de>
      break;
 8008b40:	bf00      	nop
 8008b42:	e006      	b.n	8008b52 <USBH_HandleControl+0x2de>
      break;
 8008b44:	bf00      	nop
 8008b46:	e004      	b.n	8008b52 <USBH_HandleControl+0x2de>
      break;
 8008b48:	bf00      	nop
 8008b4a:	e002      	b.n	8008b52 <USBH_HandleControl+0x2de>
      break;
 8008b4c:	bf00      	nop
 8008b4e:	e000      	b.n	8008b52 <USBH_HandleControl+0x2de>
      break;
 8008b50:	bf00      	nop
  }

  return status;
 8008b52:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b54:	4618      	mov	r0, r3
 8008b56:	3710      	adds	r7, #16
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	bd80      	pop	{r7, pc}

08008b5c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b088      	sub	sp, #32
 8008b60:	af04      	add	r7, sp, #16
 8008b62:	60f8      	str	r0, [r7, #12]
 8008b64:	60b9      	str	r1, [r7, #8]
 8008b66:	4613      	mov	r3, r2
 8008b68:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008b6a:	79f9      	ldrb	r1, [r7, #7]
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	9303      	str	r3, [sp, #12]
 8008b70:	2308      	movs	r3, #8
 8008b72:	9302      	str	r3, [sp, #8]
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	9301      	str	r3, [sp, #4]
 8008b78:	2300      	movs	r3, #0
 8008b7a:	9300      	str	r3, [sp, #0]
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	2200      	movs	r2, #0
 8008b80:	68f8      	ldr	r0, [r7, #12]
 8008b82:	f000 fb46 	bl	8009212 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8008b86:	2300      	movs	r3, #0
}
 8008b88:	4618      	mov	r0, r3
 8008b8a:	3710      	adds	r7, #16
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	bd80      	pop	{r7, pc}

08008b90 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b088      	sub	sp, #32
 8008b94:	af04      	add	r7, sp, #16
 8008b96:	60f8      	str	r0, [r7, #12]
 8008b98:	60b9      	str	r1, [r7, #8]
 8008b9a:	4611      	mov	r1, r2
 8008b9c:	461a      	mov	r2, r3
 8008b9e:	460b      	mov	r3, r1
 8008ba0:	80fb      	strh	r3, [r7, #6]
 8008ba2:	4613      	mov	r3, r2
 8008ba4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d001      	beq.n	8008bb4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008bb4:	7979      	ldrb	r1, [r7, #5]
 8008bb6:	7e3b      	ldrb	r3, [r7, #24]
 8008bb8:	9303      	str	r3, [sp, #12]
 8008bba:	88fb      	ldrh	r3, [r7, #6]
 8008bbc:	9302      	str	r3, [sp, #8]
 8008bbe:	68bb      	ldr	r3, [r7, #8]
 8008bc0:	9301      	str	r3, [sp, #4]
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	9300      	str	r3, [sp, #0]
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	2200      	movs	r2, #0
 8008bca:	68f8      	ldr	r0, [r7, #12]
 8008bcc:	f000 fb21 	bl	8009212 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008bd0:	2300      	movs	r3, #0
}
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	3710      	adds	r7, #16
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	bd80      	pop	{r7, pc}

08008bda <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008bda:	b580      	push	{r7, lr}
 8008bdc:	b088      	sub	sp, #32
 8008bde:	af04      	add	r7, sp, #16
 8008be0:	60f8      	str	r0, [r7, #12]
 8008be2:	60b9      	str	r1, [r7, #8]
 8008be4:	4611      	mov	r1, r2
 8008be6:	461a      	mov	r2, r3
 8008be8:	460b      	mov	r3, r1
 8008bea:	80fb      	strh	r3, [r7, #6]
 8008bec:	4613      	mov	r3, r2
 8008bee:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008bf0:	7979      	ldrb	r1, [r7, #5]
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	9303      	str	r3, [sp, #12]
 8008bf6:	88fb      	ldrh	r3, [r7, #6]
 8008bf8:	9302      	str	r3, [sp, #8]
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	9301      	str	r3, [sp, #4]
 8008bfe:	2301      	movs	r3, #1
 8008c00:	9300      	str	r3, [sp, #0]
 8008c02:	2300      	movs	r3, #0
 8008c04:	2201      	movs	r2, #1
 8008c06:	68f8      	ldr	r0, [r7, #12]
 8008c08:	f000 fb03 	bl	8009212 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8008c0c:	2300      	movs	r3, #0

}
 8008c0e:	4618      	mov	r0, r3
 8008c10:	3710      	adds	r7, #16
 8008c12:	46bd      	mov	sp, r7
 8008c14:	bd80      	pop	{r7, pc}

08008c16 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008c16:	b580      	push	{r7, lr}
 8008c18:	b088      	sub	sp, #32
 8008c1a:	af04      	add	r7, sp, #16
 8008c1c:	60f8      	str	r0, [r7, #12]
 8008c1e:	60b9      	str	r1, [r7, #8]
 8008c20:	4611      	mov	r1, r2
 8008c22:	461a      	mov	r2, r3
 8008c24:	460b      	mov	r3, r1
 8008c26:	80fb      	strh	r3, [r7, #6]
 8008c28:	4613      	mov	r3, r2
 8008c2a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d001      	beq.n	8008c3a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008c36:	2300      	movs	r3, #0
 8008c38:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008c3a:	7979      	ldrb	r1, [r7, #5]
 8008c3c:	7e3b      	ldrb	r3, [r7, #24]
 8008c3e:	9303      	str	r3, [sp, #12]
 8008c40:	88fb      	ldrh	r3, [r7, #6]
 8008c42:	9302      	str	r3, [sp, #8]
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	9301      	str	r3, [sp, #4]
 8008c48:	2301      	movs	r3, #1
 8008c4a:	9300      	str	r3, [sp, #0]
 8008c4c:	2302      	movs	r3, #2
 8008c4e:	2200      	movs	r2, #0
 8008c50:	68f8      	ldr	r0, [r7, #12]
 8008c52:	f000 fade 	bl	8009212 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008c56:	2300      	movs	r3, #0
}
 8008c58:	4618      	mov	r0, r3
 8008c5a:	3710      	adds	r7, #16
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	bd80      	pop	{r7, pc}

08008c60 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b088      	sub	sp, #32
 8008c64:	af04      	add	r7, sp, #16
 8008c66:	60f8      	str	r0, [r7, #12]
 8008c68:	60b9      	str	r1, [r7, #8]
 8008c6a:	4611      	mov	r1, r2
 8008c6c:	461a      	mov	r2, r3
 8008c6e:	460b      	mov	r3, r1
 8008c70:	80fb      	strh	r3, [r7, #6]
 8008c72:	4613      	mov	r3, r2
 8008c74:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008c76:	7979      	ldrb	r1, [r7, #5]
 8008c78:	2300      	movs	r3, #0
 8008c7a:	9303      	str	r3, [sp, #12]
 8008c7c:	88fb      	ldrh	r3, [r7, #6]
 8008c7e:	9302      	str	r3, [sp, #8]
 8008c80:	68bb      	ldr	r3, [r7, #8]
 8008c82:	9301      	str	r3, [sp, #4]
 8008c84:	2301      	movs	r3, #1
 8008c86:	9300      	str	r3, [sp, #0]
 8008c88:	2302      	movs	r3, #2
 8008c8a:	2201      	movs	r2, #1
 8008c8c:	68f8      	ldr	r0, [r7, #12]
 8008c8e:	f000 fac0 	bl	8009212 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8008c92:	2300      	movs	r3, #0
}
 8008c94:	4618      	mov	r0, r3
 8008c96:	3710      	adds	r7, #16
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	bd80      	pop	{r7, pc}

08008c9c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b086      	sub	sp, #24
 8008ca0:	af04      	add	r7, sp, #16
 8008ca2:	6078      	str	r0, [r7, #4]
 8008ca4:	4608      	mov	r0, r1
 8008ca6:	4611      	mov	r1, r2
 8008ca8:	461a      	mov	r2, r3
 8008caa:	4603      	mov	r3, r0
 8008cac:	70fb      	strb	r3, [r7, #3]
 8008cae:	460b      	mov	r3, r1
 8008cb0:	70bb      	strb	r3, [r7, #2]
 8008cb2:	4613      	mov	r3, r2
 8008cb4:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008cb6:	7878      	ldrb	r0, [r7, #1]
 8008cb8:	78ba      	ldrb	r2, [r7, #2]
 8008cba:	78f9      	ldrb	r1, [r7, #3]
 8008cbc:	8b3b      	ldrh	r3, [r7, #24]
 8008cbe:	9302      	str	r3, [sp, #8]
 8008cc0:	7d3b      	ldrb	r3, [r7, #20]
 8008cc2:	9301      	str	r3, [sp, #4]
 8008cc4:	7c3b      	ldrb	r3, [r7, #16]
 8008cc6:	9300      	str	r3, [sp, #0]
 8008cc8:	4603      	mov	r3, r0
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f000 fa53 	bl	8009176 <USBH_LL_OpenPipe>

  return USBH_OK;
 8008cd0:	2300      	movs	r3, #0
}
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	3708      	adds	r7, #8
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	bd80      	pop	{r7, pc}

08008cda <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008cda:	b580      	push	{r7, lr}
 8008cdc:	b082      	sub	sp, #8
 8008cde:	af00      	add	r7, sp, #0
 8008ce0:	6078      	str	r0, [r7, #4]
 8008ce2:	460b      	mov	r3, r1
 8008ce4:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8008ce6:	78fb      	ldrb	r3, [r7, #3]
 8008ce8:	4619      	mov	r1, r3
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f000 fa72 	bl	80091d4 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008cf0:	2300      	movs	r3, #0
}
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	3708      	adds	r7, #8
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	bd80      	pop	{r7, pc}

08008cfa <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008cfa:	b580      	push	{r7, lr}
 8008cfc:	b084      	sub	sp, #16
 8008cfe:	af00      	add	r7, sp, #0
 8008d00:	6078      	str	r0, [r7, #4]
 8008d02:	460b      	mov	r3, r1
 8008d04:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008d06:	6878      	ldr	r0, [r7, #4]
 8008d08:	f000 f836 	bl	8008d78 <USBH_GetFreePipe>
 8008d0c:	4603      	mov	r3, r0
 8008d0e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008d10:	89fb      	ldrh	r3, [r7, #14]
 8008d12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008d16:	4293      	cmp	r3, r2
 8008d18:	d00a      	beq.n	8008d30 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8008d1a:	78fa      	ldrb	r2, [r7, #3]
 8008d1c:	89fb      	ldrh	r3, [r7, #14]
 8008d1e:	f003 030f 	and.w	r3, r3, #15
 8008d22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008d26:	6879      	ldr	r1, [r7, #4]
 8008d28:	33e0      	adds	r3, #224	; 0xe0
 8008d2a:	009b      	lsls	r3, r3, #2
 8008d2c:	440b      	add	r3, r1
 8008d2e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008d30:	89fb      	ldrh	r3, [r7, #14]
 8008d32:	b2db      	uxtb	r3, r3
}
 8008d34:	4618      	mov	r0, r3
 8008d36:	3710      	adds	r7, #16
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	bd80      	pop	{r7, pc}

08008d3c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008d3c:	b480      	push	{r7}
 8008d3e:	b083      	sub	sp, #12
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
 8008d44:	460b      	mov	r3, r1
 8008d46:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8008d48:	78fb      	ldrb	r3, [r7, #3]
 8008d4a:	2b0a      	cmp	r3, #10
 8008d4c:	d80d      	bhi.n	8008d6a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008d4e:	78fb      	ldrb	r3, [r7, #3]
 8008d50:	687a      	ldr	r2, [r7, #4]
 8008d52:	33e0      	adds	r3, #224	; 0xe0
 8008d54:	009b      	lsls	r3, r3, #2
 8008d56:	4413      	add	r3, r2
 8008d58:	685a      	ldr	r2, [r3, #4]
 8008d5a:	78fb      	ldrb	r3, [r7, #3]
 8008d5c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008d60:	6879      	ldr	r1, [r7, #4]
 8008d62:	33e0      	adds	r3, #224	; 0xe0
 8008d64:	009b      	lsls	r3, r3, #2
 8008d66:	440b      	add	r3, r1
 8008d68:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008d6a:	2300      	movs	r3, #0
}
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	370c      	adds	r7, #12
 8008d70:	46bd      	mov	sp, r7
 8008d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d76:	4770      	bx	lr

08008d78 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008d78:	b480      	push	{r7}
 8008d7a:	b085      	sub	sp, #20
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008d80:	2300      	movs	r3, #0
 8008d82:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8008d84:	2300      	movs	r3, #0
 8008d86:	73fb      	strb	r3, [r7, #15]
 8008d88:	e00f      	b.n	8008daa <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008d8a:	7bfb      	ldrb	r3, [r7, #15]
 8008d8c:	687a      	ldr	r2, [r7, #4]
 8008d8e:	33e0      	adds	r3, #224	; 0xe0
 8008d90:	009b      	lsls	r3, r3, #2
 8008d92:	4413      	add	r3, r2
 8008d94:	685b      	ldr	r3, [r3, #4]
 8008d96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d102      	bne.n	8008da4 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008d9e:	7bfb      	ldrb	r3, [r7, #15]
 8008da0:	b29b      	uxth	r3, r3
 8008da2:	e007      	b.n	8008db4 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8008da4:	7bfb      	ldrb	r3, [r7, #15]
 8008da6:	3301      	adds	r3, #1
 8008da8:	73fb      	strb	r3, [r7, #15]
 8008daa:	7bfb      	ldrb	r3, [r7, #15]
 8008dac:	2b0a      	cmp	r3, #10
 8008dae:	d9ec      	bls.n	8008d8a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008db0:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008db4:	4618      	mov	r0, r3
 8008db6:	3714      	adds	r7, #20
 8008db8:	46bd      	mov	sp, r7
 8008dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dbe:	4770      	bx	lr

08008dc0 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008dc4:	2201      	movs	r2, #1
 8008dc6:	490e      	ldr	r1, [pc, #56]	; (8008e00 <MX_USB_HOST_Init+0x40>)
 8008dc8:	480e      	ldr	r0, [pc, #56]	; (8008e04 <MX_USB_HOST_Init+0x44>)
 8008dca:	f7fe fca1 	bl	8007710 <USBH_Init>
 8008dce:	4603      	mov	r3, r0
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d001      	beq.n	8008dd8 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008dd4:	f7f8 fa6a 	bl	80012ac <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008dd8:	490b      	ldr	r1, [pc, #44]	; (8008e08 <MX_USB_HOST_Init+0x48>)
 8008dda:	480a      	ldr	r0, [pc, #40]	; (8008e04 <MX_USB_HOST_Init+0x44>)
 8008ddc:	f7fe fd26 	bl	800782c <USBH_RegisterClass>
 8008de0:	4603      	mov	r3, r0
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d001      	beq.n	8008dea <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008de6:	f7f8 fa61 	bl	80012ac <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008dea:	4806      	ldr	r0, [pc, #24]	; (8008e04 <MX_USB_HOST_Init+0x44>)
 8008dec:	f7fe fdaa 	bl	8007944 <USBH_Start>
 8008df0:	4603      	mov	r3, r0
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d001      	beq.n	8008dfa <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008df6:	f7f8 fa59 	bl	80012ac <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008dfa:	bf00      	nop
 8008dfc:	bd80      	pop	{r7, pc}
 8008dfe:	bf00      	nop
 8008e00:	08008e21 	.word	0x08008e21
 8008e04:	200002d4 	.word	0x200002d4
 8008e08:	20000024 	.word	0x20000024

08008e0c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008e10:	4802      	ldr	r0, [pc, #8]	; (8008e1c <MX_USB_HOST_Process+0x10>)
 8008e12:	f7fe fda7 	bl	8007964 <USBH_Process>
}
 8008e16:	bf00      	nop
 8008e18:	bd80      	pop	{r7, pc}
 8008e1a:	bf00      	nop
 8008e1c:	200002d4 	.word	0x200002d4

08008e20 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008e20:	b480      	push	{r7}
 8008e22:	b083      	sub	sp, #12
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
 8008e28:	460b      	mov	r3, r1
 8008e2a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008e2c:	78fb      	ldrb	r3, [r7, #3]
 8008e2e:	3b01      	subs	r3, #1
 8008e30:	2b04      	cmp	r3, #4
 8008e32:	d819      	bhi.n	8008e68 <USBH_UserProcess+0x48>
 8008e34:	a201      	add	r2, pc, #4	; (adr r2, 8008e3c <USBH_UserProcess+0x1c>)
 8008e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e3a:	bf00      	nop
 8008e3c:	08008e69 	.word	0x08008e69
 8008e40:	08008e59 	.word	0x08008e59
 8008e44:	08008e69 	.word	0x08008e69
 8008e48:	08008e61 	.word	0x08008e61
 8008e4c:	08008e51 	.word	0x08008e51
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008e50:	4b09      	ldr	r3, [pc, #36]	; (8008e78 <USBH_UserProcess+0x58>)
 8008e52:	2203      	movs	r2, #3
 8008e54:	701a      	strb	r2, [r3, #0]
  break;
 8008e56:	e008      	b.n	8008e6a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008e58:	4b07      	ldr	r3, [pc, #28]	; (8008e78 <USBH_UserProcess+0x58>)
 8008e5a:	2202      	movs	r2, #2
 8008e5c:	701a      	strb	r2, [r3, #0]
  break;
 8008e5e:	e004      	b.n	8008e6a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008e60:	4b05      	ldr	r3, [pc, #20]	; (8008e78 <USBH_UserProcess+0x58>)
 8008e62:	2201      	movs	r2, #1
 8008e64:	701a      	strb	r2, [r3, #0]
  break;
 8008e66:	e000      	b.n	8008e6a <USBH_UserProcess+0x4a>

  default:
  break;
 8008e68:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008e6a:	bf00      	nop
 8008e6c:	370c      	adds	r7, #12
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e74:	4770      	bx	lr
 8008e76:	bf00      	nop
 8008e78:	200000e8 	.word	0x200000e8

08008e7c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b08a      	sub	sp, #40	; 0x28
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008e84:	f107 0314 	add.w	r3, r7, #20
 8008e88:	2200      	movs	r2, #0
 8008e8a:	601a      	str	r2, [r3, #0]
 8008e8c:	605a      	str	r2, [r3, #4]
 8008e8e:	609a      	str	r2, [r3, #8]
 8008e90:	60da      	str	r2, [r3, #12]
 8008e92:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008e9c:	d147      	bne.n	8008f2e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	613b      	str	r3, [r7, #16]
 8008ea2:	4b25      	ldr	r3, [pc, #148]	; (8008f38 <HAL_HCD_MspInit+0xbc>)
 8008ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ea6:	4a24      	ldr	r2, [pc, #144]	; (8008f38 <HAL_HCD_MspInit+0xbc>)
 8008ea8:	f043 0301 	orr.w	r3, r3, #1
 8008eac:	6313      	str	r3, [r2, #48]	; 0x30
 8008eae:	4b22      	ldr	r3, [pc, #136]	; (8008f38 <HAL_HCD_MspInit+0xbc>)
 8008eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008eb2:	f003 0301 	and.w	r3, r3, #1
 8008eb6:	613b      	str	r3, [r7, #16]
 8008eb8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008eba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008ebe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008ec8:	f107 0314 	add.w	r3, r7, #20
 8008ecc:	4619      	mov	r1, r3
 8008ece:	481b      	ldr	r0, [pc, #108]	; (8008f3c <HAL_HCD_MspInit+0xc0>)
 8008ed0:	f7f9 fa56 	bl	8002380 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008ed4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008ed8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008eda:	2302      	movs	r3, #2
 8008edc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ede:	2300      	movs	r3, #0
 8008ee0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008ee6:	230a      	movs	r3, #10
 8008ee8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008eea:	f107 0314 	add.w	r3, r7, #20
 8008eee:	4619      	mov	r1, r3
 8008ef0:	4812      	ldr	r0, [pc, #72]	; (8008f3c <HAL_HCD_MspInit+0xc0>)
 8008ef2:	f7f9 fa45 	bl	8002380 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008ef6:	4b10      	ldr	r3, [pc, #64]	; (8008f38 <HAL_HCD_MspInit+0xbc>)
 8008ef8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008efa:	4a0f      	ldr	r2, [pc, #60]	; (8008f38 <HAL_HCD_MspInit+0xbc>)
 8008efc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f00:	6353      	str	r3, [r2, #52]	; 0x34
 8008f02:	2300      	movs	r3, #0
 8008f04:	60fb      	str	r3, [r7, #12]
 8008f06:	4b0c      	ldr	r3, [pc, #48]	; (8008f38 <HAL_HCD_MspInit+0xbc>)
 8008f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f0a:	4a0b      	ldr	r2, [pc, #44]	; (8008f38 <HAL_HCD_MspInit+0xbc>)
 8008f0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008f10:	6453      	str	r3, [r2, #68]	; 0x44
 8008f12:	4b09      	ldr	r3, [pc, #36]	; (8008f38 <HAL_HCD_MspInit+0xbc>)
 8008f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008f1a:	60fb      	str	r3, [r7, #12]
 8008f1c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008f1e:	2200      	movs	r2, #0
 8008f20:	2100      	movs	r1, #0
 8008f22:	2043      	movs	r0, #67	; 0x43
 8008f24:	f7f9 f9f5 	bl	8002312 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008f28:	2043      	movs	r0, #67	; 0x43
 8008f2a:	f7f9 fa0e 	bl	800234a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008f2e:	bf00      	nop
 8008f30:	3728      	adds	r7, #40	; 0x28
 8008f32:	46bd      	mov	sp, r7
 8008f34:	bd80      	pop	{r7, pc}
 8008f36:	bf00      	nop
 8008f38:	40023800 	.word	0x40023800
 8008f3c:	40020000 	.word	0x40020000

08008f40 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b082      	sub	sp, #8
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008f4e:	4618      	mov	r0, r3
 8008f50:	f7ff f8db 	bl	800810a <USBH_LL_IncTimer>
}
 8008f54:	bf00      	nop
 8008f56:	3708      	adds	r7, #8
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bd80      	pop	{r7, pc}

08008f5c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b082      	sub	sp, #8
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	f7ff f913 	bl	8008196 <USBH_LL_Connect>
}
 8008f70:	bf00      	nop
 8008f72:	3708      	adds	r7, #8
 8008f74:	46bd      	mov	sp, r7
 8008f76:	bd80      	pop	{r7, pc}

08008f78 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b082      	sub	sp, #8
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008f86:	4618      	mov	r0, r3
 8008f88:	f7ff f91c 	bl	80081c4 <USBH_LL_Disconnect>
}
 8008f8c:	bf00      	nop
 8008f8e:	3708      	adds	r7, #8
 8008f90:	46bd      	mov	sp, r7
 8008f92:	bd80      	pop	{r7, pc}

08008f94 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008f94:	b480      	push	{r7}
 8008f96:	b083      	sub	sp, #12
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
 8008f9c:	460b      	mov	r3, r1
 8008f9e:	70fb      	strb	r3, [r7, #3]
 8008fa0:	4613      	mov	r3, r2
 8008fa2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008fa4:	bf00      	nop
 8008fa6:	370c      	adds	r7, #12
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fae:	4770      	bx	lr

08008fb0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b082      	sub	sp, #8
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	f7ff f8cd 	bl	800815e <USBH_LL_PortEnabled>
}
 8008fc4:	bf00      	nop
 8008fc6:	3708      	adds	r7, #8
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	bd80      	pop	{r7, pc}

08008fcc <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b082      	sub	sp, #8
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008fda:	4618      	mov	r0, r3
 8008fdc:	f7ff f8cd 	bl	800817a <USBH_LL_PortDisabled>
}
 8008fe0:	bf00      	nop
 8008fe2:	3708      	adds	r7, #8
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bd80      	pop	{r7, pc}

08008fe8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b082      	sub	sp, #8
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008ff6:	2b01      	cmp	r3, #1
 8008ff8:	d12a      	bne.n	8009050 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008ffa:	4a18      	ldr	r2, [pc, #96]	; (800905c <USBH_LL_Init+0x74>)
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	4a15      	ldr	r2, [pc, #84]	; (800905c <USBH_LL_Init+0x74>)
 8009006:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800900a:	4b14      	ldr	r3, [pc, #80]	; (800905c <USBH_LL_Init+0x74>)
 800900c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009010:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8009012:	4b12      	ldr	r3, [pc, #72]	; (800905c <USBH_LL_Init+0x74>)
 8009014:	2208      	movs	r2, #8
 8009016:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8009018:	4b10      	ldr	r3, [pc, #64]	; (800905c <USBH_LL_Init+0x74>)
 800901a:	2201      	movs	r2, #1
 800901c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800901e:	4b0f      	ldr	r3, [pc, #60]	; (800905c <USBH_LL_Init+0x74>)
 8009020:	2200      	movs	r2, #0
 8009022:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8009024:	4b0d      	ldr	r3, [pc, #52]	; (800905c <USBH_LL_Init+0x74>)
 8009026:	2202      	movs	r2, #2
 8009028:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800902a:	4b0c      	ldr	r3, [pc, #48]	; (800905c <USBH_LL_Init+0x74>)
 800902c:	2200      	movs	r2, #0
 800902e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8009030:	480a      	ldr	r0, [pc, #40]	; (800905c <USBH_LL_Init+0x74>)
 8009032:	f7f9 fb72 	bl	800271a <HAL_HCD_Init>
 8009036:	4603      	mov	r3, r0
 8009038:	2b00      	cmp	r3, #0
 800903a:	d001      	beq.n	8009040 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800903c:	f7f8 f936 	bl	80012ac <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8009040:	4806      	ldr	r0, [pc, #24]	; (800905c <USBH_LL_Init+0x74>)
 8009042:	f7f9 ff56 	bl	8002ef2 <HAL_HCD_GetCurrentFrame>
 8009046:	4603      	mov	r3, r0
 8009048:	4619      	mov	r1, r3
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	f7ff f84e 	bl	80080ec <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8009050:	2300      	movs	r3, #0
}
 8009052:	4618      	mov	r0, r3
 8009054:	3708      	adds	r7, #8
 8009056:	46bd      	mov	sp, r7
 8009058:	bd80      	pop	{r7, pc}
 800905a:	bf00      	nop
 800905c:	200006ac 	.word	0x200006ac

08009060 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b084      	sub	sp, #16
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009068:	2300      	movs	r3, #0
 800906a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800906c:	2300      	movs	r3, #0
 800906e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009076:	4618      	mov	r0, r3
 8009078:	f7f9 fec5 	bl	8002e06 <HAL_HCD_Start>
 800907c:	4603      	mov	r3, r0
 800907e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009080:	7bfb      	ldrb	r3, [r7, #15]
 8009082:	4618      	mov	r0, r3
 8009084:	f000 f95c 	bl	8009340 <USBH_Get_USB_Status>
 8009088:	4603      	mov	r3, r0
 800908a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800908c:	7bbb      	ldrb	r3, [r7, #14]
}
 800908e:	4618      	mov	r0, r3
 8009090:	3710      	adds	r7, #16
 8009092:	46bd      	mov	sp, r7
 8009094:	bd80      	pop	{r7, pc}

08009096 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8009096:	b580      	push	{r7, lr}
 8009098:	b084      	sub	sp, #16
 800909a:	af00      	add	r7, sp, #0
 800909c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800909e:	2300      	movs	r3, #0
 80090a0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80090a2:	2300      	movs	r3, #0
 80090a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80090ac:	4618      	mov	r0, r3
 80090ae:	f7f9 fecd 	bl	8002e4c <HAL_HCD_Stop>
 80090b2:	4603      	mov	r3, r0
 80090b4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80090b6:	7bfb      	ldrb	r3, [r7, #15]
 80090b8:	4618      	mov	r0, r3
 80090ba:	f000 f941 	bl	8009340 <USBH_Get_USB_Status>
 80090be:	4603      	mov	r3, r0
 80090c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090c2:	7bbb      	ldrb	r3, [r7, #14]
}
 80090c4:	4618      	mov	r0, r3
 80090c6:	3710      	adds	r7, #16
 80090c8:	46bd      	mov	sp, r7
 80090ca:	bd80      	pop	{r7, pc}

080090cc <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b084      	sub	sp, #16
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80090d4:	2301      	movs	r3, #1
 80090d6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80090de:	4618      	mov	r0, r3
 80090e0:	f7f9 ff15 	bl	8002f0e <HAL_HCD_GetCurrentSpeed>
 80090e4:	4603      	mov	r3, r0
 80090e6:	2b02      	cmp	r3, #2
 80090e8:	d00c      	beq.n	8009104 <USBH_LL_GetSpeed+0x38>
 80090ea:	2b02      	cmp	r3, #2
 80090ec:	d80d      	bhi.n	800910a <USBH_LL_GetSpeed+0x3e>
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d002      	beq.n	80090f8 <USBH_LL_GetSpeed+0x2c>
 80090f2:	2b01      	cmp	r3, #1
 80090f4:	d003      	beq.n	80090fe <USBH_LL_GetSpeed+0x32>
 80090f6:	e008      	b.n	800910a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80090f8:	2300      	movs	r3, #0
 80090fa:	73fb      	strb	r3, [r7, #15]
    break;
 80090fc:	e008      	b.n	8009110 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80090fe:	2301      	movs	r3, #1
 8009100:	73fb      	strb	r3, [r7, #15]
    break;
 8009102:	e005      	b.n	8009110 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8009104:	2302      	movs	r3, #2
 8009106:	73fb      	strb	r3, [r7, #15]
    break;
 8009108:	e002      	b.n	8009110 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800910a:	2301      	movs	r3, #1
 800910c:	73fb      	strb	r3, [r7, #15]
    break;
 800910e:	bf00      	nop
  }
  return  speed;
 8009110:	7bfb      	ldrb	r3, [r7, #15]
}
 8009112:	4618      	mov	r0, r3
 8009114:	3710      	adds	r7, #16
 8009116:	46bd      	mov	sp, r7
 8009118:	bd80      	pop	{r7, pc}

0800911a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800911a:	b580      	push	{r7, lr}
 800911c:	b084      	sub	sp, #16
 800911e:	af00      	add	r7, sp, #0
 8009120:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009122:	2300      	movs	r3, #0
 8009124:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009126:	2300      	movs	r3, #0
 8009128:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009130:	4618      	mov	r0, r3
 8009132:	f7f9 fea8 	bl	8002e86 <HAL_HCD_ResetPort>
 8009136:	4603      	mov	r3, r0
 8009138:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800913a:	7bfb      	ldrb	r3, [r7, #15]
 800913c:	4618      	mov	r0, r3
 800913e:	f000 f8ff 	bl	8009340 <USBH_Get_USB_Status>
 8009142:	4603      	mov	r3, r0
 8009144:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009146:	7bbb      	ldrb	r3, [r7, #14]
}
 8009148:	4618      	mov	r0, r3
 800914a:	3710      	adds	r7, #16
 800914c:	46bd      	mov	sp, r7
 800914e:	bd80      	pop	{r7, pc}

08009150 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b082      	sub	sp, #8
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
 8009158:	460b      	mov	r3, r1
 800915a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009162:	78fa      	ldrb	r2, [r7, #3]
 8009164:	4611      	mov	r1, r2
 8009166:	4618      	mov	r0, r3
 8009168:	f7f9 feaf 	bl	8002eca <HAL_HCD_HC_GetXferCount>
 800916c:	4603      	mov	r3, r0
}
 800916e:	4618      	mov	r0, r3
 8009170:	3708      	adds	r7, #8
 8009172:	46bd      	mov	sp, r7
 8009174:	bd80      	pop	{r7, pc}

08009176 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009176:	b590      	push	{r4, r7, lr}
 8009178:	b089      	sub	sp, #36	; 0x24
 800917a:	af04      	add	r7, sp, #16
 800917c:	6078      	str	r0, [r7, #4]
 800917e:	4608      	mov	r0, r1
 8009180:	4611      	mov	r1, r2
 8009182:	461a      	mov	r2, r3
 8009184:	4603      	mov	r3, r0
 8009186:	70fb      	strb	r3, [r7, #3]
 8009188:	460b      	mov	r3, r1
 800918a:	70bb      	strb	r3, [r7, #2]
 800918c:	4613      	mov	r3, r2
 800918e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009190:	2300      	movs	r3, #0
 8009192:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009194:	2300      	movs	r3, #0
 8009196:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800919e:	787c      	ldrb	r4, [r7, #1]
 80091a0:	78ba      	ldrb	r2, [r7, #2]
 80091a2:	78f9      	ldrb	r1, [r7, #3]
 80091a4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80091a6:	9302      	str	r3, [sp, #8]
 80091a8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80091ac:	9301      	str	r3, [sp, #4]
 80091ae:	f897 3020 	ldrb.w	r3, [r7, #32]
 80091b2:	9300      	str	r3, [sp, #0]
 80091b4:	4623      	mov	r3, r4
 80091b6:	f7f9 fb12 	bl	80027de <HAL_HCD_HC_Init>
 80091ba:	4603      	mov	r3, r0
 80091bc:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80091be:	7bfb      	ldrb	r3, [r7, #15]
 80091c0:	4618      	mov	r0, r3
 80091c2:	f000 f8bd 	bl	8009340 <USBH_Get_USB_Status>
 80091c6:	4603      	mov	r3, r0
 80091c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80091ca:	7bbb      	ldrb	r3, [r7, #14]
}
 80091cc:	4618      	mov	r0, r3
 80091ce:	3714      	adds	r7, #20
 80091d0:	46bd      	mov	sp, r7
 80091d2:	bd90      	pop	{r4, r7, pc}

080091d4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b084      	sub	sp, #16
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
 80091dc:	460b      	mov	r3, r1
 80091de:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091e0:	2300      	movs	r3, #0
 80091e2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80091e4:	2300      	movs	r3, #0
 80091e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80091ee:	78fa      	ldrb	r2, [r7, #3]
 80091f0:	4611      	mov	r1, r2
 80091f2:	4618      	mov	r0, r3
 80091f4:	f7f9 fb82 	bl	80028fc <HAL_HCD_HC_Halt>
 80091f8:	4603      	mov	r3, r0
 80091fa:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80091fc:	7bfb      	ldrb	r3, [r7, #15]
 80091fe:	4618      	mov	r0, r3
 8009200:	f000 f89e 	bl	8009340 <USBH_Get_USB_Status>
 8009204:	4603      	mov	r3, r0
 8009206:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009208:	7bbb      	ldrb	r3, [r7, #14]
}
 800920a:	4618      	mov	r0, r3
 800920c:	3710      	adds	r7, #16
 800920e:	46bd      	mov	sp, r7
 8009210:	bd80      	pop	{r7, pc}

08009212 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8009212:	b590      	push	{r4, r7, lr}
 8009214:	b089      	sub	sp, #36	; 0x24
 8009216:	af04      	add	r7, sp, #16
 8009218:	6078      	str	r0, [r7, #4]
 800921a:	4608      	mov	r0, r1
 800921c:	4611      	mov	r1, r2
 800921e:	461a      	mov	r2, r3
 8009220:	4603      	mov	r3, r0
 8009222:	70fb      	strb	r3, [r7, #3]
 8009224:	460b      	mov	r3, r1
 8009226:	70bb      	strb	r3, [r7, #2]
 8009228:	4613      	mov	r3, r2
 800922a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800922c:	2300      	movs	r3, #0
 800922e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009230:	2300      	movs	r3, #0
 8009232:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800923a:	787c      	ldrb	r4, [r7, #1]
 800923c:	78ba      	ldrb	r2, [r7, #2]
 800923e:	78f9      	ldrb	r1, [r7, #3]
 8009240:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009244:	9303      	str	r3, [sp, #12]
 8009246:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009248:	9302      	str	r3, [sp, #8]
 800924a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800924c:	9301      	str	r3, [sp, #4]
 800924e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009252:	9300      	str	r3, [sp, #0]
 8009254:	4623      	mov	r3, r4
 8009256:	f7f9 fb75 	bl	8002944 <HAL_HCD_HC_SubmitRequest>
 800925a:	4603      	mov	r3, r0
 800925c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800925e:	7bfb      	ldrb	r3, [r7, #15]
 8009260:	4618      	mov	r0, r3
 8009262:	f000 f86d 	bl	8009340 <USBH_Get_USB_Status>
 8009266:	4603      	mov	r3, r0
 8009268:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800926a:	7bbb      	ldrb	r3, [r7, #14]
}
 800926c:	4618      	mov	r0, r3
 800926e:	3714      	adds	r7, #20
 8009270:	46bd      	mov	sp, r7
 8009272:	bd90      	pop	{r4, r7, pc}

08009274 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b082      	sub	sp, #8
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
 800927c:	460b      	mov	r3, r1
 800927e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009286:	78fa      	ldrb	r2, [r7, #3]
 8009288:	4611      	mov	r1, r2
 800928a:	4618      	mov	r0, r3
 800928c:	f7f9 fe09 	bl	8002ea2 <HAL_HCD_HC_GetURBState>
 8009290:	4603      	mov	r3, r0
}
 8009292:	4618      	mov	r0, r3
 8009294:	3708      	adds	r7, #8
 8009296:	46bd      	mov	sp, r7
 8009298:	bd80      	pop	{r7, pc}

0800929a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800929a:	b580      	push	{r7, lr}
 800929c:	b082      	sub	sp, #8
 800929e:	af00      	add	r7, sp, #0
 80092a0:	6078      	str	r0, [r7, #4]
 80092a2:	460b      	mov	r3, r1
 80092a4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80092ac:	2b01      	cmp	r3, #1
 80092ae:	d103      	bne.n	80092b8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80092b0:	78fb      	ldrb	r3, [r7, #3]
 80092b2:	4618      	mov	r0, r3
 80092b4:	f000 f870 	bl	8009398 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80092b8:	20c8      	movs	r0, #200	; 0xc8
 80092ba:	f7f8 fb2b 	bl	8001914 <HAL_Delay>
  return USBH_OK;
 80092be:	2300      	movs	r3, #0
}
 80092c0:	4618      	mov	r0, r3
 80092c2:	3708      	adds	r7, #8
 80092c4:	46bd      	mov	sp, r7
 80092c6:	bd80      	pop	{r7, pc}

080092c8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80092c8:	b480      	push	{r7}
 80092ca:	b085      	sub	sp, #20
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
 80092d0:	460b      	mov	r3, r1
 80092d2:	70fb      	strb	r3, [r7, #3]
 80092d4:	4613      	mov	r3, r2
 80092d6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80092de:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80092e0:	78fb      	ldrb	r3, [r7, #3]
 80092e2:	68fa      	ldr	r2, [r7, #12]
 80092e4:	212c      	movs	r1, #44	; 0x2c
 80092e6:	fb01 f303 	mul.w	r3, r1, r3
 80092ea:	4413      	add	r3, r2
 80092ec:	333b      	adds	r3, #59	; 0x3b
 80092ee:	781b      	ldrb	r3, [r3, #0]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d009      	beq.n	8009308 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80092f4:	78fb      	ldrb	r3, [r7, #3]
 80092f6:	68fa      	ldr	r2, [r7, #12]
 80092f8:	212c      	movs	r1, #44	; 0x2c
 80092fa:	fb01 f303 	mul.w	r3, r1, r3
 80092fe:	4413      	add	r3, r2
 8009300:	3354      	adds	r3, #84	; 0x54
 8009302:	78ba      	ldrb	r2, [r7, #2]
 8009304:	701a      	strb	r2, [r3, #0]
 8009306:	e008      	b.n	800931a <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009308:	78fb      	ldrb	r3, [r7, #3]
 800930a:	68fa      	ldr	r2, [r7, #12]
 800930c:	212c      	movs	r1, #44	; 0x2c
 800930e:	fb01 f303 	mul.w	r3, r1, r3
 8009312:	4413      	add	r3, r2
 8009314:	3355      	adds	r3, #85	; 0x55
 8009316:	78ba      	ldrb	r2, [r7, #2]
 8009318:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800931a:	2300      	movs	r3, #0
}
 800931c:	4618      	mov	r0, r3
 800931e:	3714      	adds	r7, #20
 8009320:	46bd      	mov	sp, r7
 8009322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009326:	4770      	bx	lr

08009328 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b082      	sub	sp, #8
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009330:	6878      	ldr	r0, [r7, #4]
 8009332:	f7f8 faef 	bl	8001914 <HAL_Delay>
}
 8009336:	bf00      	nop
 8009338:	3708      	adds	r7, #8
 800933a:	46bd      	mov	sp, r7
 800933c:	bd80      	pop	{r7, pc}
	...

08009340 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009340:	b480      	push	{r7}
 8009342:	b085      	sub	sp, #20
 8009344:	af00      	add	r7, sp, #0
 8009346:	4603      	mov	r3, r0
 8009348:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800934a:	2300      	movs	r3, #0
 800934c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800934e:	79fb      	ldrb	r3, [r7, #7]
 8009350:	2b03      	cmp	r3, #3
 8009352:	d817      	bhi.n	8009384 <USBH_Get_USB_Status+0x44>
 8009354:	a201      	add	r2, pc, #4	; (adr r2, 800935c <USBH_Get_USB_Status+0x1c>)
 8009356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800935a:	bf00      	nop
 800935c:	0800936d 	.word	0x0800936d
 8009360:	08009373 	.word	0x08009373
 8009364:	08009379 	.word	0x08009379
 8009368:	0800937f 	.word	0x0800937f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800936c:	2300      	movs	r3, #0
 800936e:	73fb      	strb	r3, [r7, #15]
    break;
 8009370:	e00b      	b.n	800938a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8009372:	2302      	movs	r3, #2
 8009374:	73fb      	strb	r3, [r7, #15]
    break;
 8009376:	e008      	b.n	800938a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009378:	2301      	movs	r3, #1
 800937a:	73fb      	strb	r3, [r7, #15]
    break;
 800937c:	e005      	b.n	800938a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800937e:	2302      	movs	r3, #2
 8009380:	73fb      	strb	r3, [r7, #15]
    break;
 8009382:	e002      	b.n	800938a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009384:	2302      	movs	r3, #2
 8009386:	73fb      	strb	r3, [r7, #15]
    break;
 8009388:	bf00      	nop
  }
  return usb_status;
 800938a:	7bfb      	ldrb	r3, [r7, #15]
}
 800938c:	4618      	mov	r0, r3
 800938e:	3714      	adds	r7, #20
 8009390:	46bd      	mov	sp, r7
 8009392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009396:	4770      	bx	lr

08009398 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b084      	sub	sp, #16
 800939c:	af00      	add	r7, sp, #0
 800939e:	4603      	mov	r3, r0
 80093a0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80093a2:	79fb      	ldrb	r3, [r7, #7]
 80093a4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80093a6:	79fb      	ldrb	r3, [r7, #7]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d102      	bne.n	80093b2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 80093ac:	2300      	movs	r3, #0
 80093ae:	73fb      	strb	r3, [r7, #15]
 80093b0:	e001      	b.n	80093b6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 80093b2:	2301      	movs	r3, #1
 80093b4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80093b6:	7bfb      	ldrb	r3, [r7, #15]
 80093b8:	461a      	mov	r2, r3
 80093ba:	2101      	movs	r1, #1
 80093bc:	4803      	ldr	r0, [pc, #12]	; (80093cc <MX_DriverVbusFS+0x34>)
 80093be:	f7f9 f993 	bl	80026e8 <HAL_GPIO_WritePin>
}
 80093c2:	bf00      	nop
 80093c4:	3710      	adds	r7, #16
 80093c6:	46bd      	mov	sp, r7
 80093c8:	bd80      	pop	{r7, pc}
 80093ca:	bf00      	nop
 80093cc:	40020800 	.word	0x40020800

080093d0 <__errno>:
 80093d0:	4b01      	ldr	r3, [pc, #4]	; (80093d8 <__errno+0x8>)
 80093d2:	6818      	ldr	r0, [r3, #0]
 80093d4:	4770      	bx	lr
 80093d6:	bf00      	nop
 80093d8:	20000044 	.word	0x20000044

080093dc <__libc_init_array>:
 80093dc:	b570      	push	{r4, r5, r6, lr}
 80093de:	4d0d      	ldr	r5, [pc, #52]	; (8009414 <__libc_init_array+0x38>)
 80093e0:	4c0d      	ldr	r4, [pc, #52]	; (8009418 <__libc_init_array+0x3c>)
 80093e2:	1b64      	subs	r4, r4, r5
 80093e4:	10a4      	asrs	r4, r4, #2
 80093e6:	2600      	movs	r6, #0
 80093e8:	42a6      	cmp	r6, r4
 80093ea:	d109      	bne.n	8009400 <__libc_init_array+0x24>
 80093ec:	4d0b      	ldr	r5, [pc, #44]	; (800941c <__libc_init_array+0x40>)
 80093ee:	4c0c      	ldr	r4, [pc, #48]	; (8009420 <__libc_init_array+0x44>)
 80093f0:	f000 fc5e 	bl	8009cb0 <_init>
 80093f4:	1b64      	subs	r4, r4, r5
 80093f6:	10a4      	asrs	r4, r4, #2
 80093f8:	2600      	movs	r6, #0
 80093fa:	42a6      	cmp	r6, r4
 80093fc:	d105      	bne.n	800940a <__libc_init_array+0x2e>
 80093fe:	bd70      	pop	{r4, r5, r6, pc}
 8009400:	f855 3b04 	ldr.w	r3, [r5], #4
 8009404:	4798      	blx	r3
 8009406:	3601      	adds	r6, #1
 8009408:	e7ee      	b.n	80093e8 <__libc_init_array+0xc>
 800940a:	f855 3b04 	ldr.w	r3, [r5], #4
 800940e:	4798      	blx	r3
 8009410:	3601      	adds	r6, #1
 8009412:	e7f2      	b.n	80093fa <__libc_init_array+0x1e>
 8009414:	08009d4c 	.word	0x08009d4c
 8009418:	08009d4c 	.word	0x08009d4c
 800941c:	08009d4c 	.word	0x08009d4c
 8009420:	08009d50 	.word	0x08009d50

08009424 <malloc>:
 8009424:	4b02      	ldr	r3, [pc, #8]	; (8009430 <malloc+0xc>)
 8009426:	4601      	mov	r1, r0
 8009428:	6818      	ldr	r0, [r3, #0]
 800942a:	f000 b863 	b.w	80094f4 <_malloc_r>
 800942e:	bf00      	nop
 8009430:	20000044 	.word	0x20000044

08009434 <free>:
 8009434:	4b02      	ldr	r3, [pc, #8]	; (8009440 <free+0xc>)
 8009436:	4601      	mov	r1, r0
 8009438:	6818      	ldr	r0, [r3, #0]
 800943a:	f000 b80b 	b.w	8009454 <_free_r>
 800943e:	bf00      	nop
 8009440:	20000044 	.word	0x20000044

08009444 <memset>:
 8009444:	4402      	add	r2, r0
 8009446:	4603      	mov	r3, r0
 8009448:	4293      	cmp	r3, r2
 800944a:	d100      	bne.n	800944e <memset+0xa>
 800944c:	4770      	bx	lr
 800944e:	f803 1b01 	strb.w	r1, [r3], #1
 8009452:	e7f9      	b.n	8009448 <memset+0x4>

08009454 <_free_r>:
 8009454:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009456:	2900      	cmp	r1, #0
 8009458:	d048      	beq.n	80094ec <_free_r+0x98>
 800945a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800945e:	9001      	str	r0, [sp, #4]
 8009460:	2b00      	cmp	r3, #0
 8009462:	f1a1 0404 	sub.w	r4, r1, #4
 8009466:	bfb8      	it	lt
 8009468:	18e4      	addlt	r4, r4, r3
 800946a:	f000 f8cd 	bl	8009608 <__malloc_lock>
 800946e:	4a20      	ldr	r2, [pc, #128]	; (80094f0 <_free_r+0x9c>)
 8009470:	9801      	ldr	r0, [sp, #4]
 8009472:	6813      	ldr	r3, [r2, #0]
 8009474:	4615      	mov	r5, r2
 8009476:	b933      	cbnz	r3, 8009486 <_free_r+0x32>
 8009478:	6063      	str	r3, [r4, #4]
 800947a:	6014      	str	r4, [r2, #0]
 800947c:	b003      	add	sp, #12
 800947e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009482:	f000 b8c7 	b.w	8009614 <__malloc_unlock>
 8009486:	42a3      	cmp	r3, r4
 8009488:	d90b      	bls.n	80094a2 <_free_r+0x4e>
 800948a:	6821      	ldr	r1, [r4, #0]
 800948c:	1862      	adds	r2, r4, r1
 800948e:	4293      	cmp	r3, r2
 8009490:	bf04      	itt	eq
 8009492:	681a      	ldreq	r2, [r3, #0]
 8009494:	685b      	ldreq	r3, [r3, #4]
 8009496:	6063      	str	r3, [r4, #4]
 8009498:	bf04      	itt	eq
 800949a:	1852      	addeq	r2, r2, r1
 800949c:	6022      	streq	r2, [r4, #0]
 800949e:	602c      	str	r4, [r5, #0]
 80094a0:	e7ec      	b.n	800947c <_free_r+0x28>
 80094a2:	461a      	mov	r2, r3
 80094a4:	685b      	ldr	r3, [r3, #4]
 80094a6:	b10b      	cbz	r3, 80094ac <_free_r+0x58>
 80094a8:	42a3      	cmp	r3, r4
 80094aa:	d9fa      	bls.n	80094a2 <_free_r+0x4e>
 80094ac:	6811      	ldr	r1, [r2, #0]
 80094ae:	1855      	adds	r5, r2, r1
 80094b0:	42a5      	cmp	r5, r4
 80094b2:	d10b      	bne.n	80094cc <_free_r+0x78>
 80094b4:	6824      	ldr	r4, [r4, #0]
 80094b6:	4421      	add	r1, r4
 80094b8:	1854      	adds	r4, r2, r1
 80094ba:	42a3      	cmp	r3, r4
 80094bc:	6011      	str	r1, [r2, #0]
 80094be:	d1dd      	bne.n	800947c <_free_r+0x28>
 80094c0:	681c      	ldr	r4, [r3, #0]
 80094c2:	685b      	ldr	r3, [r3, #4]
 80094c4:	6053      	str	r3, [r2, #4]
 80094c6:	4421      	add	r1, r4
 80094c8:	6011      	str	r1, [r2, #0]
 80094ca:	e7d7      	b.n	800947c <_free_r+0x28>
 80094cc:	d902      	bls.n	80094d4 <_free_r+0x80>
 80094ce:	230c      	movs	r3, #12
 80094d0:	6003      	str	r3, [r0, #0]
 80094d2:	e7d3      	b.n	800947c <_free_r+0x28>
 80094d4:	6825      	ldr	r5, [r4, #0]
 80094d6:	1961      	adds	r1, r4, r5
 80094d8:	428b      	cmp	r3, r1
 80094da:	bf04      	itt	eq
 80094dc:	6819      	ldreq	r1, [r3, #0]
 80094de:	685b      	ldreq	r3, [r3, #4]
 80094e0:	6063      	str	r3, [r4, #4]
 80094e2:	bf04      	itt	eq
 80094e4:	1949      	addeq	r1, r1, r5
 80094e6:	6021      	streq	r1, [r4, #0]
 80094e8:	6054      	str	r4, [r2, #4]
 80094ea:	e7c7      	b.n	800947c <_free_r+0x28>
 80094ec:	b003      	add	sp, #12
 80094ee:	bd30      	pop	{r4, r5, pc}
 80094f0:	200000ec 	.word	0x200000ec

080094f4 <_malloc_r>:
 80094f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094f6:	1ccd      	adds	r5, r1, #3
 80094f8:	f025 0503 	bic.w	r5, r5, #3
 80094fc:	3508      	adds	r5, #8
 80094fe:	2d0c      	cmp	r5, #12
 8009500:	bf38      	it	cc
 8009502:	250c      	movcc	r5, #12
 8009504:	2d00      	cmp	r5, #0
 8009506:	4606      	mov	r6, r0
 8009508:	db01      	blt.n	800950e <_malloc_r+0x1a>
 800950a:	42a9      	cmp	r1, r5
 800950c:	d903      	bls.n	8009516 <_malloc_r+0x22>
 800950e:	230c      	movs	r3, #12
 8009510:	6033      	str	r3, [r6, #0]
 8009512:	2000      	movs	r0, #0
 8009514:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009516:	f000 f877 	bl	8009608 <__malloc_lock>
 800951a:	4921      	ldr	r1, [pc, #132]	; (80095a0 <_malloc_r+0xac>)
 800951c:	680a      	ldr	r2, [r1, #0]
 800951e:	4614      	mov	r4, r2
 8009520:	b99c      	cbnz	r4, 800954a <_malloc_r+0x56>
 8009522:	4f20      	ldr	r7, [pc, #128]	; (80095a4 <_malloc_r+0xb0>)
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	b923      	cbnz	r3, 8009532 <_malloc_r+0x3e>
 8009528:	4621      	mov	r1, r4
 800952a:	4630      	mov	r0, r6
 800952c:	f000 f83c 	bl	80095a8 <_sbrk_r>
 8009530:	6038      	str	r0, [r7, #0]
 8009532:	4629      	mov	r1, r5
 8009534:	4630      	mov	r0, r6
 8009536:	f000 f837 	bl	80095a8 <_sbrk_r>
 800953a:	1c43      	adds	r3, r0, #1
 800953c:	d123      	bne.n	8009586 <_malloc_r+0x92>
 800953e:	230c      	movs	r3, #12
 8009540:	6033      	str	r3, [r6, #0]
 8009542:	4630      	mov	r0, r6
 8009544:	f000 f866 	bl	8009614 <__malloc_unlock>
 8009548:	e7e3      	b.n	8009512 <_malloc_r+0x1e>
 800954a:	6823      	ldr	r3, [r4, #0]
 800954c:	1b5b      	subs	r3, r3, r5
 800954e:	d417      	bmi.n	8009580 <_malloc_r+0x8c>
 8009550:	2b0b      	cmp	r3, #11
 8009552:	d903      	bls.n	800955c <_malloc_r+0x68>
 8009554:	6023      	str	r3, [r4, #0]
 8009556:	441c      	add	r4, r3
 8009558:	6025      	str	r5, [r4, #0]
 800955a:	e004      	b.n	8009566 <_malloc_r+0x72>
 800955c:	6863      	ldr	r3, [r4, #4]
 800955e:	42a2      	cmp	r2, r4
 8009560:	bf0c      	ite	eq
 8009562:	600b      	streq	r3, [r1, #0]
 8009564:	6053      	strne	r3, [r2, #4]
 8009566:	4630      	mov	r0, r6
 8009568:	f000 f854 	bl	8009614 <__malloc_unlock>
 800956c:	f104 000b 	add.w	r0, r4, #11
 8009570:	1d23      	adds	r3, r4, #4
 8009572:	f020 0007 	bic.w	r0, r0, #7
 8009576:	1ac2      	subs	r2, r0, r3
 8009578:	d0cc      	beq.n	8009514 <_malloc_r+0x20>
 800957a:	1a1b      	subs	r3, r3, r0
 800957c:	50a3      	str	r3, [r4, r2]
 800957e:	e7c9      	b.n	8009514 <_malloc_r+0x20>
 8009580:	4622      	mov	r2, r4
 8009582:	6864      	ldr	r4, [r4, #4]
 8009584:	e7cc      	b.n	8009520 <_malloc_r+0x2c>
 8009586:	1cc4      	adds	r4, r0, #3
 8009588:	f024 0403 	bic.w	r4, r4, #3
 800958c:	42a0      	cmp	r0, r4
 800958e:	d0e3      	beq.n	8009558 <_malloc_r+0x64>
 8009590:	1a21      	subs	r1, r4, r0
 8009592:	4630      	mov	r0, r6
 8009594:	f000 f808 	bl	80095a8 <_sbrk_r>
 8009598:	3001      	adds	r0, #1
 800959a:	d1dd      	bne.n	8009558 <_malloc_r+0x64>
 800959c:	e7cf      	b.n	800953e <_malloc_r+0x4a>
 800959e:	bf00      	nop
 80095a0:	200000ec 	.word	0x200000ec
 80095a4:	200000f0 	.word	0x200000f0

080095a8 <_sbrk_r>:
 80095a8:	b538      	push	{r3, r4, r5, lr}
 80095aa:	4d06      	ldr	r5, [pc, #24]	; (80095c4 <_sbrk_r+0x1c>)
 80095ac:	2300      	movs	r3, #0
 80095ae:	4604      	mov	r4, r0
 80095b0:	4608      	mov	r0, r1
 80095b2:	602b      	str	r3, [r5, #0]
 80095b4:	f7f8 f8ca 	bl	800174c <_sbrk>
 80095b8:	1c43      	adds	r3, r0, #1
 80095ba:	d102      	bne.n	80095c2 <_sbrk_r+0x1a>
 80095bc:	682b      	ldr	r3, [r5, #0]
 80095be:	b103      	cbz	r3, 80095c2 <_sbrk_r+0x1a>
 80095c0:	6023      	str	r3, [r4, #0]
 80095c2:	bd38      	pop	{r3, r4, r5, pc}
 80095c4:	200009b0 	.word	0x200009b0

080095c8 <_vsiprintf_r>:
 80095c8:	b500      	push	{lr}
 80095ca:	b09b      	sub	sp, #108	; 0x6c
 80095cc:	9100      	str	r1, [sp, #0]
 80095ce:	9104      	str	r1, [sp, #16]
 80095d0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80095d4:	9105      	str	r1, [sp, #20]
 80095d6:	9102      	str	r1, [sp, #8]
 80095d8:	4905      	ldr	r1, [pc, #20]	; (80095f0 <_vsiprintf_r+0x28>)
 80095da:	9103      	str	r1, [sp, #12]
 80095dc:	4669      	mov	r1, sp
 80095de:	f000 f87b 	bl	80096d8 <_svfiprintf_r>
 80095e2:	9b00      	ldr	r3, [sp, #0]
 80095e4:	2200      	movs	r2, #0
 80095e6:	701a      	strb	r2, [r3, #0]
 80095e8:	b01b      	add	sp, #108	; 0x6c
 80095ea:	f85d fb04 	ldr.w	pc, [sp], #4
 80095ee:	bf00      	nop
 80095f0:	ffff0208 	.word	0xffff0208

080095f4 <vsiprintf>:
 80095f4:	4613      	mov	r3, r2
 80095f6:	460a      	mov	r2, r1
 80095f8:	4601      	mov	r1, r0
 80095fa:	4802      	ldr	r0, [pc, #8]	; (8009604 <vsiprintf+0x10>)
 80095fc:	6800      	ldr	r0, [r0, #0]
 80095fe:	f7ff bfe3 	b.w	80095c8 <_vsiprintf_r>
 8009602:	bf00      	nop
 8009604:	20000044 	.word	0x20000044

08009608 <__malloc_lock>:
 8009608:	4801      	ldr	r0, [pc, #4]	; (8009610 <__malloc_lock+0x8>)
 800960a:	f000 baf9 	b.w	8009c00 <__retarget_lock_acquire_recursive>
 800960e:	bf00      	nop
 8009610:	200009b8 	.word	0x200009b8

08009614 <__malloc_unlock>:
 8009614:	4801      	ldr	r0, [pc, #4]	; (800961c <__malloc_unlock+0x8>)
 8009616:	f000 baf4 	b.w	8009c02 <__retarget_lock_release_recursive>
 800961a:	bf00      	nop
 800961c:	200009b8 	.word	0x200009b8

08009620 <__ssputs_r>:
 8009620:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009624:	688e      	ldr	r6, [r1, #8]
 8009626:	429e      	cmp	r6, r3
 8009628:	4682      	mov	sl, r0
 800962a:	460c      	mov	r4, r1
 800962c:	4690      	mov	r8, r2
 800962e:	461f      	mov	r7, r3
 8009630:	d838      	bhi.n	80096a4 <__ssputs_r+0x84>
 8009632:	898a      	ldrh	r2, [r1, #12]
 8009634:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009638:	d032      	beq.n	80096a0 <__ssputs_r+0x80>
 800963a:	6825      	ldr	r5, [r4, #0]
 800963c:	6909      	ldr	r1, [r1, #16]
 800963e:	eba5 0901 	sub.w	r9, r5, r1
 8009642:	6965      	ldr	r5, [r4, #20]
 8009644:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009648:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800964c:	3301      	adds	r3, #1
 800964e:	444b      	add	r3, r9
 8009650:	106d      	asrs	r5, r5, #1
 8009652:	429d      	cmp	r5, r3
 8009654:	bf38      	it	cc
 8009656:	461d      	movcc	r5, r3
 8009658:	0553      	lsls	r3, r2, #21
 800965a:	d531      	bpl.n	80096c0 <__ssputs_r+0xa0>
 800965c:	4629      	mov	r1, r5
 800965e:	f7ff ff49 	bl	80094f4 <_malloc_r>
 8009662:	4606      	mov	r6, r0
 8009664:	b950      	cbnz	r0, 800967c <__ssputs_r+0x5c>
 8009666:	230c      	movs	r3, #12
 8009668:	f8ca 3000 	str.w	r3, [sl]
 800966c:	89a3      	ldrh	r3, [r4, #12]
 800966e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009672:	81a3      	strh	r3, [r4, #12]
 8009674:	f04f 30ff 	mov.w	r0, #4294967295
 8009678:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800967c:	6921      	ldr	r1, [r4, #16]
 800967e:	464a      	mov	r2, r9
 8009680:	f000 fac0 	bl	8009c04 <memcpy>
 8009684:	89a3      	ldrh	r3, [r4, #12]
 8009686:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800968a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800968e:	81a3      	strh	r3, [r4, #12]
 8009690:	6126      	str	r6, [r4, #16]
 8009692:	6165      	str	r5, [r4, #20]
 8009694:	444e      	add	r6, r9
 8009696:	eba5 0509 	sub.w	r5, r5, r9
 800969a:	6026      	str	r6, [r4, #0]
 800969c:	60a5      	str	r5, [r4, #8]
 800969e:	463e      	mov	r6, r7
 80096a0:	42be      	cmp	r6, r7
 80096a2:	d900      	bls.n	80096a6 <__ssputs_r+0x86>
 80096a4:	463e      	mov	r6, r7
 80096a6:	4632      	mov	r2, r6
 80096a8:	6820      	ldr	r0, [r4, #0]
 80096aa:	4641      	mov	r1, r8
 80096ac:	f000 fab8 	bl	8009c20 <memmove>
 80096b0:	68a3      	ldr	r3, [r4, #8]
 80096b2:	6822      	ldr	r2, [r4, #0]
 80096b4:	1b9b      	subs	r3, r3, r6
 80096b6:	4432      	add	r2, r6
 80096b8:	60a3      	str	r3, [r4, #8]
 80096ba:	6022      	str	r2, [r4, #0]
 80096bc:	2000      	movs	r0, #0
 80096be:	e7db      	b.n	8009678 <__ssputs_r+0x58>
 80096c0:	462a      	mov	r2, r5
 80096c2:	f000 fac7 	bl	8009c54 <_realloc_r>
 80096c6:	4606      	mov	r6, r0
 80096c8:	2800      	cmp	r0, #0
 80096ca:	d1e1      	bne.n	8009690 <__ssputs_r+0x70>
 80096cc:	6921      	ldr	r1, [r4, #16]
 80096ce:	4650      	mov	r0, sl
 80096d0:	f7ff fec0 	bl	8009454 <_free_r>
 80096d4:	e7c7      	b.n	8009666 <__ssputs_r+0x46>
	...

080096d8 <_svfiprintf_r>:
 80096d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096dc:	4698      	mov	r8, r3
 80096de:	898b      	ldrh	r3, [r1, #12]
 80096e0:	061b      	lsls	r3, r3, #24
 80096e2:	b09d      	sub	sp, #116	; 0x74
 80096e4:	4607      	mov	r7, r0
 80096e6:	460d      	mov	r5, r1
 80096e8:	4614      	mov	r4, r2
 80096ea:	d50e      	bpl.n	800970a <_svfiprintf_r+0x32>
 80096ec:	690b      	ldr	r3, [r1, #16]
 80096ee:	b963      	cbnz	r3, 800970a <_svfiprintf_r+0x32>
 80096f0:	2140      	movs	r1, #64	; 0x40
 80096f2:	f7ff feff 	bl	80094f4 <_malloc_r>
 80096f6:	6028      	str	r0, [r5, #0]
 80096f8:	6128      	str	r0, [r5, #16]
 80096fa:	b920      	cbnz	r0, 8009706 <_svfiprintf_r+0x2e>
 80096fc:	230c      	movs	r3, #12
 80096fe:	603b      	str	r3, [r7, #0]
 8009700:	f04f 30ff 	mov.w	r0, #4294967295
 8009704:	e0d1      	b.n	80098aa <_svfiprintf_r+0x1d2>
 8009706:	2340      	movs	r3, #64	; 0x40
 8009708:	616b      	str	r3, [r5, #20]
 800970a:	2300      	movs	r3, #0
 800970c:	9309      	str	r3, [sp, #36]	; 0x24
 800970e:	2320      	movs	r3, #32
 8009710:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009714:	f8cd 800c 	str.w	r8, [sp, #12]
 8009718:	2330      	movs	r3, #48	; 0x30
 800971a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80098c4 <_svfiprintf_r+0x1ec>
 800971e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009722:	f04f 0901 	mov.w	r9, #1
 8009726:	4623      	mov	r3, r4
 8009728:	469a      	mov	sl, r3
 800972a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800972e:	b10a      	cbz	r2, 8009734 <_svfiprintf_r+0x5c>
 8009730:	2a25      	cmp	r2, #37	; 0x25
 8009732:	d1f9      	bne.n	8009728 <_svfiprintf_r+0x50>
 8009734:	ebba 0b04 	subs.w	fp, sl, r4
 8009738:	d00b      	beq.n	8009752 <_svfiprintf_r+0x7a>
 800973a:	465b      	mov	r3, fp
 800973c:	4622      	mov	r2, r4
 800973e:	4629      	mov	r1, r5
 8009740:	4638      	mov	r0, r7
 8009742:	f7ff ff6d 	bl	8009620 <__ssputs_r>
 8009746:	3001      	adds	r0, #1
 8009748:	f000 80aa 	beq.w	80098a0 <_svfiprintf_r+0x1c8>
 800974c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800974e:	445a      	add	r2, fp
 8009750:	9209      	str	r2, [sp, #36]	; 0x24
 8009752:	f89a 3000 	ldrb.w	r3, [sl]
 8009756:	2b00      	cmp	r3, #0
 8009758:	f000 80a2 	beq.w	80098a0 <_svfiprintf_r+0x1c8>
 800975c:	2300      	movs	r3, #0
 800975e:	f04f 32ff 	mov.w	r2, #4294967295
 8009762:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009766:	f10a 0a01 	add.w	sl, sl, #1
 800976a:	9304      	str	r3, [sp, #16]
 800976c:	9307      	str	r3, [sp, #28]
 800976e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009772:	931a      	str	r3, [sp, #104]	; 0x68
 8009774:	4654      	mov	r4, sl
 8009776:	2205      	movs	r2, #5
 8009778:	f814 1b01 	ldrb.w	r1, [r4], #1
 800977c:	4851      	ldr	r0, [pc, #324]	; (80098c4 <_svfiprintf_r+0x1ec>)
 800977e:	f7f6 fd2f 	bl	80001e0 <memchr>
 8009782:	9a04      	ldr	r2, [sp, #16]
 8009784:	b9d8      	cbnz	r0, 80097be <_svfiprintf_r+0xe6>
 8009786:	06d0      	lsls	r0, r2, #27
 8009788:	bf44      	itt	mi
 800978a:	2320      	movmi	r3, #32
 800978c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009790:	0711      	lsls	r1, r2, #28
 8009792:	bf44      	itt	mi
 8009794:	232b      	movmi	r3, #43	; 0x2b
 8009796:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800979a:	f89a 3000 	ldrb.w	r3, [sl]
 800979e:	2b2a      	cmp	r3, #42	; 0x2a
 80097a0:	d015      	beq.n	80097ce <_svfiprintf_r+0xf6>
 80097a2:	9a07      	ldr	r2, [sp, #28]
 80097a4:	4654      	mov	r4, sl
 80097a6:	2000      	movs	r0, #0
 80097a8:	f04f 0c0a 	mov.w	ip, #10
 80097ac:	4621      	mov	r1, r4
 80097ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80097b2:	3b30      	subs	r3, #48	; 0x30
 80097b4:	2b09      	cmp	r3, #9
 80097b6:	d94e      	bls.n	8009856 <_svfiprintf_r+0x17e>
 80097b8:	b1b0      	cbz	r0, 80097e8 <_svfiprintf_r+0x110>
 80097ba:	9207      	str	r2, [sp, #28]
 80097bc:	e014      	b.n	80097e8 <_svfiprintf_r+0x110>
 80097be:	eba0 0308 	sub.w	r3, r0, r8
 80097c2:	fa09 f303 	lsl.w	r3, r9, r3
 80097c6:	4313      	orrs	r3, r2
 80097c8:	9304      	str	r3, [sp, #16]
 80097ca:	46a2      	mov	sl, r4
 80097cc:	e7d2      	b.n	8009774 <_svfiprintf_r+0x9c>
 80097ce:	9b03      	ldr	r3, [sp, #12]
 80097d0:	1d19      	adds	r1, r3, #4
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	9103      	str	r1, [sp, #12]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	bfbb      	ittet	lt
 80097da:	425b      	neglt	r3, r3
 80097dc:	f042 0202 	orrlt.w	r2, r2, #2
 80097e0:	9307      	strge	r3, [sp, #28]
 80097e2:	9307      	strlt	r3, [sp, #28]
 80097e4:	bfb8      	it	lt
 80097e6:	9204      	strlt	r2, [sp, #16]
 80097e8:	7823      	ldrb	r3, [r4, #0]
 80097ea:	2b2e      	cmp	r3, #46	; 0x2e
 80097ec:	d10c      	bne.n	8009808 <_svfiprintf_r+0x130>
 80097ee:	7863      	ldrb	r3, [r4, #1]
 80097f0:	2b2a      	cmp	r3, #42	; 0x2a
 80097f2:	d135      	bne.n	8009860 <_svfiprintf_r+0x188>
 80097f4:	9b03      	ldr	r3, [sp, #12]
 80097f6:	1d1a      	adds	r2, r3, #4
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	9203      	str	r2, [sp, #12]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	bfb8      	it	lt
 8009800:	f04f 33ff 	movlt.w	r3, #4294967295
 8009804:	3402      	adds	r4, #2
 8009806:	9305      	str	r3, [sp, #20]
 8009808:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80098d4 <_svfiprintf_r+0x1fc>
 800980c:	7821      	ldrb	r1, [r4, #0]
 800980e:	2203      	movs	r2, #3
 8009810:	4650      	mov	r0, sl
 8009812:	f7f6 fce5 	bl	80001e0 <memchr>
 8009816:	b140      	cbz	r0, 800982a <_svfiprintf_r+0x152>
 8009818:	2340      	movs	r3, #64	; 0x40
 800981a:	eba0 000a 	sub.w	r0, r0, sl
 800981e:	fa03 f000 	lsl.w	r0, r3, r0
 8009822:	9b04      	ldr	r3, [sp, #16]
 8009824:	4303      	orrs	r3, r0
 8009826:	3401      	adds	r4, #1
 8009828:	9304      	str	r3, [sp, #16]
 800982a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800982e:	4826      	ldr	r0, [pc, #152]	; (80098c8 <_svfiprintf_r+0x1f0>)
 8009830:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009834:	2206      	movs	r2, #6
 8009836:	f7f6 fcd3 	bl	80001e0 <memchr>
 800983a:	2800      	cmp	r0, #0
 800983c:	d038      	beq.n	80098b0 <_svfiprintf_r+0x1d8>
 800983e:	4b23      	ldr	r3, [pc, #140]	; (80098cc <_svfiprintf_r+0x1f4>)
 8009840:	bb1b      	cbnz	r3, 800988a <_svfiprintf_r+0x1b2>
 8009842:	9b03      	ldr	r3, [sp, #12]
 8009844:	3307      	adds	r3, #7
 8009846:	f023 0307 	bic.w	r3, r3, #7
 800984a:	3308      	adds	r3, #8
 800984c:	9303      	str	r3, [sp, #12]
 800984e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009850:	4433      	add	r3, r6
 8009852:	9309      	str	r3, [sp, #36]	; 0x24
 8009854:	e767      	b.n	8009726 <_svfiprintf_r+0x4e>
 8009856:	fb0c 3202 	mla	r2, ip, r2, r3
 800985a:	460c      	mov	r4, r1
 800985c:	2001      	movs	r0, #1
 800985e:	e7a5      	b.n	80097ac <_svfiprintf_r+0xd4>
 8009860:	2300      	movs	r3, #0
 8009862:	3401      	adds	r4, #1
 8009864:	9305      	str	r3, [sp, #20]
 8009866:	4619      	mov	r1, r3
 8009868:	f04f 0c0a 	mov.w	ip, #10
 800986c:	4620      	mov	r0, r4
 800986e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009872:	3a30      	subs	r2, #48	; 0x30
 8009874:	2a09      	cmp	r2, #9
 8009876:	d903      	bls.n	8009880 <_svfiprintf_r+0x1a8>
 8009878:	2b00      	cmp	r3, #0
 800987a:	d0c5      	beq.n	8009808 <_svfiprintf_r+0x130>
 800987c:	9105      	str	r1, [sp, #20]
 800987e:	e7c3      	b.n	8009808 <_svfiprintf_r+0x130>
 8009880:	fb0c 2101 	mla	r1, ip, r1, r2
 8009884:	4604      	mov	r4, r0
 8009886:	2301      	movs	r3, #1
 8009888:	e7f0      	b.n	800986c <_svfiprintf_r+0x194>
 800988a:	ab03      	add	r3, sp, #12
 800988c:	9300      	str	r3, [sp, #0]
 800988e:	462a      	mov	r2, r5
 8009890:	4b0f      	ldr	r3, [pc, #60]	; (80098d0 <_svfiprintf_r+0x1f8>)
 8009892:	a904      	add	r1, sp, #16
 8009894:	4638      	mov	r0, r7
 8009896:	f3af 8000 	nop.w
 800989a:	1c42      	adds	r2, r0, #1
 800989c:	4606      	mov	r6, r0
 800989e:	d1d6      	bne.n	800984e <_svfiprintf_r+0x176>
 80098a0:	89ab      	ldrh	r3, [r5, #12]
 80098a2:	065b      	lsls	r3, r3, #25
 80098a4:	f53f af2c 	bmi.w	8009700 <_svfiprintf_r+0x28>
 80098a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80098aa:	b01d      	add	sp, #116	; 0x74
 80098ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098b0:	ab03      	add	r3, sp, #12
 80098b2:	9300      	str	r3, [sp, #0]
 80098b4:	462a      	mov	r2, r5
 80098b6:	4b06      	ldr	r3, [pc, #24]	; (80098d0 <_svfiprintf_r+0x1f8>)
 80098b8:	a904      	add	r1, sp, #16
 80098ba:	4638      	mov	r0, r7
 80098bc:	f000 f87a 	bl	80099b4 <_printf_i>
 80098c0:	e7eb      	b.n	800989a <_svfiprintf_r+0x1c2>
 80098c2:	bf00      	nop
 80098c4:	08009d10 	.word	0x08009d10
 80098c8:	08009d1a 	.word	0x08009d1a
 80098cc:	00000000 	.word	0x00000000
 80098d0:	08009621 	.word	0x08009621
 80098d4:	08009d16 	.word	0x08009d16

080098d8 <_printf_common>:
 80098d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098dc:	4616      	mov	r6, r2
 80098de:	4699      	mov	r9, r3
 80098e0:	688a      	ldr	r2, [r1, #8]
 80098e2:	690b      	ldr	r3, [r1, #16]
 80098e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80098e8:	4293      	cmp	r3, r2
 80098ea:	bfb8      	it	lt
 80098ec:	4613      	movlt	r3, r2
 80098ee:	6033      	str	r3, [r6, #0]
 80098f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80098f4:	4607      	mov	r7, r0
 80098f6:	460c      	mov	r4, r1
 80098f8:	b10a      	cbz	r2, 80098fe <_printf_common+0x26>
 80098fa:	3301      	adds	r3, #1
 80098fc:	6033      	str	r3, [r6, #0]
 80098fe:	6823      	ldr	r3, [r4, #0]
 8009900:	0699      	lsls	r1, r3, #26
 8009902:	bf42      	ittt	mi
 8009904:	6833      	ldrmi	r3, [r6, #0]
 8009906:	3302      	addmi	r3, #2
 8009908:	6033      	strmi	r3, [r6, #0]
 800990a:	6825      	ldr	r5, [r4, #0]
 800990c:	f015 0506 	ands.w	r5, r5, #6
 8009910:	d106      	bne.n	8009920 <_printf_common+0x48>
 8009912:	f104 0a19 	add.w	sl, r4, #25
 8009916:	68e3      	ldr	r3, [r4, #12]
 8009918:	6832      	ldr	r2, [r6, #0]
 800991a:	1a9b      	subs	r3, r3, r2
 800991c:	42ab      	cmp	r3, r5
 800991e:	dc26      	bgt.n	800996e <_printf_common+0x96>
 8009920:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009924:	1e13      	subs	r3, r2, #0
 8009926:	6822      	ldr	r2, [r4, #0]
 8009928:	bf18      	it	ne
 800992a:	2301      	movne	r3, #1
 800992c:	0692      	lsls	r2, r2, #26
 800992e:	d42b      	bmi.n	8009988 <_printf_common+0xb0>
 8009930:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009934:	4649      	mov	r1, r9
 8009936:	4638      	mov	r0, r7
 8009938:	47c0      	blx	r8
 800993a:	3001      	adds	r0, #1
 800993c:	d01e      	beq.n	800997c <_printf_common+0xa4>
 800993e:	6823      	ldr	r3, [r4, #0]
 8009940:	68e5      	ldr	r5, [r4, #12]
 8009942:	6832      	ldr	r2, [r6, #0]
 8009944:	f003 0306 	and.w	r3, r3, #6
 8009948:	2b04      	cmp	r3, #4
 800994a:	bf08      	it	eq
 800994c:	1aad      	subeq	r5, r5, r2
 800994e:	68a3      	ldr	r3, [r4, #8]
 8009950:	6922      	ldr	r2, [r4, #16]
 8009952:	bf0c      	ite	eq
 8009954:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009958:	2500      	movne	r5, #0
 800995a:	4293      	cmp	r3, r2
 800995c:	bfc4      	itt	gt
 800995e:	1a9b      	subgt	r3, r3, r2
 8009960:	18ed      	addgt	r5, r5, r3
 8009962:	2600      	movs	r6, #0
 8009964:	341a      	adds	r4, #26
 8009966:	42b5      	cmp	r5, r6
 8009968:	d11a      	bne.n	80099a0 <_printf_common+0xc8>
 800996a:	2000      	movs	r0, #0
 800996c:	e008      	b.n	8009980 <_printf_common+0xa8>
 800996e:	2301      	movs	r3, #1
 8009970:	4652      	mov	r2, sl
 8009972:	4649      	mov	r1, r9
 8009974:	4638      	mov	r0, r7
 8009976:	47c0      	blx	r8
 8009978:	3001      	adds	r0, #1
 800997a:	d103      	bne.n	8009984 <_printf_common+0xac>
 800997c:	f04f 30ff 	mov.w	r0, #4294967295
 8009980:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009984:	3501      	adds	r5, #1
 8009986:	e7c6      	b.n	8009916 <_printf_common+0x3e>
 8009988:	18e1      	adds	r1, r4, r3
 800998a:	1c5a      	adds	r2, r3, #1
 800998c:	2030      	movs	r0, #48	; 0x30
 800998e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009992:	4422      	add	r2, r4
 8009994:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009998:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800999c:	3302      	adds	r3, #2
 800999e:	e7c7      	b.n	8009930 <_printf_common+0x58>
 80099a0:	2301      	movs	r3, #1
 80099a2:	4622      	mov	r2, r4
 80099a4:	4649      	mov	r1, r9
 80099a6:	4638      	mov	r0, r7
 80099a8:	47c0      	blx	r8
 80099aa:	3001      	adds	r0, #1
 80099ac:	d0e6      	beq.n	800997c <_printf_common+0xa4>
 80099ae:	3601      	adds	r6, #1
 80099b0:	e7d9      	b.n	8009966 <_printf_common+0x8e>
	...

080099b4 <_printf_i>:
 80099b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80099b8:	460c      	mov	r4, r1
 80099ba:	4691      	mov	r9, r2
 80099bc:	7e27      	ldrb	r7, [r4, #24]
 80099be:	990c      	ldr	r1, [sp, #48]	; 0x30
 80099c0:	2f78      	cmp	r7, #120	; 0x78
 80099c2:	4680      	mov	r8, r0
 80099c4:	469a      	mov	sl, r3
 80099c6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80099ca:	d807      	bhi.n	80099dc <_printf_i+0x28>
 80099cc:	2f62      	cmp	r7, #98	; 0x62
 80099ce:	d80a      	bhi.n	80099e6 <_printf_i+0x32>
 80099d0:	2f00      	cmp	r7, #0
 80099d2:	f000 80d8 	beq.w	8009b86 <_printf_i+0x1d2>
 80099d6:	2f58      	cmp	r7, #88	; 0x58
 80099d8:	f000 80a3 	beq.w	8009b22 <_printf_i+0x16e>
 80099dc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80099e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80099e4:	e03a      	b.n	8009a5c <_printf_i+0xa8>
 80099e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80099ea:	2b15      	cmp	r3, #21
 80099ec:	d8f6      	bhi.n	80099dc <_printf_i+0x28>
 80099ee:	a001      	add	r0, pc, #4	; (adr r0, 80099f4 <_printf_i+0x40>)
 80099f0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80099f4:	08009a4d 	.word	0x08009a4d
 80099f8:	08009a61 	.word	0x08009a61
 80099fc:	080099dd 	.word	0x080099dd
 8009a00:	080099dd 	.word	0x080099dd
 8009a04:	080099dd 	.word	0x080099dd
 8009a08:	080099dd 	.word	0x080099dd
 8009a0c:	08009a61 	.word	0x08009a61
 8009a10:	080099dd 	.word	0x080099dd
 8009a14:	080099dd 	.word	0x080099dd
 8009a18:	080099dd 	.word	0x080099dd
 8009a1c:	080099dd 	.word	0x080099dd
 8009a20:	08009b6d 	.word	0x08009b6d
 8009a24:	08009a91 	.word	0x08009a91
 8009a28:	08009b4f 	.word	0x08009b4f
 8009a2c:	080099dd 	.word	0x080099dd
 8009a30:	080099dd 	.word	0x080099dd
 8009a34:	08009b8f 	.word	0x08009b8f
 8009a38:	080099dd 	.word	0x080099dd
 8009a3c:	08009a91 	.word	0x08009a91
 8009a40:	080099dd 	.word	0x080099dd
 8009a44:	080099dd 	.word	0x080099dd
 8009a48:	08009b57 	.word	0x08009b57
 8009a4c:	680b      	ldr	r3, [r1, #0]
 8009a4e:	1d1a      	adds	r2, r3, #4
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	600a      	str	r2, [r1, #0]
 8009a54:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009a58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009a5c:	2301      	movs	r3, #1
 8009a5e:	e0a3      	b.n	8009ba8 <_printf_i+0x1f4>
 8009a60:	6825      	ldr	r5, [r4, #0]
 8009a62:	6808      	ldr	r0, [r1, #0]
 8009a64:	062e      	lsls	r6, r5, #24
 8009a66:	f100 0304 	add.w	r3, r0, #4
 8009a6a:	d50a      	bpl.n	8009a82 <_printf_i+0xce>
 8009a6c:	6805      	ldr	r5, [r0, #0]
 8009a6e:	600b      	str	r3, [r1, #0]
 8009a70:	2d00      	cmp	r5, #0
 8009a72:	da03      	bge.n	8009a7c <_printf_i+0xc8>
 8009a74:	232d      	movs	r3, #45	; 0x2d
 8009a76:	426d      	negs	r5, r5
 8009a78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a7c:	485e      	ldr	r0, [pc, #376]	; (8009bf8 <_printf_i+0x244>)
 8009a7e:	230a      	movs	r3, #10
 8009a80:	e019      	b.n	8009ab6 <_printf_i+0x102>
 8009a82:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009a86:	6805      	ldr	r5, [r0, #0]
 8009a88:	600b      	str	r3, [r1, #0]
 8009a8a:	bf18      	it	ne
 8009a8c:	b22d      	sxthne	r5, r5
 8009a8e:	e7ef      	b.n	8009a70 <_printf_i+0xbc>
 8009a90:	680b      	ldr	r3, [r1, #0]
 8009a92:	6825      	ldr	r5, [r4, #0]
 8009a94:	1d18      	adds	r0, r3, #4
 8009a96:	6008      	str	r0, [r1, #0]
 8009a98:	0628      	lsls	r0, r5, #24
 8009a9a:	d501      	bpl.n	8009aa0 <_printf_i+0xec>
 8009a9c:	681d      	ldr	r5, [r3, #0]
 8009a9e:	e002      	b.n	8009aa6 <_printf_i+0xf2>
 8009aa0:	0669      	lsls	r1, r5, #25
 8009aa2:	d5fb      	bpl.n	8009a9c <_printf_i+0xe8>
 8009aa4:	881d      	ldrh	r5, [r3, #0]
 8009aa6:	4854      	ldr	r0, [pc, #336]	; (8009bf8 <_printf_i+0x244>)
 8009aa8:	2f6f      	cmp	r7, #111	; 0x6f
 8009aaa:	bf0c      	ite	eq
 8009aac:	2308      	moveq	r3, #8
 8009aae:	230a      	movne	r3, #10
 8009ab0:	2100      	movs	r1, #0
 8009ab2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009ab6:	6866      	ldr	r6, [r4, #4]
 8009ab8:	60a6      	str	r6, [r4, #8]
 8009aba:	2e00      	cmp	r6, #0
 8009abc:	bfa2      	ittt	ge
 8009abe:	6821      	ldrge	r1, [r4, #0]
 8009ac0:	f021 0104 	bicge.w	r1, r1, #4
 8009ac4:	6021      	strge	r1, [r4, #0]
 8009ac6:	b90d      	cbnz	r5, 8009acc <_printf_i+0x118>
 8009ac8:	2e00      	cmp	r6, #0
 8009aca:	d04d      	beq.n	8009b68 <_printf_i+0x1b4>
 8009acc:	4616      	mov	r6, r2
 8009ace:	fbb5 f1f3 	udiv	r1, r5, r3
 8009ad2:	fb03 5711 	mls	r7, r3, r1, r5
 8009ad6:	5dc7      	ldrb	r7, [r0, r7]
 8009ad8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009adc:	462f      	mov	r7, r5
 8009ade:	42bb      	cmp	r3, r7
 8009ae0:	460d      	mov	r5, r1
 8009ae2:	d9f4      	bls.n	8009ace <_printf_i+0x11a>
 8009ae4:	2b08      	cmp	r3, #8
 8009ae6:	d10b      	bne.n	8009b00 <_printf_i+0x14c>
 8009ae8:	6823      	ldr	r3, [r4, #0]
 8009aea:	07df      	lsls	r7, r3, #31
 8009aec:	d508      	bpl.n	8009b00 <_printf_i+0x14c>
 8009aee:	6923      	ldr	r3, [r4, #16]
 8009af0:	6861      	ldr	r1, [r4, #4]
 8009af2:	4299      	cmp	r1, r3
 8009af4:	bfde      	ittt	le
 8009af6:	2330      	movle	r3, #48	; 0x30
 8009af8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009afc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009b00:	1b92      	subs	r2, r2, r6
 8009b02:	6122      	str	r2, [r4, #16]
 8009b04:	f8cd a000 	str.w	sl, [sp]
 8009b08:	464b      	mov	r3, r9
 8009b0a:	aa03      	add	r2, sp, #12
 8009b0c:	4621      	mov	r1, r4
 8009b0e:	4640      	mov	r0, r8
 8009b10:	f7ff fee2 	bl	80098d8 <_printf_common>
 8009b14:	3001      	adds	r0, #1
 8009b16:	d14c      	bne.n	8009bb2 <_printf_i+0x1fe>
 8009b18:	f04f 30ff 	mov.w	r0, #4294967295
 8009b1c:	b004      	add	sp, #16
 8009b1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b22:	4835      	ldr	r0, [pc, #212]	; (8009bf8 <_printf_i+0x244>)
 8009b24:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009b28:	6823      	ldr	r3, [r4, #0]
 8009b2a:	680e      	ldr	r6, [r1, #0]
 8009b2c:	061f      	lsls	r7, r3, #24
 8009b2e:	f856 5b04 	ldr.w	r5, [r6], #4
 8009b32:	600e      	str	r6, [r1, #0]
 8009b34:	d514      	bpl.n	8009b60 <_printf_i+0x1ac>
 8009b36:	07d9      	lsls	r1, r3, #31
 8009b38:	bf44      	itt	mi
 8009b3a:	f043 0320 	orrmi.w	r3, r3, #32
 8009b3e:	6023      	strmi	r3, [r4, #0]
 8009b40:	b91d      	cbnz	r5, 8009b4a <_printf_i+0x196>
 8009b42:	6823      	ldr	r3, [r4, #0]
 8009b44:	f023 0320 	bic.w	r3, r3, #32
 8009b48:	6023      	str	r3, [r4, #0]
 8009b4a:	2310      	movs	r3, #16
 8009b4c:	e7b0      	b.n	8009ab0 <_printf_i+0xfc>
 8009b4e:	6823      	ldr	r3, [r4, #0]
 8009b50:	f043 0320 	orr.w	r3, r3, #32
 8009b54:	6023      	str	r3, [r4, #0]
 8009b56:	2378      	movs	r3, #120	; 0x78
 8009b58:	4828      	ldr	r0, [pc, #160]	; (8009bfc <_printf_i+0x248>)
 8009b5a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009b5e:	e7e3      	b.n	8009b28 <_printf_i+0x174>
 8009b60:	065e      	lsls	r6, r3, #25
 8009b62:	bf48      	it	mi
 8009b64:	b2ad      	uxthmi	r5, r5
 8009b66:	e7e6      	b.n	8009b36 <_printf_i+0x182>
 8009b68:	4616      	mov	r6, r2
 8009b6a:	e7bb      	b.n	8009ae4 <_printf_i+0x130>
 8009b6c:	680b      	ldr	r3, [r1, #0]
 8009b6e:	6826      	ldr	r6, [r4, #0]
 8009b70:	6960      	ldr	r0, [r4, #20]
 8009b72:	1d1d      	adds	r5, r3, #4
 8009b74:	600d      	str	r5, [r1, #0]
 8009b76:	0635      	lsls	r5, r6, #24
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	d501      	bpl.n	8009b80 <_printf_i+0x1cc>
 8009b7c:	6018      	str	r0, [r3, #0]
 8009b7e:	e002      	b.n	8009b86 <_printf_i+0x1d2>
 8009b80:	0671      	lsls	r1, r6, #25
 8009b82:	d5fb      	bpl.n	8009b7c <_printf_i+0x1c8>
 8009b84:	8018      	strh	r0, [r3, #0]
 8009b86:	2300      	movs	r3, #0
 8009b88:	6123      	str	r3, [r4, #16]
 8009b8a:	4616      	mov	r6, r2
 8009b8c:	e7ba      	b.n	8009b04 <_printf_i+0x150>
 8009b8e:	680b      	ldr	r3, [r1, #0]
 8009b90:	1d1a      	adds	r2, r3, #4
 8009b92:	600a      	str	r2, [r1, #0]
 8009b94:	681e      	ldr	r6, [r3, #0]
 8009b96:	6862      	ldr	r2, [r4, #4]
 8009b98:	2100      	movs	r1, #0
 8009b9a:	4630      	mov	r0, r6
 8009b9c:	f7f6 fb20 	bl	80001e0 <memchr>
 8009ba0:	b108      	cbz	r0, 8009ba6 <_printf_i+0x1f2>
 8009ba2:	1b80      	subs	r0, r0, r6
 8009ba4:	6060      	str	r0, [r4, #4]
 8009ba6:	6863      	ldr	r3, [r4, #4]
 8009ba8:	6123      	str	r3, [r4, #16]
 8009baa:	2300      	movs	r3, #0
 8009bac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009bb0:	e7a8      	b.n	8009b04 <_printf_i+0x150>
 8009bb2:	6923      	ldr	r3, [r4, #16]
 8009bb4:	4632      	mov	r2, r6
 8009bb6:	4649      	mov	r1, r9
 8009bb8:	4640      	mov	r0, r8
 8009bba:	47d0      	blx	sl
 8009bbc:	3001      	adds	r0, #1
 8009bbe:	d0ab      	beq.n	8009b18 <_printf_i+0x164>
 8009bc0:	6823      	ldr	r3, [r4, #0]
 8009bc2:	079b      	lsls	r3, r3, #30
 8009bc4:	d413      	bmi.n	8009bee <_printf_i+0x23a>
 8009bc6:	68e0      	ldr	r0, [r4, #12]
 8009bc8:	9b03      	ldr	r3, [sp, #12]
 8009bca:	4298      	cmp	r0, r3
 8009bcc:	bfb8      	it	lt
 8009bce:	4618      	movlt	r0, r3
 8009bd0:	e7a4      	b.n	8009b1c <_printf_i+0x168>
 8009bd2:	2301      	movs	r3, #1
 8009bd4:	4632      	mov	r2, r6
 8009bd6:	4649      	mov	r1, r9
 8009bd8:	4640      	mov	r0, r8
 8009bda:	47d0      	blx	sl
 8009bdc:	3001      	adds	r0, #1
 8009bde:	d09b      	beq.n	8009b18 <_printf_i+0x164>
 8009be0:	3501      	adds	r5, #1
 8009be2:	68e3      	ldr	r3, [r4, #12]
 8009be4:	9903      	ldr	r1, [sp, #12]
 8009be6:	1a5b      	subs	r3, r3, r1
 8009be8:	42ab      	cmp	r3, r5
 8009bea:	dcf2      	bgt.n	8009bd2 <_printf_i+0x21e>
 8009bec:	e7eb      	b.n	8009bc6 <_printf_i+0x212>
 8009bee:	2500      	movs	r5, #0
 8009bf0:	f104 0619 	add.w	r6, r4, #25
 8009bf4:	e7f5      	b.n	8009be2 <_printf_i+0x22e>
 8009bf6:	bf00      	nop
 8009bf8:	08009d21 	.word	0x08009d21
 8009bfc:	08009d32 	.word	0x08009d32

08009c00 <__retarget_lock_acquire_recursive>:
 8009c00:	4770      	bx	lr

08009c02 <__retarget_lock_release_recursive>:
 8009c02:	4770      	bx	lr

08009c04 <memcpy>:
 8009c04:	440a      	add	r2, r1
 8009c06:	4291      	cmp	r1, r2
 8009c08:	f100 33ff 	add.w	r3, r0, #4294967295
 8009c0c:	d100      	bne.n	8009c10 <memcpy+0xc>
 8009c0e:	4770      	bx	lr
 8009c10:	b510      	push	{r4, lr}
 8009c12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c16:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009c1a:	4291      	cmp	r1, r2
 8009c1c:	d1f9      	bne.n	8009c12 <memcpy+0xe>
 8009c1e:	bd10      	pop	{r4, pc}

08009c20 <memmove>:
 8009c20:	4288      	cmp	r0, r1
 8009c22:	b510      	push	{r4, lr}
 8009c24:	eb01 0402 	add.w	r4, r1, r2
 8009c28:	d902      	bls.n	8009c30 <memmove+0x10>
 8009c2a:	4284      	cmp	r4, r0
 8009c2c:	4623      	mov	r3, r4
 8009c2e:	d807      	bhi.n	8009c40 <memmove+0x20>
 8009c30:	1e43      	subs	r3, r0, #1
 8009c32:	42a1      	cmp	r1, r4
 8009c34:	d008      	beq.n	8009c48 <memmove+0x28>
 8009c36:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009c3a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009c3e:	e7f8      	b.n	8009c32 <memmove+0x12>
 8009c40:	4402      	add	r2, r0
 8009c42:	4601      	mov	r1, r0
 8009c44:	428a      	cmp	r2, r1
 8009c46:	d100      	bne.n	8009c4a <memmove+0x2a>
 8009c48:	bd10      	pop	{r4, pc}
 8009c4a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009c4e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009c52:	e7f7      	b.n	8009c44 <memmove+0x24>

08009c54 <_realloc_r>:
 8009c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c56:	4607      	mov	r7, r0
 8009c58:	4614      	mov	r4, r2
 8009c5a:	460e      	mov	r6, r1
 8009c5c:	b921      	cbnz	r1, 8009c68 <_realloc_r+0x14>
 8009c5e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009c62:	4611      	mov	r1, r2
 8009c64:	f7ff bc46 	b.w	80094f4 <_malloc_r>
 8009c68:	b922      	cbnz	r2, 8009c74 <_realloc_r+0x20>
 8009c6a:	f7ff fbf3 	bl	8009454 <_free_r>
 8009c6e:	4625      	mov	r5, r4
 8009c70:	4628      	mov	r0, r5
 8009c72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c74:	f000 f814 	bl	8009ca0 <_malloc_usable_size_r>
 8009c78:	42a0      	cmp	r0, r4
 8009c7a:	d20f      	bcs.n	8009c9c <_realloc_r+0x48>
 8009c7c:	4621      	mov	r1, r4
 8009c7e:	4638      	mov	r0, r7
 8009c80:	f7ff fc38 	bl	80094f4 <_malloc_r>
 8009c84:	4605      	mov	r5, r0
 8009c86:	2800      	cmp	r0, #0
 8009c88:	d0f2      	beq.n	8009c70 <_realloc_r+0x1c>
 8009c8a:	4631      	mov	r1, r6
 8009c8c:	4622      	mov	r2, r4
 8009c8e:	f7ff ffb9 	bl	8009c04 <memcpy>
 8009c92:	4631      	mov	r1, r6
 8009c94:	4638      	mov	r0, r7
 8009c96:	f7ff fbdd 	bl	8009454 <_free_r>
 8009c9a:	e7e9      	b.n	8009c70 <_realloc_r+0x1c>
 8009c9c:	4635      	mov	r5, r6
 8009c9e:	e7e7      	b.n	8009c70 <_realloc_r+0x1c>

08009ca0 <_malloc_usable_size_r>:
 8009ca0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ca4:	1f18      	subs	r0, r3, #4
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	bfbc      	itt	lt
 8009caa:	580b      	ldrlt	r3, [r1, r0]
 8009cac:	18c0      	addlt	r0, r0, r3
 8009cae:	4770      	bx	lr

08009cb0 <_init>:
 8009cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cb2:	bf00      	nop
 8009cb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cb6:	bc08      	pop	{r3}
 8009cb8:	469e      	mov	lr, r3
 8009cba:	4770      	bx	lr

08009cbc <_fini>:
 8009cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cbe:	bf00      	nop
 8009cc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cc2:	bc08      	pop	{r3}
 8009cc4:	469e      	mov	lr, r3
 8009cc6:	4770      	bx	lr
